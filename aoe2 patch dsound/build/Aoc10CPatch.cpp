#include "Aoc10CPatch.h"
typedef uintptr_t addr;
#include "../src/MemoryMgr.h"
#include <assert.h>
#include <iostream>
#include <fstream>
#include <string>

DWORD Aoc10C_H;
DWORD Aoc10C_V;


void interfaceId()
{

	Nop(0x051F9A9, 6);
	Nop(0x051F9CC, 6);
	//fix overlay
 
	//

	//550 -340= 
	//300 -2DC= 
	//writeDwordF1(0x01223DB, Aoc10C_H - 452);
	Patch(0x05223F7+1, (BYTE)0x02);

	writeDwordF1(0x01223FA, Aoc10C_V - 36);
	if(Aoc10C_V >=768)
		writeDwordF1(0x01223FF, Aoc10C_H - 500);
	if (Aoc10C_V >= 600 && Aoc10C_V < 768)
		writeDwordF1(0x01223FF, Aoc10C_H - 450);

	//Nop(0x05223D5, 31);
	//005223B0     EB 42          JMP SHORT age2_x1.005223F4
	Patch(0x05223B0 , (BYTE)0xEB);
	Patch(0x05223B0 + 1, (BYTE)0x42);
	//004527C4   . 3D 00050000    CMP EAX, 500
	//004527C9     EB 11          JMP SHORT age2_x1.004527DC
	Patch(0x04527C9  , (BYTE)0xEB);
	//0052237E     EB 0A          JMP SHORT age2_x1.0052238A
	Patch(0x052237E, (BYTE)0xEB);


	//writeDwordF1(0x01223DB, Aoc10C_V - 36);
	//writeDwordF1(0x01223C0, Aoc10C_H - 528);
	//005223D8   . 6A 01          PUSH 1
	//	005223DA   . 68 DD020000    PUSH 2DD
	//	005223DF   . 68 09020000    PUSH 209
	//	005223E4   . 50             PUSH EAX

 
}
DWORD Aoc10C_setinterfaceId = (DWORD)interfaceId;

DWORD Aoc10C_005BF1E0 = 0x05BF1E0;
DWORD Aoc10C_00453CE0 = 0x0453CE0;
DWORD Aoc10C_00551350 = 0x0551350;
DWORD Aoc10C_0051AE08 = 0x051AE08;
void __declspec(naked) Aoc10CWidescreenResizeScreenCentered()
{
	__asm {

		MOV EDI, DWORD PTR DS : [ESI + 14h]
		MOV Aoc10C_H, EDI
		MOV EDI, DWORD PTR DS : [ESI + 18h]
		MOV Aoc10C_V, EDI
		call Aoc10C_setinterfaceId
		CMP EDI, 400h
		JLE _007C0E3A
		MOV EDI, DWORD PTR DS : [ESI + 14h]
		SUB EDI, 500h
		SHR EDI, 1h
		MOV ECX, DWORD PTR DS : [ESI + 11B8h]
		MOV EAX, DWORD PTR DS : [ECX + 6Ch]
		TEST EAX, EAX
		JE short _007C0A7E
		MOV EDX, DWORD PTR DS : [ECX]
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		PUSH 1Eh
		PUSH EAX
		PUSH 20h
		PUSH 0h
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1070h]
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 118h
		MOV EDX, DWORD PTR DS : [ESI + 14h]
		PUSH EDX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 3Eh
		JMP short _007C0A95
		_007C0A7E:  
		MOV ECX, DWORD PTR DS : [ESI + 1070h]
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 0FAh
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ESI + 14h]
		PUSH EDX
		PUSH 20h
		MOV EAX, DWORD PTR DS : [ECX]
		_007C0A95:
		PUSH 0h
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1078h]
		PUSH 20h
		PUSH 190h
		PUSH 0h
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 0h
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1074h]
		PUSH 0C6h
		PUSH 18Ah
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 0CFh
		PUSH EAX
		PUSH 364h
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1074h]
		PUSH 0C4E9h
		PUSH 00679C2Ch; ASCII "map1280.bmp"
		CALL Aoc10C_005BF1E0
		MOV ECX, DWORD PTR DS : [ESI + 11BCh]
		PUSH 14h
		PUSH 70h
		PUSH 8h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SHR EAX, 1h
		SUB EAX, 38h
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1218h]
		PUSH 14h
		PUSH 142h
		PUSH 16h
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 209h
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 11C4h]
		PUSH 10h
		PUSH 1A4h
		PUSH 2h
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 2h
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 107Ch]
		PUSH 96h
		PUSH 17Ch
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 0C5h
		PUSH EAX
		PUSH 153h
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV EBP, DWORD PTR DS : [ESI + 18h]
		SUB EBP, 0B3h
		LEA EDI, DWORD PTR DS : [ESI + 1080h]
		_007C0B69:
		MOV EBX, DWORD PTR DS : [ESI + 14h]
		SUB EBX, 500h
		SHR EBX, 1h
		ADD EBX, 2Ch
		_007C0B7A: 
		MOV ECX, DWORD PTR DS : [EDI]
		PUSH 28h
		PUSH 28h
		PUSH EBP
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH EBX
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [EDI]
		PUSH 24h
		CALL Aoc10C_00453CE0
		ADD EBX, 29h
		ADD EDI, 4h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SUB EAX, 500h
		SHR EAX, 1h
		ADD EAX, 0F9h
		CMP EBX, EAX
		JL short _007C0B7A
		MOV EBX, DWORD PTR DS : [ESI + 18h]
		SUB EBX, 38h
		ADD EBP, 29h
		CMP EBP, EBX
		JL short _007C0B69
		MOV EDI, DWORD PTR DS : [ESI + 14h]
		SUB EDI, 500h
		SHR EDI, 1h
		MOV EAX, DWORD PTR DS : [ESI + 1068h]
		MOV ECX, DWORD PTR DS : [ESI + 10C8h]
		PUSH 0h
		PUSH EAX
		PUSH 0h
		CALL Aoc10C_00551350
		MOV ECX, DWORD PTR DS : [ESI + 1068h]
		PUSH 2h
		PUSH ECX
		MOV ECX, DWORD PTR DS : [ESI + 10E8h]
		PUSH 0h
		CALL Aoc10C_00551350
		MOV EDX, DWORD PTR DS : [ESI + 1068h]
		MOV ECX, DWORD PTR DS : [ESI + 10DCh]
		PUSH 4h
		PUSH EDX
		PUSH 0h
		CALL Aoc10C_00551350
		MOV EAX, DWORD PTR DS : [ESI + 1068h]
		MOV ECX, DWORD PTR DS : [ESI + 10CCh]
		PUSH 6h
		PUSH EAX
		PUSH 0h
		CALL Aoc10C_00551350
		MOV ECX, DWORD PTR DS : [ESI + 1068h]
		PUSH 8h
		PUSH ECX
		MOV ECX, DWORD PTR DS : [ESI + 10D8h]
		PUSH 0h
		CALL Aoc10C_00551350
		MOV EDX, DWORD PTR DS : [ESI + 1068h]
		MOV ECX, DWORD PTR DS : [ESI + 10E0h]
		PUSH 0Ah
		PUSH EDX
		PUSH 0h
		CALL Aoc10C_00551350
		MOV EAX, DWORD PTR DS : [ESI + 1068h]
		MOV ECX, DWORD PTR DS : [ESI + 10E4h]
		PUSH 0Ch
		PUSH EAX
		PUSH 0h
		CALL Aoc10C_00551350
		MOV ECX, DWORD PTR DS : [ESI + 1068h]
		PUSH 0Eh
		PUSH ECX
		MOV ECX, DWORD PTR DS : [ESI + 10F0h]
		PUSH 0h
		CALL Aoc10C_00551350
		MOV EDX, DWORD PTR DS : [ESI + 1068h]
		MOV ECX, DWORD PTR DS : [ESI + 10E0h]
		PUSH 0Ah
		PUSH EDX
		PUSH 1h
		CALL Aoc10C_00551350
		MOV EAX, DWORD PTR DS : [ESI + 1068h]
		MOV ECX, DWORD PTR DS : [ESI + 10D8h]
		PUSH 8h
		PUSH EAX
		PUSH 1h
		CALL Aoc10C_00551350
		MOV ECX, DWORD PTR DS : [ESI + 1068h]
		PUSH 4h
		PUSH ECX
		MOV ECX, DWORD PTR DS : [ESI + 10DCh]
		PUSH 1h
		CALL Aoc10C_00551350
		MOV ECX, DWORD PTR DS : [ESI + 10ECh]
		PUSH 13h
		PUSH 32h
		PUSH 8h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SUB EAX, 105h
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10D0h]
		PUSH 13h
		PUSH 32h
		PUSH 8h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SUB EAX, 0D3h
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10BCh]
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 13h
		PUSH 32h
		PUSH 8h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SUB EAX, 0A1h
		PUSH EAX
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10C0h]
		PUSH 13h
		PUSH 32h
		PUSH 8h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SUB EAX, 6Fh
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10C4h]
		PUSH 13h
		PUSH 32h
		PUSH 8h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SUB EAX, 3Dh
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10E8h]
		PUSH 35h
		PUSH 35h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 0C3h
		PUSH EAX
		PUSH 377h
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10E4h]
		PUSH 35h
		PUSH 35h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 44h
		PUSH EAX
		PUSH 376h
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10CCh]
		PUSH 21h
		PUSH 21h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 0C6h
		PUSH EAX
		PUSH 47Ch
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10C8h]
		PUSH 21h
		PUSH 21h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 0C6h
		PUSH EAX
		PUSH 4A3h
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10F0h]
		PUSH 21h
		PUSH 21h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 0A8h
		PUSH EAX
		PUSH 4BAh
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10D8h]
		PUSH 21h
		PUSH 21h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 4Eh
		PUSH EAX
		PUSH 4BBh
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10DCh]
		PUSH 21h
		PUSH 21h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 31h
		PUSH EAX
		PUSH 4A2h
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10E0h]
		PUSH 21h
		PUSH 21h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 2Dh
		PUSH EAX
		PUSH 479h
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EDX, DWORD PTR DS : [ECX]
		JMP _007C1652
		_007C0E3A:
		CMP EDI, 300h
		JL _007C1245
		MOV EDI, DWORD PTR DS : [ESI + 14h]
		SUB EDI, 400h
		SHR EDI, 1h
		MOV ECX, DWORD PTR DS : [ESI + 11B8h]
		MOV EAX, DWORD PTR DS : [ECX + 6Ch]
		TEST EAX, EAX
		JE short _007C0E86
		MOV EAX, DWORD PTR DS : [ECX]
		MOV EDX, DWORD PTR DS : [ESI + 14h]
		PUSH 1Eh
		PUSH EDX
		PUSH 19h
		PUSH 0h
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1070h]
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 0E6h
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ESI + 14h]
		PUSH EDX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 37h
		JMP short _007C0E9D
		_007C0E86:
		MOV ECX, DWORD PTR DS : [ESI + 1070h]
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 0C8h
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ESI + 14h]
		PUSH EDX
		PUSH 19h
		MOV EDX, DWORD PTR DS : [ECX]
		_007C0E9D :
		PUSH 0h
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1078h]
		PUSH 18h
		PUSH 190h
		PUSH 0h
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 0h
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1074h]
		PUSH 0A4h
		PUSH 146h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 0A9h
		PUSH EAX
		PUSH 2B0h
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1074h]
		PUSH 0C4E8h
		PUSH 00679C20h; ASCII "map1024.bmp"
		CALL Aoc10C_005BF1E0
		MOV ECX, DWORD PTR DS : [ESI + 11BCh]
		PUSH 14h
		PUSH 70h
		PUSH 2h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SHR EAX, 1h
		SUB EAX, 38h
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1218h]
		PUSH 14h
		PUSH 136h
		PUSH 10h
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 190h
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 11C4h]
		PUSH 10h
		PUSH 1A4h
		PUSH 2h
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 2h
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 107Ch]
		PUSH 96h
		PUSH 17Ch
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 98h
		PUSH EAX
		PUSH 11Eh
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV EBP, DWORD PTR DS : [ESI + 18h]
		SUB EBP, 90h
		LEA EDI, DWORD PTR DS : [ESI + 1080h]
		_007C0F71:
		MOV EBX, DWORD PTR DS : [ESI + 14h]
		SUB EBX, 400h
		SHR EBX, 1h
		ADD EBX, 25h
		_007C0F82:
		MOV ECX, DWORD PTR DS : [EDI]
		PUSH 28h
		PUSH 28h
		PUSH EBP
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH EBX
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [EDI]
		PUSH 24h
		CALL Aoc10C_00453CE0
		ADD EBX, 29h
		ADD EDI, 4h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SUB EAX, 400h
		SHR EAX, 1h
		ADD EAX, 0F2h
		CMP EBX, EAX
		JL short _007C0F82
		MOV EBX, DWORD PTR DS : [ESI + 18h]
		SUB EBX, 15h
		ADD EBP, 29h
		CMP EBP, EBX
		JL short _007C0F71
		MOV EDI, DWORD PTR DS : [ESI + 14h]
		SUB EDI, 400h
		SHR EDI, 1h
		MOV ECX, DWORD PTR DS : [ESI + 1064h]
		PUSH 0h
		PUSH ECX
		MOV ECX, DWORD PTR DS : [ESI + 10C8h]
		PUSH 0h
		CALL Aoc10C_00551350
		MOV EDX, DWORD PTR DS : [ESI + 1064h]
		MOV ECX, DWORD PTR DS : [ESI + 10E8h]
		PUSH 2h
		PUSH EDX
		PUSH 0h
		CALL Aoc10C_00551350
		MOV EAX, DWORD PTR DS : [ESI + 1064h]
		MOV ECX, DWORD PTR DS : [ESI + 10DCh]
		PUSH 4h
		PUSH EAX
		PUSH 0h
		CALL Aoc10C_00551350
		MOV ECX, DWORD PTR DS : [ESI + 1064h]
		PUSH 6h
		PUSH ECX
		MOV ECX, DWORD PTR DS : [ESI + 10CCh]
		PUSH 0h
		CALL Aoc10C_00551350
		MOV EDX, DWORD PTR DS : [ESI + 1064h]
		MOV ECX, DWORD PTR DS : [ESI + 10D8h]
		PUSH 8h
		PUSH EDX
		PUSH 0h
		CALL Aoc10C_00551350
		MOV EAX, DWORD PTR DS : [ESI + 1064h]
		MOV ECX, DWORD PTR DS : [ESI + 10E0h]
		PUSH 0Ah
		PUSH EAX
		PUSH 0h
		CALL Aoc10C_00551350
		MOV ECX, DWORD PTR DS : [ESI + 1064h]
		PUSH 0Ch
		PUSH ECX
		MOV ECX, DWORD PTR DS : [ESI + 10E4h]
		PUSH 0h
		CALL Aoc10C_00551350
		MOV EDX, DWORD PTR DS : [ESI + 1064h]
		MOV ECX, DWORD PTR DS : [ESI + 10F0h]
		PUSH 0Eh
		PUSH EDX
		PUSH 0h
		CALL Aoc10C_00551350
		MOV EAX, DWORD PTR DS : [ESI + 1064h]
		MOV ECX, DWORD PTR DS : [ESI + 10E0h]
		PUSH 0Ah
		PUSH EAX
		PUSH 1h
		CALL Aoc10C_00551350
		MOV ECX, DWORD PTR DS : [ESI + 1064h]
		PUSH 8h
		PUSH ECX
		MOV ECX, DWORD PTR DS : [ESI + 10D8h]
		PUSH 1h
		CALL Aoc10C_00551350
		MOV EDX, DWORD PTR DS : [ESI + 1064h]
		MOV ECX, DWORD PTR DS : [ESI + 10DCh]
		PUSH 4h
		PUSH EDX
		PUSH 1h
		CALL Aoc10C_00551350
		MOV ECX, DWORD PTR DS : [ESI + 10ECh]
		PUSH 13h
		PUSH 32h
		PUSH 3h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SUB EAX, 104h
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10D0h]
		PUSH 13h
		PUSH 32h
		PUSH 3h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SUB EAX, 0D2h
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10BCh]
		PUSH 13h
		PUSH 32h
		PUSH 3h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SUB EAX, 0A0h
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10C0h]
		PUSH 13h
		PUSH 32h
		PUSH 3h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SUB EAX, 6Eh
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10C4h]
		PUSH 13h
		PUSH 32h
		PUSH 3h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SUB EAX, 3Ch
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10E8h]
		PUSH 23h
		PUSH 23h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 9Ah
		PUSH EAX
		PUSH 2CCh
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10E4h]
		PUSH 23h
		PUSH 23h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 31h
		PUSH EAX
		PUSH 2CBh
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10CCh]
		PUSH 19h
		PUSH 19h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 9Ch
		PUSH EAX
		PUSH 3A0h
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10C8h]
		PUSH 19h
		PUSH 19h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 0A2h
		PUSH EAX
		PUSH 3BBh
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10F0h]
		PUSH 19h
		PUSH 19h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 89h
		PUSH EAX
		PUSH 3C4h
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10D8h]
		PUSH 19h
		PUSH 19h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 3Bh
		PUSH EAX
		PUSH 3C3h
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10DCh]
		PUSH 19h
		PUSH 19h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 23h
		PUSH EAX
		PUSH 3B6h
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10E0h]
		PUSH 19h
		PUSH 19h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 27h
		PUSH EAX
		PUSH 39Ah
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		JMP _007C1655
		_007C1245:
		CMP EDI, 258h
		JL _007C1655
		MOV EDI, DWORD PTR DS : [ESI + 14h]
		SUB EDI, 320h
		SHR EDI, 1h
		MOV ECX, DWORD PTR DS : [ESI + 11B8h]
		MOV EAX, DWORD PTR DS : [ECX + 6Ch]
		TEST EAX, EAX
		JE short _007C1291
		MOV EDX, DWORD PTR DS : [ECX]
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		PUSH 1Eh
		PUSH EAX
		PUSH 19h
		PUSH 0h
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1070h]
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 0C8h
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ESI + 14h]
		PUSH EDX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 37h
		JMP short _007C12A8
		_007C1291:
		MOV ECX, DWORD PTR DS : [ESI + 1070h]
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 0AAh
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ESI + 14h]
		PUSH EDX
		PUSH 19h
		MOV EAX, DWORD PTR DS : [ECX]
		_007C12A8:
		PUSH 0h
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1078h]
		PUSH 18h
		PUSH 182h
		PUSH 0h
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 0h
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1074h]
		PUSH 86h
		PUSH 10Ah
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 87h
		PUSH EAX
		PUSH 1FFh
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1074h]
		PUSH 0C4EBh
		PUSH 00679C14h; ASCII "map800.bmp"
		CALL Aoc10C_005BF1E0
		PUSH 14h
		PUSH 70h
		PUSH 2h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SHR EAX, 1h
		MOV EDX, 183h
		SUB EAX, 38h
		CMP EAX, EDX
		CMOVL EAX, EDX
		MOV ECX, DWORD PTR DS : [ESI + 11BCh]
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1218h]
		PUSH 14h
		PUSH 13Eh
		PUSH 10h
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 11Fh
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 11C4h]
		PUSH 10h
		PUSH 1A4h
		PUSH 2h
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 2h
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 107Ch]
		PUSH 84h
		PUSH 12Ah
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 85h
		PUSH EAX
		PUSH 0D2h
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV EBP, DWORD PTR DS : [ESI + 18h]
		SUB EBP, 87h
		LEA EDI, DWORD PTR DS : [ESI + 1080h]
		_007C1386:
		MOV EBX, DWORD PTR DS : [ESI + 14h]
		SUB EBX, 320h
		SHR EBX, 1h
		ADD EBX, 5h
		_007C1397:
		MOV ECX, DWORD PTR DS : [EDI]
		PUSH 28h
		PUSH 28h
		PUSH EBP
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH EBX
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [EDI]
		PUSH 24h
		CALL Aoc10C_00453CE0
		ADD EBX, 29h
		ADD EDI, 4h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SUB EAX, 320h
		SHR EAX, 1h
		ADD EAX, 0D2h
		CMP EBX, EAX
		JL short _007C1397
		MOV EBX, DWORD PTR DS : [ESI + 18h]
		SUB EBX, 0Ch
		ADD EBP, 29h
		CMP EBP, EBX
		JL short _007C1386
		MOV EDI, DWORD PTR DS : [ESI + 14h]
		SUB EDI, 320h
		SHR EDI, 1h
		MOV EAX, DWORD PTR DS : [ESI + 1060h]
		MOV ECX, DWORD PTR DS : [ESI + 10C8h]
		PUSH 0h
		PUSH EAX
		PUSH 0h
		CALL Aoc10C_00551350
		MOV ECX, DWORD PTR DS : [ESI + 1060h]
		PUSH 2h
		PUSH ECX
		MOV ECX, DWORD PTR DS : [ESI + 10E8h]
		PUSH 0h
		CALL Aoc10C_00551350
		MOV EDX, DWORD PTR DS : [ESI + 1060h]
		MOV ECX, DWORD PTR DS : [ESI + 10DCh]
		PUSH 4h
		PUSH EDX
		PUSH 0h
		CALL Aoc10C_00551350
		MOV EAX, DWORD PTR DS : [ESI + 1060h]
		MOV ECX, DWORD PTR DS : [ESI + 10CCh]
		PUSH 6h
		PUSH EAX
		PUSH 0h
		CALL Aoc10C_00551350
		MOV ECX, DWORD PTR DS : [ESI + 1060h]
		PUSH 8h
		PUSH ECX
		MOV ECX, DWORD PTR DS : [ESI + 10D8h]
		PUSH 0h
		CALL Aoc10C_00551350
		MOV EDX, DWORD PTR DS : [ESI + 1060h]
		MOV ECX, DWORD PTR DS : [ESI + 10E0h]
		PUSH 0Ah
		PUSH EDX
		PUSH 0h
		CALL Aoc10C_00551350
		MOV EAX, DWORD PTR DS : [ESI + 1060h]
		MOV ECX, DWORD PTR DS : [ESI + 10E4h]
		PUSH 0Ch
		PUSH EAX
		PUSH 0h
		CALL Aoc10C_00551350
		MOV ECX, DWORD PTR DS : [ESI + 1060h]
		PUSH 0Eh
		PUSH ECX
		MOV ECX, DWORD PTR DS : [ESI + 10F0h]
		PUSH 0h
		CALL Aoc10C_00551350
		MOV EDX, DWORD PTR DS : [ESI + 1060h]
		MOV ECX, DWORD PTR DS : [ESI + 10E0h]
		PUSH 0Ah
		PUSH EDX
		PUSH 1h
		CALL Aoc10C_00551350
		MOV EAX, DWORD PTR DS : [ESI + 1060h]
		MOV ECX, DWORD PTR DS : [ESI + 10D8h]
		PUSH 8h
		PUSH EAX
		PUSH 1h
		CALL Aoc10C_00551350
		MOV ECX, DWORD PTR DS : [ESI + 1060h]
		PUSH 4h
		PUSH ECX
		MOV ECX, DWORD PTR DS : [ESI + 10DCh]
		PUSH 1h
		CALL Aoc10C_00551350
		MOV ECX, DWORD PTR DS : [ESI + 10ECh]
		PUSH 13h
		PUSH 32h
		PUSH 3h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SUB EAX, 104h
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10D0h]
		PUSH 13h
		PUSH 32h
		PUSH 3h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SUB EAX, 0D2h
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10BCh]
		PUSH 13h
		PUSH 32h
		PUSH 3h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SUB EAX, 0A0h
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10C0h]
		PUSH 13h
		PUSH 32h
		PUSH 3h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SUB EAX, 6Eh
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10C4h]
		PUSH 13h
		PUSH 32h
		PUSH 3h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SUB EAX, 3Ch
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10E8h]
		PUSH 23h
		PUSH 23h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 7Bh
		PUSH EAX
		PUSH 204h
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10E4h]
		PUSH 23h
		PUSH 23h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 2Eh
		PUSH EAX
		PUSH 204h
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10CCh]
		PUSH 19h
		PUSH 19h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 7Bh
		PUSH EAX
		PUSH 2CFh
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10C8h]
		PUSH 19h
		PUSH 19h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 7Bh
		PUSH EAX
		PUSH 2EDh
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10F0h]
		PUSH 19h
		PUSH 19h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 65h
		PUSH EAX
		PUSH 300h
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10D8h]
		PUSH 19h
		PUSH 19h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 3Ah
		PUSH EAX
		PUSH 300h
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10DCh]
		PUSH 19h
		PUSH 19h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 25h
		PUSH EAX
		PUSH 2ECh
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10E0h]
		PUSH 19h
		PUSH 19h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 23h
		PUSH EAX
		PUSH 2CFh
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EDX, DWORD PTR DS : [ECX]
		_007C1652:
		CALL DWORD PTR DS : [EDX + 1Ch]
		_007C1655:
		JMP Aoc10C_0051AE08


	}
}



void __declspec(naked) Aoc10CWidescreenResizeScreenUserPatch()
{
	__asm
	{
		MOV EDI, DWORD PTR DS : [ESI + 14h]
		MOV Aoc10C_H, EDI
		MOV EDI, DWORD PTR DS : [ESI + 18h]
		MOV Aoc10C_V,EDI
		call Aoc10C_setinterfaceId

		CMP EDI, 400h
		JMP _007C0E1F
		MOV EDI, DWORD PTR DS : [ESI + 14h]
		SUB EDI, 500h
		MOV ECX, DWORD PTR DS : [ESI + 11B8h]
		MOV EAX, DWORD PTR DS : [ECX + 6Ch]
		TEST EAX, EAX
		JE short _007C0A7B
		MOV EDX, DWORD PTR DS : [ECX]
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		PUSH 1Eh
		PUSH EAX
		PUSH 20h
		PUSH 0h
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1070h]
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 118h
		MOV EDX, DWORD PTR DS : [ESI + 14h]
		PUSH EDX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 3Eh
		JMP short _007C0A92
		_007C0A7B:
		MOV ECX, DWORD PTR DS : [ESI + 1070h]
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 0FAh
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ESI + 14h]
		PUSH EDX
		PUSH 20h
		MOV EAX, DWORD PTR DS : [ECX]
		_007C0A92:
		PUSH 0h
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1078h]
		PUSH 20h
		PUSH 190h
		PUSH 0h
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 0h
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1074h]
		PUSH 0C6h
		PUSH 18Ah
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 0CFh
		PUSH EAX
		PUSH 364h
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1074h]
		PUSH 0C4E9h
		PUSH 00679C2Ch; ASCII "map1280.bmp"
		CALL Aoc10C_005BF1E0
		MOV ECX, DWORD PTR DS : [ESI + 11BCh]
		PUSH 14h
		PUSH 70h
		PUSH 8h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SHR EAX, 1h
		SUB EAX, 38h
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1218h]
		PUSH 14h
		PUSH 142h
		PUSH 16h
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 209h
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 11C4h]
		PUSH 10h
		PUSH 1A4h
		PUSH 2h
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 2h
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 107Ch]
		PUSH 96h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SUB EAX, 324h
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 0C5h
		PUSH EAX
		PUSH 153h
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV EBP, DWORD PTR DS : [ESI + 18h]
		SUB EBP, 0B3h
		LEA EDI, DWORD PTR DS : [ESI + 1080h]
		_007C0B67:
		MOV EBX, 2Ch
		_007C0B6C:
		MOV ECX, DWORD PTR DS : [EDI]
		PUSH 28h
		PUSH 28h
		PUSH EBP
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH EBX
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [EDI]
		PUSH 24h
		CALL Aoc10C_00453CE0
		ADD EBX, 29h
		ADD EDI, 4h
		CMP EBX, 0F9h
		JL short _007C0B6C
		MOV EBX, DWORD PTR DS : [ESI + 18h]
		SUB EBX, 38h
		ADD EBP, 29h
		CMP EBP, EBX
		JL short _007C0B67
		MOV EDI, DWORD PTR DS : [ESI + 14h]
		SUB EDI, 500h
		MOV EAX, DWORD PTR DS : [ESI + 1068h]
		MOV ECX, DWORD PTR DS : [ESI + 10C8h]
		PUSH 0h
		PUSH EAX
		PUSH 0h
		CALL Aoc10C_00551350
		MOV ECX, DWORD PTR DS : [ESI + 1068h]
		PUSH 2h
		PUSH ECX
		MOV ECX, DWORD PTR DS : [ESI + 10E8h]
		PUSH 0h
		CALL Aoc10C_00551350
		MOV EDX, DWORD PTR DS : [ESI + 1068h]
		MOV ECX, DWORD PTR DS : [ESI + 10DCh]
		PUSH 4h
		PUSH EDX
		PUSH 0h
		CALL Aoc10C_00551350
		MOV EAX, DWORD PTR DS : [ESI + 1068h]
		MOV ECX, DWORD PTR DS : [ESI + 10CCh]
		PUSH 6h
		PUSH EAX
		PUSH 0h
		CALL Aoc10C_00551350
		MOV ECX, DWORD PTR DS : [ESI + 1068h]
		PUSH 8h
		PUSH ECX
		MOV ECX, DWORD PTR DS : [ESI + 10D8h]
		PUSH 0h
		CALL Aoc10C_00551350
		MOV EDX, DWORD PTR DS : [ESI + 1068h]
		MOV ECX, DWORD PTR DS : [ESI + 10E0h]
		PUSH 0Ah
		PUSH EDX
		PUSH 0h
		CALL Aoc10C_00551350
		MOV EAX, DWORD PTR DS : [ESI + 1068h]
		MOV ECX, DWORD PTR DS : [ESI + 10E4h]
		PUSH 0Ch
		PUSH EAX
		PUSH 0h
		CALL Aoc10C_00551350
		MOV ECX, DWORD PTR DS : [ESI + 1068h]
		PUSH 0Eh
		PUSH ECX
		MOV ECX, DWORD PTR DS : [ESI + 10F0h]
		PUSH 0h
		CALL Aoc10C_00551350
		MOV EDX, DWORD PTR DS : [ESI + 1068h]
		MOV ECX, DWORD PTR DS : [ESI + 10E0h]
		PUSH 0Ah
		PUSH EDX
		PUSH 1h
		CALL Aoc10C_00551350
		MOV EAX, DWORD PTR DS : [ESI + 1068h]
		MOV ECX, DWORD PTR DS : [ESI + 10D8h]
		PUSH 8h
		PUSH EAX
		PUSH 1h
		CALL Aoc10C_00551350
		MOV ECX, DWORD PTR DS : [ESI + 1068h]
		PUSH 4h
		PUSH ECX
		MOV ECX, DWORD PTR DS : [ESI + 10DCh]
		PUSH 1h
		CALL Aoc10C_00551350
		MOV ECX, DWORD PTR DS : [ESI + 10ECh]
		PUSH 13h
		PUSH 32h
		PUSH 8h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SUB EAX, 105h
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10D0h]
		PUSH 13h
		PUSH 32h
		PUSH 8h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SUB EAX, 0D3h
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10BCh]
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 13h
		PUSH 32h
		PUSH 8h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SUB EAX, 0A1h
		PUSH EAX
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10C0h]
		PUSH 13h
		PUSH 32h
		PUSH 8h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SUB EAX, 6Fh
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10C4h]
		PUSH 13h
		PUSH 32h
		PUSH 8h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SUB EAX, 3Dh
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10E8h]
		PUSH 35h
		PUSH 35h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 0C3h
		PUSH EAX
		PUSH 377h
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10E4h]
		PUSH 35h
		PUSH 35h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 44h
		PUSH EAX
		PUSH 376h
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10CCh]
		PUSH 21h
		PUSH 21h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 0C6h
		PUSH EAX
		PUSH 47Ch
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10C8h]
		PUSH 21h
		PUSH 21h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 0C6h
		PUSH EAX
		PUSH 4A3h
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10F0h]
		PUSH 21h
		PUSH 21h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 0A8h
		PUSH EAX
		PUSH 4BAh
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10D8h]
		PUSH 21h
		PUSH 21h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 4Eh
		PUSH EAX
		PUSH 4BBh
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10DCh]
		PUSH 21h
		PUSH 21h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 31h
		PUSH EAX
		PUSH 4A2h
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10E0h]
		PUSH 21h
		PUSH 21h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 2Dh
		PUSH EAX
		PUSH 479h
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EDX, DWORD PTR DS : [ECX]
		JMP _007C1603
		_007C0E1F:
		CMP EDI, 300h
		JL _007C1210
		MOV EDI, DWORD PTR DS : [ESI + 14h]
		SUB EDI, 400h
		MOV ECX, DWORD PTR DS : [ESI + 11B8h]
		MOV EAX, DWORD PTR DS : [ECX + 6Ch]
		TEST EAX, EAX
		JE short _007C0E69
		MOV EAX, DWORD PTR DS : [ECX]
		MOV EDX, DWORD PTR DS : [ESI + 14h]
		PUSH 1Eh
		PUSH EDX
		PUSH 19h
		PUSH 0h
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1070h]
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 0E6h
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ESI + 14h]
		PUSH EDX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 37h
		JMP short _007C0E80
		_007C0E69:
		MOV ECX, DWORD PTR DS : [ESI + 1070h]
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 0C8h
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ESI + 14h]
		PUSH EDX
		PUSH 19h
		MOV EDX, DWORD PTR DS : [ECX]
		_007C0E80:
		PUSH 0h
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1078h]
		PUSH 18h
		PUSH 190h
		PUSH 0h
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 0h
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1074h]
		PUSH 0A4h
		PUSH 146h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 0A9h
		PUSH EAX
		PUSH 2B0h
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1074h]
		PUSH 0C4E8h
		PUSH 00679C20h; ASCII "map1024.bmp"
		CALL Aoc10C_005BF1E0
		MOV ECX, DWORD PTR DS : [ESI + 11BCh]
		PUSH 14h
		PUSH 70h
		PUSH 2h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SHR EAX, 1h
		SUB EAX, 38h
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1218h]
		PUSH 14h
		PUSH 136h
		PUSH 10h
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 190h
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 11C4h]
		PUSH 10h
		PUSH 1A4h
		PUSH 2h
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 2h
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 107Ch]
		PUSH 96h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SUB EAX, 284h
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 98h
		PUSH EAX
		PUSH 11Eh
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV EBP, DWORD PTR DS : [ESI + 18h]
		SUB EBP, 90h
		LEA EDI, DWORD PTR DS : [ESI + 1080h]
		_007C0F55:
		MOV EBX, 25h
		_007C0F5A:
		MOV ECX, DWORD PTR DS : [EDI]
		PUSH 28h
		PUSH 28h
		PUSH EBP
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH EBX
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [EDI]
		PUSH 24h
		CALL Aoc10C_00453CE0
		ADD EBX, 29h
		ADD EDI, 4h
		CMP EBX, 0F2h
		JL short _007C0F5A
		MOV EBX, DWORD PTR DS : [ESI + 18h]
		SUB EBX, 15h
		ADD EBP, 29h
		CMP EBP, EBX
		JL short _007C0F55
		MOV EDI, DWORD PTR DS : [ESI + 14h]
		SUB EDI, 400h
		MOV ECX, DWORD PTR DS : [ESI + 1064h]
		PUSH 0h
		PUSH ECX
		MOV ECX, DWORD PTR DS : [ESI + 10C8h]
		PUSH 0h
		CALL Aoc10C_00551350
		MOV EDX, DWORD PTR DS : [ESI + 1064h]
		MOV ECX, DWORD PTR DS : [ESI + 10E8h]
		PUSH 2h
		PUSH EDX
		PUSH 0h
		CALL Aoc10C_00551350
		MOV EAX, DWORD PTR DS : [ESI + 1064h]
		MOV ECX, DWORD PTR DS : [ESI + 10DCh]
		PUSH 4h
		PUSH EAX
		PUSH 0h
		CALL Aoc10C_00551350
		MOV ECX, DWORD PTR DS : [ESI + 1064h]
		PUSH 6h
		PUSH ECX
		MOV ECX, DWORD PTR DS : [ESI + 10CCh]
		PUSH 0h
		CALL Aoc10C_00551350
		MOV EDX, DWORD PTR DS : [ESI + 1064h]
		MOV ECX, DWORD PTR DS : [ESI + 10D8h]
		PUSH 8h
		PUSH EDX
		PUSH 0h
		CALL Aoc10C_00551350
		MOV EAX, DWORD PTR DS : [ESI + 1064h]
		MOV ECX, DWORD PTR DS : [ESI + 10E0h]
		PUSH 0Ah
		PUSH EAX
		PUSH 0h
		CALL Aoc10C_00551350
		MOV ECX, DWORD PTR DS : [ESI + 1064h]
		PUSH 0Ch
		PUSH ECX
		MOV ECX, DWORD PTR DS : [ESI + 10E4h]
		PUSH 0h
		CALL Aoc10C_00551350
		MOV EDX, DWORD PTR DS : [ESI + 1064h]
		MOV ECX, DWORD PTR DS : [ESI + 10F0h]
		PUSH 0Eh
		PUSH EDX
		PUSH 0h
		CALL Aoc10C_00551350
		MOV EAX, DWORD PTR DS : [ESI + 1064h]
		MOV ECX, DWORD PTR DS : [ESI + 10E0h]
		PUSH 0Ah
		PUSH EAX
		PUSH 1h
		CALL Aoc10C_00551350
		MOV ECX, DWORD PTR DS : [ESI + 1064h]
		PUSH 8h
		PUSH ECX
		MOV ECX, DWORD PTR DS : [ESI + 10D8h]
		PUSH 1h
		CALL Aoc10C_00551350
		MOV EDX, DWORD PTR DS : [ESI + 1064h]
		MOV ECX, DWORD PTR DS : [ESI + 10DCh]
		PUSH 4h
		PUSH EDX
		PUSH 1h
		CALL Aoc10C_00551350
		MOV ECX, DWORD PTR DS : [ESI + 10ECh]
		PUSH 13h
		PUSH 32h
		PUSH 3h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SUB EAX, 104h
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10D0h]
		PUSH 13h
		PUSH 32h
		PUSH 3h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SUB EAX, 0D2h
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10BCh]
		PUSH 13h
		PUSH 32h
		PUSH 3h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SUB EAX, 0A0h
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10C0h]
		PUSH 13h
		PUSH 32h
		PUSH 3h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SUB EAX, 6Eh
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10C4h]
		PUSH 13h
		PUSH 32h
		PUSH 3h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SUB EAX, 3Ch
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10E8h]
		PUSH 23h
		PUSH 23h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 9Ah
		PUSH EAX
		PUSH 2CCh
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10E4h]
		PUSH 23h
		PUSH 23h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 31h
		PUSH EAX
		PUSH 2CBh
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10CCh]
		PUSH 19h
		PUSH 19h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 9Ch
		PUSH EAX
		PUSH 3A0h
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10C8h]
		PUSH 19h
		PUSH 19h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 0A2h
		PUSH EAX
		PUSH 3BBh
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10F0h]
		PUSH 19h
		PUSH 19h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 89h
		PUSH EAX
		PUSH 3C4h
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10D8h]
		PUSH 19h
		PUSH 19h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 3Bh
		PUSH EAX
		PUSH 3C3h
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10DCh]
		PUSH 19h
		PUSH 19h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 23h
		PUSH EAX
		PUSH 3B6h
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10E0h]
		PUSH 19h
		PUSH 19h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 27h
		PUSH EAX
		PUSH 39Ah
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		JMP _007C1606
		_007C1210:
		CMP EDI, 258h
		JL _007C1606
		MOV EDI, DWORD PTR DS : [ESI + 14h]
		SUB EDI, 320h
		MOV ECX, DWORD PTR DS : [ESI + 11B8h]
		MOV EAX, DWORD PTR DS : [ECX + 6Ch]
		TEST EAX, EAX
		JE short _007C125A
		MOV EDX, DWORD PTR DS : [ECX]
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		PUSH 1Eh
		PUSH EAX
		PUSH 19h
		PUSH 0h
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1070h]
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 0C8h
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ESI + 14h]
		PUSH EDX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 37h
		JMP short _007C1271
		_007C125A:
		MOV ECX, DWORD PTR DS : [ESI + 1070h]
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 0AAh
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ESI + 14h]
		PUSH EDX
		PUSH 19h
		MOV EAX, DWORD PTR DS : [ECX]
		_007C1271:
		PUSH 0h
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1078h]
		PUSH 18h
		PUSH 182h
		PUSH 0h
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 0h
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1074h]
		PUSH 86h
		PUSH 10Ah
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 87h
		PUSH EAX
		PUSH 1FFh
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1074h]
		PUSH 0C4EBh
		PUSH 00679C14h; ASCII "map800.bmp"
		CALL Aoc10C_005BF1E0
		PUSH 14h
		PUSH 70h
		PUSH 2h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SHR EAX, 1h
		MOV EDX, 183h
		SUB EAX, 38h
		CMP EAX, EDX
		CMOVL EAX, EDX
		MOV ECX, DWORD PTR DS : [ESI + 11BCh]
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1218h]
		PUSH 14h
		PUSH 13Eh
		PUSH 10h
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 11Fh
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 11C4h]
		PUSH 10h
		PUSH 1A4h
		PUSH 2h
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 2h
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 107Ch]
		PUSH 84h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SUB EAX, 1F6h
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 85h
		PUSH EAX
		PUSH 0D2h
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV EBP, DWORD PTR DS : [ESI + 18h]
		SUB EBP, 87h
		LEA EDI, DWORD PTR DS : [ESI + 1080h]
		_007C1350:
		MOV EBX, 5h
		_007C1355:
		MOV ECX, DWORD PTR DS : [EDI]
		PUSH 28h
		PUSH 28h
		PUSH EBP
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH EBX
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [EDI]
		PUSH 24h
		CALL Aoc10C_00453CE0
		ADD EBX, 29h
		ADD EDI, 4h
		CMP EBX, 0D2h
		JL short _007C1355
		MOV EBX, DWORD PTR DS : [ESI + 18h]
		SUB EBX, 0Ch
		ADD EBP, 29h
		CMP EBP, EBX
		JL short _007C1350
		MOV EDI, DWORD PTR DS : [ESI + 14h]
		SUB EDI, 320h
		MOV EAX, DWORD PTR DS : [ESI + 1060h]
		MOV ECX, DWORD PTR DS : [ESI + 10C8h]
		PUSH 0h
		PUSH EAX
		PUSH 0h
		CALL Aoc10C_00551350
		MOV ECX, DWORD PTR DS : [ESI + 1060h]
		PUSH 2h
		PUSH ECX
		MOV ECX, DWORD PTR DS : [ESI + 10E8h]
		PUSH 0h
		CALL Aoc10C_00551350
		MOV EDX, DWORD PTR DS : [ESI + 1060h]
		MOV ECX, DWORD PTR DS : [ESI + 10DCh]
		PUSH 4h
		PUSH EDX
		PUSH 0h
		CALL Aoc10C_00551350
		MOV EAX, DWORD PTR DS : [ESI + 1060h]
		MOV ECX, DWORD PTR DS : [ESI + 10CCh]
		PUSH 6h
		PUSH EAX
		PUSH 0h
		CALL Aoc10C_00551350
		MOV ECX, DWORD PTR DS : [ESI + 1060h]
		PUSH 8h
		PUSH ECX
		MOV ECX, DWORD PTR DS : [ESI + 10D8h]
		PUSH 0h
		CALL Aoc10C_00551350
		MOV EDX, DWORD PTR DS : [ESI + 1060h]
		MOV ECX, DWORD PTR DS : [ESI + 10E0h]
		PUSH 0Ah
		PUSH EDX
		PUSH 0h
		CALL Aoc10C_00551350
		MOV EAX, DWORD PTR DS : [ESI + 1060h]
		MOV ECX, DWORD PTR DS : [ESI + 10E4h]
		PUSH 0Ch
		PUSH EAX
		PUSH 0h
		CALL Aoc10C_00551350
		MOV ECX, DWORD PTR DS : [ESI + 1060h]
		PUSH 0Eh
		PUSH ECX
		MOV ECX, DWORD PTR DS : [ESI + 10F0h]
		PUSH 0h
		CALL Aoc10C_00551350
		MOV EDX, DWORD PTR DS : [ESI + 1060h]
		MOV ECX, DWORD PTR DS : [ESI + 10E0h]
		PUSH 0Ah
		PUSH EDX
		PUSH 1h
		CALL Aoc10C_00551350
		MOV EAX, DWORD PTR DS : [ESI + 1060h]
		MOV ECX, DWORD PTR DS : [ESI + 10D8h]
		PUSH 8h
		PUSH EAX
		PUSH 1h
		CALL Aoc10C_00551350
		MOV ECX, DWORD PTR DS : [ESI + 1060h]
		PUSH 4h
		PUSH ECX
		MOV ECX, DWORD PTR DS : [ESI + 10DCh]
		PUSH 1h
		CALL Aoc10C_00551350
		MOV ECX, DWORD PTR DS : [ESI + 10ECh]
		PUSH 13h
		PUSH 32h
		PUSH 3h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SUB EAX, 104h
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10D0h]
		PUSH 13h
		PUSH 32h
		PUSH 3h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SUB EAX, 0D2h
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10BCh]
		PUSH 13h
		PUSH 32h
		PUSH 3h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SUB EAX, 0A0h
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10C0h]
		PUSH 13h
		PUSH 32h
		PUSH 3h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SUB EAX, 6Eh
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10C4h]
		PUSH 13h
		PUSH 32h
		PUSH 3h
		MOV EAX, DWORD PTR DS : [ESI + 14h]
		SUB EAX, 3Ch
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10E8h]
		PUSH 23h
		PUSH 23h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 7Bh
		PUSH EAX
		PUSH 204h
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10E4h]
		PUSH 23h
		PUSH 23h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 2Eh
		PUSH EAX
		PUSH 204h
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10CCh]
		PUSH 19h
		PUSH 19h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 7Bh
		PUSH EAX
		PUSH 2CFh
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10C8h]
		PUSH 19h
		PUSH 19h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 7Bh
		PUSH EAX
		PUSH 2EDh
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10F0h]
		PUSH 19h
		PUSH 19h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 65h
		PUSH EAX
		PUSH 300h
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10D8h]
		PUSH 19h
		PUSH 19h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 3Ah
		PUSH EAX
		PUSH 300h
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10DCh]
		PUSH 19h
		PUSH 19h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 25h
		PUSH EAX
		PUSH 2ECh
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10E0h]
		PUSH 19h
		PUSH 19h
		MOV EAX, DWORD PTR DS : [ESI + 18h]
		SUB EAX, 23h
		PUSH EAX
		PUSH 2CFh
		ADD DWORD PTR SS : [ESP] , EDI
		MOV EDX, DWORD PTR DS : [ECX]
		_007C1603:
		CALL DWORD PTR DS : [EDX + 1Ch]
		_007C1606:
		JMP  Aoc10C_0051AE08//0051AE08


	}
}
WORD Aoc10C_7A5608;
WORD Aoc10C_7A5609;
DWORD Aoc10C_0061442B = 0x061442B;
DWORD Aoc10C_005472B0 = 0x05472B0;
DWORD Aoc10C_00546250 = 0x0546250;
DWORD Aoc10C_005473A0 = 0x05473A0;
char res[] = "%d x %d";
void  __declspec(naked) f_Aoc10C_007BF9D0()
{
	__asm
	{
		PUSH ESI
		PUSH EDI
		PUSH EBX
		MOV EAX, DWORD PTR DS : [Aoc10C_7A5608]
		MOV ECX, DWORD PTR SS : [ESP + 10h]
		CMP AL, BYTE PTR DS : [ECX + 54h]
		JNZ _007BFA69
		MOV ESI, DWORD PTR DS : [ECX + 0Ch]
		CMP ESI, 320h
		JL short _007BFA69
		MOV EDI, DWORD PTR DS : [ECX + 8h]
		CMP EDI, 258h
		JL short _007BFA69
		MOV EBX, DWORD PTR SS : [ESP + 14h]
		SUB ESP, 20h
		LEA ECX, DWORD PTR SS : [ESP]
		PUSH EDI
		PUSH ESI
		PUSH offset res; ASCII "%d x %d"//age2_x1_.007BFA70; ASCII "%d x %d"
		PUSH ECX
		CALL Aoc10C_0061442B
		ADD ESP, 10h
		LEA EDX, DWORD PTR SS : [ESP]
		MOV ECX, EBX
		XOR EAX, EAX
		PUSH EAX
		PUSH EDI
		MOV WORD PTR SS : [ESP + 2h] , SI
		PUSH EDX
		CALL Aoc10C_005473A0
		ADD ESP, 20h
		MOV BYTE PTR DS : [Aoc10C_7A5609] , 1h
		MOV ECX, DWORD PTR DS : [7912A0h]
		MOV ECX, DWORD PTR DS : [ECX + 28h]
		CMP DWORD PTR DS : [ECX + 8F4h] , ESI
		JNZ short _007BFA69
		CMP DWORD PTR DS : [ECX + 8FCh] , EDI
		JNZ short _007BFA69
		MOV ECX, EBX
		MOVSX EAX, WORD PTR DS : [ECX + 0FCh]
		DEC EAX
		PUSH EAX
		CALL Aoc10C_005472B0
		MOV ECX, EBX
		PUSH 1h
		PUSH 0h
		PUSH 7h
		CALL Aoc10C_00546250
		_007BFA69:
		POP EBX
		POP EDI
		POP ESI
		RETN 8h


	}
}

DWORD Aoc10C_00547A00 = 0x0547A00;

DWORD Aoc10C_007BF9D0 = (DWORD)f_Aoc10C_007BF9D0; 
void __declspec(naked)  f_Aoc10C_007BF980()
{
	__asm
	{
		MOV ECX, DWORD PTR SS : [ESP + 4h]
		XOR EAX, EAX
		MOV WORD PTR DS : [Aoc10C_7A5608] , 20h//MOV WORD PTR DS : [7A5608h] , 20h
		MOV DWORD PTR DS : [ECX + 17Ch] , EAX
		CALL Aoc10C_00547A00
		_007BF99A:
		MOV ECX, DWORD PTR DS : [7912A0h]
		MOV EDX, DWORD PTR DS : [ECX + 6Ch]
		MOV ECX, DWORD PTR SS : [ESP + 4h]
		MOV EAX, DWORD PTR DS : [EDX + 18h]
		PUSH Aoc10C_007BF9D0//007BF9D0h
		PUSH ECX
		PUSH 0h
		MOV ECX, DWORD PTR DS : [EAX]
		PUSH 0h
		PUSH EAX
		CALL DWORD PTR DS : [ECX + 20h]
		//CMP WORD PTR DS : [Aoc10C_7A5608] , 20h //WORD PTR DS : [7A5608h] , 20h
		//MOV BYTE PTR DS : [Aoc10C_7A5608] , 8h//MOV BYTE PTR DS : [7A5608h] , 8h
		//JE short _007BF99A
		RETN 4h
	}
}

DWORD Aoc10C_005BBCFA = 0x05BBCFA;
DWORD Aoc10C_005BBA15 = 0x05BBA15;
DWORD Aoc10C_0055EDA0 = 0x055EDA0;
DWORD Aoc10C_0055E9E0 = 0x055E9E0;
DWORD Aoc10C_007BF980 = (DWORD)f_Aoc10C_007BF980;
void  __declspec(naked) addWidescreenControl1()
{
	__asm
	{
		MOV EBP, DWORD PTR SS : [ESP + 4Ch]
		XOR EDI, EDI
		PUSH 0Ah
		PUSH 73h
		PUSH 80h
		PUSH 0F7h
		PUSH 4Bh
		LEA EDI, DWORD PTR DS : [ESI + 888h]
		PUSH EDI
		PUSH ESI
		MOV ECX, ESI
		CALL Aoc10C_0055E9E0
		TEST EAX, EAX
		JE __005BBCFA
		MOV ECX, DWORD PTR DS : [EDI]
		PUSH 14h
		LEA EAX, DWORD PTR DS : [ESI + 88Ch]
		PUSH ECX
		PUSH EAX
		MOV ECX, ESI
		CALL Aoc10C_0055EDA0
		TEST EAX, EAX
		JE __005BBCFA
		MOV ECX, DWORD PTR DS : [ESI + 888h]
		PUSH ECX
		CALL Aoc10C_007BF980//age2_x1.007BF980
		JMP Aoc10C_005BBA15

		__005BBCFA:
		JMP Aoc10C_005BBCFA



	}
}
DWORD Aoc10C_005479C0 = 0x05479C0;
DWORD Aoc10C_005BC2EE = 0x05BC2EE;
void __declspec(naked) addWidescreenControl2()
{
	__asm
	{
		MOV ECX, DWORD PTR DS : [ESI + 888h]
		CALL Aoc10C_005479C0
		MOV EDI, EAX
		XOR EBP, EBP
		MOV BP, AX
		SHR EDI, 10h
		JMP Aoc10C_005BC2EE
	}
}

DWORD Aoc10C_00632C48 = 0x0632C48;
void __declspec(naked) f_Aoc10C_007C1EF0()
{
	__asm
	{
		PUSH EBP
		MOV EBP, ESP
		PUSH EBX
		PUSH ESI
		PUSH EDI
		XOR EDX, EDX
		MOV ECX, DWORD PTR SS : [EBP + 0Ch]
		MOV EAX, DWORD PTR SS : [EBP + 14h]
		MOV DWORD PTR DS : [795024h] , ECX
		LEA ECX, DWORD PTR DS : [EAX + ECX - 1h]
		MOV DWORD PTR DS : [795028h] , ECX
		JMP Aoc10C_00632C48
	}
}
DWORD Aoc10C_7A5500;
void __declspec(naked) f_Aoc10C_007C1F20()
{
	__asm
	{
		PUSH EBP
		MOV EBP, ESP
		PUSH EBX
		PUSH ESI
		PUSH EDI
		MOV EBX, DWORD PTR DS : [Aoc10C_7A5500]
		XOR EDX, EDX
		AND EBX, EBX
		JE short _007C1F4A
		MOV DWORD PTR DS : [795004h] , EBX
		MOV DWORD PTR DS : [795008h] , EBX
		MOV ECX, DWORD PTR SS : [EBP + 30h]
		MOV EAX, DWORD PTR SS : [EBP + 34h]
		MOV DWORD PTR DS : [EBX + 8h] , ECX
		MOV DWORD PTR DS : [EBX + 0Ch] , EAX
		_007C1F4A:
		MOV ECX, DWORD PTR SS : [EBP + 0Ch]
		MOV EAX, DWORD PTR SS : [EBP + 14h]
		MOV DWORD PTR DS : [795024h] , ECX
		LEA ECX, DWORD PTR DS : [EAX + ECX - 1h]
		MOV DWORD PTR DS : [795028h] , ECX
		JMP Aoc10C_00632C48
	}
}
DWORD Aoc10C_007C1EF0 = (DWORD)f_Aoc10C_007C1EF0;// 0x07C1EF0;
DWORD Aoc10C_007C1F20 = (DWORD)f_Aoc10C_007C1F20;// 007C1F20;
DWORD Aoc10C_006139B4 = 0x06139B4;
DWORD Aoc10C_006137C9 = 0x06137C9;

void __declspec(naked) f_Aoc10C_007C1C38()
{
	__asm
	{
		MOV ESI, EDI
		MOV ECX, DWORD PTR SS : [EBP + 24h]
		MOV EAX, DWORD PTR SS : [EBP + 20h]
		MOV EDX, DWORD PTR SS : [EBP + 30h]
		PUSH 0h
		PUSH ECX
		PUSH EAX
		PUSH 19h
		PUSH EDX
		PUSH 0h
		PUSH ESI
		PUSH EBP
		CMP EDX, 400h
		JGE short _007C1C60
		MOV DWORD PTR SS : [ESP + 20h] , 0D6h
		JMP short _007C1C68
		_007C1C60:
		MOV DWORD PTR SS : [ESP + 20h] , 116h
		_007C1C68:
		SUB ESI, EDX
		AND ESI, ESI
		JL _007C1EE3
		_007C1C72:
		MOV DWORD PTR SS : [ESP + 4h] , ESI
		CALL Aoc10C_007C1EF0
		MOV DWORD PTR DS : [795038h] , 0h
		MOV EDX, DWORD PTR SS : [EBP + 30h]
		SUB ESI, EDX
		ADD ESI, 190h
		AND ESI, ESI
		JG short _007C1C72
		MOV DWORD PTR SS : [ESP + 4h] , 0h
		CALL Aoc10C_007C1EF0
		MOV ECX, DWORD PTR DS : [795004h]
		MOV EAX, DWORD PTR SS : [EBP + 30h]
		MOV EDX, DWORD PTR SS : [EBP + 34h]
		MOV DWORD PTR SS : [ESP + 38h] , ECX
		MOV DWORD PTR SS : [ESP + 3Ch] , EAX
		MOV DWORD PTR SS : [ESP + 40h] , EDX
		MOV DWORD PTR SS : [ESP + 44h] , EDI
		MOV DWORD PTR SS : [ESP + 48h] , EBX
		MOV ESI, EBX
		MOV EAX, DWORD PTR DS : [Aoc10C_7A5500]
		TEST EAX, EAX
		JE short _007C1CDA
		CMP DWORD PTR DS : [EAX + 10h] , ESI
		JGE short _007C1D0D
		PUSH EAX
		CALL Aoc10C_006139B4
		ADD ESP, 4h
		_007C1CDA:
		SHL ESI, 2h
		ADD ESI, 14h
		PUSH ESI
		PUSH 1h
		CALL Aoc10C_006137C9
		ADD ESP, 8h
		MOV DWORD PTR DS : [Aoc10C_7A5500] , EAX
		TEST EAX, EAX
		JE _007C1EE3
		LEA ECX, DWORD PTR DS : [ESI - 14h]
		LEA EDI, DWORD PTR DS : [EAX + 14h]
		MOV EDX, ECX
		SHR ECX, 2h
		REP STOS DWORD PTR ES : [EDI]
		MOV EDI, DWORD PTR SS : [ESP + 44h]
		MOV DWORD PTR DS : [EAX + 10h] , EBX
		_007C1D0D:
		MOV EDX, DWORD PTR SS : [ESP + 3Ch]
		MOV EAX, EDI
		SUB EAX, EDX
		SHR EAX, 1
		SUB EAX, EDX
		MOV ESI, EAX
		MOV EAX, EBX
		LEA EBX, DWORD PTR DS : [EDX + ESI]
		MOV EDX, DWORD PTR SS : [ESP + 40h]
		SUB EAX, EDX
		MOV DWORD PTR SS : [ESP + 10h] , EDX
		MOV DWORD PTR SS : [ESP + 8h] , EAX
		MOV ECX, DWORD PTR SS : [ESP + 38h]
		MOV EDX, DWORD PTR SS : [ESP + 48h]
		LEA ESI, DWORD PTR DS : [ECX + EDX * 4h - 1B8h]
		CMP DWORD PTR DS : [ESI] , 0h
		JNZ short _007C1D56
		ADD ESI, 78h
		CMP DWORD PTR DS : [ESI] , 0h
		JNZ short _007C1D56
		ADD ESI, 78h
		CMP DWORD PTR DS : [ESI] , 0h
		JE _007C1EE3
		_007C1D56:
		MOV EAX, DWORD PTR DS : [ESI]
		MOV EDX, DWORD PTR SS : [ESP + 3Ch]
		MOV DWORD PTR SS : [ESP + 24h] , EAX
		MOV EAX, EDI
		SUB EAX, EDX
		LEA ECX, DWORD PTR DS : [EDI - 198h]
		LEA EDX, DWORD PTR DS : [EDI - 1h]
		MOV DWORD PTR SS : [ESP + 1Ch] , 0h
		MOV DWORD PTR DS : [795038h] , 1C7h
		MOV DWORD PTR SS : [ESP + 2Ch] , EDX
		MOV DWORD PTR SS : [ESP + 28h] , ECX
		MOV DWORD PTR SS : [ESP + 4h] , EAX
		CALL Aoc10C_007C1EF0
		MOV EAX, DWORD PTR SS : [ESP + 24h]
		MOV EDX, DWORD PTR SS : [ESP + 3Ch]
		MOV ECX, DWORD PTR DS : [EAX + 0Ch]
		CMP DWORD PTR SS : [ESP + 20h] , 116h
		JE short _007C1DBD
		MOV ESI, 0DAh
		LEA EBX, DWORD PTR DS : [EDI - 128h]
		MOV EDI, -26h
		LEA EBP, DWORD PTR DS : [EDX - 434h]
		JMP short _007C1DD3
		_007C1DBD:
		MOV ESI, 119h
		LEA EBX, DWORD PTR DS : [EDI - 160h]
		MOV EDI, -2Ah
		LEA EBP, DWORD PTR DS : [EDX - 576h]
		_007C1DD3:
		XOR EDX, EDX
		LEA EAX, DWORD PTR DS : [ESI - 1h]
		MOV DWORD PTR SS : [ESP + 1Ch] , EDX
		MOV DWORD PTR DS : [795038h] , 1C7h
		MOV DWORD PTR SS : [ESP + 2Ch] , EAX
		MOV DWORD PTR SS : [ESP + 28h] , EDX
		MOV DWORD PTR SS : [ESP + 4h] , EDX
		MOV EDX, DWORD PTR SS : [ESP + 44h]
		LEA EAX, DWORD PTR DS : [EBX + 40h]
		DEC EDX
		CMP ECX, EAX
		JL short _007C1E09
		CMP ECX, EDX
		JNZ short _007C1E18
		CALL Aoc10C_007C1F20
		JMP short _007C1E18
		_007C1E09:
		MOV ECX, DWORD PTR SS : [ESP + 38h]
		MOV DWORD PTR DS : [795004h] , ECX
		CALL Aoc10C_007C1EF0
		_007C1E18:
		MOV EAX, DWORD PTR SS : [ESP + 24h]
		CMP DWORD PTR DS : [EAX + 0Ch] , ESI
		JL _007C1EE3
		CMP DWORD PTR DS : [EAX + 8h] , EBX
		JG _007C1EE3
		LEA EDX, DWORD PTR DS : [ESI + 30h]
		_007C1E31:
		MOV DWORD PTR SS : [ESP + 1Ch] , 0h
		MOV DWORD PTR DS : [795038h] , 1C7h
		MOV DWORD PTR SS : [ESP + 2Ch] , EDX
		MOV DWORD PTR SS : [ESP + 28h] , ESI
		MOV DWORD PTR SS : [ESP + 4h] , EDI
		CALL Aoc10C_007C1F20
		ADD EDI, 30h
		ADD ESI, 30h
		ADD EBP, 30h
		LEA EDX, DWORD PTR DS : [ESI + 30h]
		CMP EDX, EBX
		JGE short _007C1EBE
		MOV DWORD PTR SS : [ESP + 1Ch] , 2h
		MOV DWORD PTR DS : [795038h] , 1C7h
		MOV DWORD PTR SS : [ESP + 2Ch] , EDX
		MOV DWORD PTR SS : [ESP + 28h] , ESI
		MOV DWORD PTR SS : [ESP + 4h] , EBP
		CALL Aoc10C_007C1F20
		ADD EDI, 30h
		ADD ESI, 30h
		ADD EBP, 30h
		LEA EDX, DWORD PTR DS : [ESI + 30h]
		CMP EDX, EBX
		JLE short _007C1E31
		MOV EDX, EBX
		MOV DWORD PTR SS : [ESP + 1Ch] , 0h
		MOV DWORD PTR DS : [795038h] , 1C7h
		MOV DWORD PTR SS : [ESP + 2Ch] , EDX
		MOV DWORD PTR SS : [ESP + 28h] , ESI
		MOV DWORD PTR SS : [ESP + 4h] , EDI
		CALL Aoc10C_007C1F20
		JMP short _007C1EE3
		_007C1EBE:
		MOV EDX, EBX
		MOV DWORD PTR SS : [ESP + 1Ch] , 2h
		MOV DWORD PTR DS : [795038h] , 1C7h
		MOV DWORD PTR SS : [ESP + 2Ch] , EDX
		MOV DWORD PTR SS : [ESP + 28h] , ESI
		MOV DWORD PTR SS : [ESP + 4h] , EBP
		CALL Aoc10C_007C1F20
		_007C1EE3:
		ADD ESP, 50h
		POP EBP
		POP EBX
		POP EDI
		POP ESI
		RETN
	}
}

DWORD Aoc10C_007C1C38 = (DWORD)f_Aoc10C_007C1C38;// 0x07C1C38;

void __declspec(naked) ResizeslpInterface()
{
	__asm
	{
		PUSH ESI
		PUSH EDI
		PUSH EBX
		PUSH EBP
		SUB ESP,30h
		MOV EDI,DWORD PTR DS:[ESI+20h]
		MOV ECX,DWORD PTR DS:[ESI+100Ch]
		MOV EDX,DWORD PTR DS:[EDI+0C0h]
		MOV EBX,DWORD PTR DS:[EDI+0D0h]
		MOV DWORD PTR DS:[795000h],EDX
		MOV EAX,DWORD PTR DS:[EBX+3Ch]
		MOV EDX,DWORD PTR DS:[EBX+40h]
		MOV DWORD PTR DS:[795004h],EAX
		MOV DWORD PTR DS:[795008h],EDX
		MOV EDI,DWORD PTR DS:[ESI+14h]
		MOV EBX,DWORD PTR DS:[ESI+18h]
		MOV EBP,DWORD PTR DS:[ECX+0Ch]
		LEA EAX,DWORD PTR DS:[EBX-1h]
		LEA EDX,DWORD PTR DS:[EDI-1h]
		MOV DWORD PTR DS:[795080h],0h
		MOV DWORD PTR DS:[795084h],EAX
		MOV DWORD PTR DS:[795088h],0h
		MOV DWORD PTR DS:[79508Ch],EDX
		MOV DWORD PTR DS:[795038h],0h
		CMP EDI,320h
		JE short _007C1BF5
		CMP EDI,400
		JNZ short __007C1C38//age2_x1_.007C1C38
		CMP EBX,300
		JL short __007C1C38//age2_x1_.007C1C38
		_007C1BF5:
		MOV EDX,DWORD PTR SS:[EBP+24h]
		MOV EAX,DWORD PTR SS:[EBP+20h]
		PUSH 0h
		PUSH EDX
		PUSH EAX
		MOV EDX,DWORD PTR SS:[EBP+30h]
		PUSH 19h
		PUSH EDX
		PUSH 0h
		PUSH 0h
		PUSH EBP
		CALL Aoc10C_007C1EF0//Aoc10C_007C1EF0
		MOV EDX,DWORD PTR SS:[EBP+34h]
		MOV EAX,EBX
		MOV DWORD PTR DS:[795038h],1C7h
		SUB EAX,EDX
		MOV DWORD PTR SS:[ESP+10h],EDX
		MOV DWORD PTR SS:[ESP+8h],EAX
		CALL Aoc10C_007C1EF0//Aoc10C_007C1EF0
		ADD ESP,50h
		POP EBP
		POP EBX
		POP EDI
		POP ESI
		RETN
		__007C1C38:
		JMP [Aoc10C_007C1C38]

	}
}


DWORD Aoc10C_007C1D90 = (DWORD)f_Aoc10C_007C1EF0;//Aoc10C_007C1D90;// 0x07C1D90;
void __declspec(naked) ResizeslpInterfaceCentered()
{
	__asm
	{
		PUSH ESI
		PUSH EDI
		PUSH EBX
		PUSH EBP
		SUB ESP, 8h
		MOV EDI, DWORD PTR DS : [ESI + 20h]
		MOV ECX, DWORD PTR DS : [ESI + 100Ch]
		MOV EDX, DWORD PTR DS : [EDI + 0C0h]
		MOV EBX, DWORD PTR DS : [EDI + 0D0h]
		MOV DWORD PTR DS : [795000h] , EDX
		MOV EAX, DWORD PTR DS : [EBX + 3Ch]
		MOV EDX, DWORD PTR DS : [EBX + 40h]
		MOV DWORD PTR DS : [795004h] , EAX
		MOV DWORD PTR DS : [795008h] , EDX
		MOV EDI, DWORD PTR DS : [ESI + 14h]
		MOV EBX, DWORD PTR DS : [ESI + 18h]
		MOV EBP, DWORD PTR DS : [ECX + 0Ch]
		LEA EAX, DWORD PTR DS : [EBX - 1h]
		LEA EDX, DWORD PTR DS : [EDI - 1h]
		MOV DWORD PTR DS : [795080h] , 0h
		MOV DWORD PTR DS : [795084h] , EAX
		MOV DWORD PTR DS : [795088h] , 0h
		MOV DWORD PTR DS : [79508Ch] , EDX
		MOV DWORD PTR DS : [795038h] , 0h
		CMP EDI, 320h
		JE short _007C1C35
		CMP EDI, 400h
		JNZ short _007C1C78
		CMP EBX, 300h
		JL short _007C1C78
		_007C1C35:
		MOV EDX, DWORD PTR SS : [EBP + 24h]
		MOV EAX, DWORD PTR SS : [EBP + 20h]
		PUSH 0h
		PUSH EDX
		PUSH EAX
		MOV EDX, DWORD PTR SS : [EBP + 30h]
		PUSH 19h
		PUSH EDX
		PUSH 0h
		PUSH 0h
		PUSH EBP
		CALL Aoc10C_007C1D90
		MOV EDX, DWORD PTR SS : [EBP + 34h]
		MOV EAX, EBX
		MOV DWORD PTR DS : [795038h] , 1C7h
		SUB EAX, EDX
		MOV DWORD PTR SS : [ESP + 10h] , EDX
		MOV DWORD PTR SS : [ESP + 8h] , EAX
		CALL Aoc10C_007C1D90
		ADD ESP, 28h
		POP EBP
		POP EBX
		POP EDI
		POP ESI
		RETN


		_007C1C78:
		MOV ESI, EDI
		MOV ECX, DWORD PTR SS : [EBP + 24h]
		MOV EAX, DWORD PTR SS : [EBP + 20h]
		MOV EDX, DWORD PTR SS : [EBP + 30h]
		PUSH 0h
		PUSH ECX
		PUSH EAX
		PUSH 19h
		PUSH EDX
		PUSH 0h
		PUSH ESI
		PUSH EBP
		CMP EDX, 400h
		JE short _007C1CA8
		CMP EDX, 500h
		JE short _007C1CB2
		MOV DWORD PTR SS : [ESP + 20h] , 0D6h
		JMP short _007C1CC2
		_007C1CA8:
		MOV DWORD PTR SS : [ESP + 20h] , 116h
		JMP short _007C1CC2
		_007C1CB2:
		MOV DWORD PTR SS : [ESP + 10h] , 20h
		MOV DWORD PTR SS : [ESP + 20h] , 158h
		_007C1CC2:
		SUB ESI, EDX
		AND ESI, ESI
		JL _007C1D7C
		_007C1CCC:
		MOV DWORD PTR SS : [ESP + 4h] , ESI
		CALL Aoc10C_007C1D90
		MOV DWORD PTR DS : [795038h] , 0h
		MOV EDX, DWORD PTR SS : [EBP + 30h]
		SUB ESI, EDX
		ADD ESI, 190h
		AND ESI, ESI
		JG short _007C1CCC
		MOV DWORD PTR SS : [ESP + 4h] , 0h
		CALL Aoc10C_007C1D90
		MOV EDX, DWORD PTR SS : [EBP + 30h]
		MOV EAX, EDI
		SUB EAX, EDX
		SHR EAX, 1
		SUB EAX, EDX
		MOV ESI, EAX
		MOV EAX, EBX
		LEA EBX, DWORD PTR DS : [EDX + ESI]
		MOV EDX, DWORD PTR SS : [EBP + 34h]
		SUB EAX, EDX
		MOV DWORD PTR SS : [ESP + 10h] , EDX
		MOV DWORD PTR SS : [ESP + 8h] , EAX
		MOV DWORD PTR SS : [ESP + 1Ch] , 0h
		MOV DWORD PTR DS : [795038h] , 1C7h
		MOV DWORD PTR SS : [ESP + 4h] , EBX
		CALL Aoc10C_007C1D90
		MOV EDX, DWORD PTR SS : [EBP + 30h]
		ADD EBX, EDX
		_007C1D3A:
		MOV DWORD PTR SS : [ESP + 1Ch] , 2h
		MOV DWORD PTR DS : [795038h] , 1C7h
		MOV DWORD PTR SS : [ESP + 4h] , ESI
		CALL Aoc10C_007C1D90
		MOV DWORD PTR SS : [ESP + 1Ch] , 0h
		MOV DWORD PTR DS : [795038h] , 1C7h
		MOV DWORD PTR SS : [ESP + 4h] , EBX
		CALL Aoc10C_007C1D90
		MOV EAX, DWORD PTR SS : [ESP + 20h]
		SUB ESI, EAX
		ADD EBX, EAX
		CMP EBX, EDI
		JL short _007C1D3A
		_007C1D7C:
		ADD ESP, 28h
		POP EBP
		POP EBX
		POP EDI
		POP ESI
		RETN


	}
}


void nocd()
{
	Nop(0x05101F5, 8);
	//004FF1E4
	writeByte(0x04FF1E4,0xEB);
	//0050A448
	writeByte(0x050A448, 0xEB);
}
DWORD Aoc10C_00525690 = 0x0525690;
void __declspec(naked) fixRecordInterface()
{
	__asm
	{
		MOV EDI, DWORD PTR SS : [ESP + 18h]
		CMP EDI, 400h
		JMP _007C17E5
		MOV EDI, DWORD PTR SS : [ESP + 14h]
		SUB EDI, 500h
		SHR EDI, 1h
		XOR EDI, EDI
		MOV ECX, DWORD PTR DS : [ESI + 1138h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 0ACh
		PUSH 14h
		PUSH 0C4h
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 4Eh
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 112Ch]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 8Bh
		PUSH 14h
		PUSH 64h
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 74h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1130h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 77h
		PUSH 14h
		PUSH 64h
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 74h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1134h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 63h
		PUSH 14h
		PUSH 64h
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 74h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10F8h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 8Bh
		PUSH 14h
		PUSH 19h
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 4Eh
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10FCh]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 77h
		PUSH 14h
		PUSH 19h
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 4Eh
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1100h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 63h
		PUSH 14h
		PUSH 19h
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 4Eh
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10F4h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 73h
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 0F4h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1114h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 3Ch
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 4Eh
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1118h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 3Ch
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 6Ch
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1104h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 3Ch
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 92h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 110Ch]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 3Ch
		PUSH 1Eh
		PUSH 1Eh
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH EAX
		PUSH 0B8h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1110h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 3Ch
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 0D6h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1108h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 3Ch
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 0F4h
		ADD DWORD PTR SS : [ESP] , EDI
		JMP Aoc10C_00525690
		_007C17E5:
		MOV ECX, DWORD PTR DS : [ESI + 1138h]
		CMP EDI, 300h
		PUSH 14h
		PUSH 0C4h
		MOV EAX, DWORD PTR DS : [ECX]
		JL _007C19B4
		MOV EDI, DWORD PTR DS : [ESI + 14h]
		SUB EDI, 400h
		SHR EDI, 1h
		XOR EDI, EDI
		MOV EDX, DWORD PTR SS : [ESP + 20h]
		SUB EDX, 90h
		PUSH EDX
		PUSH 2Ah
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 112Ch]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 76h
		PUSH 14h
		PUSH 64h
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 53h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1130h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 62h
		PUSH 14h
		PUSH 64h
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 53h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1134h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 4Eh
		PUSH 14h
		PUSH 64h
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 53h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10F8h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 76h
		PUSH 14h
		PUSH 19h
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 2Ah
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10FCh]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 62h
		PUSH 14h
		PUSH 19h
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 2Ah
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1100h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 4Eh
		PUSH 14h
		PUSH 19h
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 2Ah
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10F4h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 65h
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 0D0h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1114h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 35h
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 2Ah
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1118h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 35h
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 48h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1104h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 35h
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 6Eh
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 110Ch]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 35h
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 94h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1110h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 35h
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 0B2h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1108h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 35h
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 0D0h
		ADD DWORD PTR SS : [ESP] , EDI
		JMP Aoc10C_00525690
		_007C19B4:
		MOV EDI, DWORD PTR DS : [ESI + 14h]
		SUB EDI, 320h
		SHR EDI, 1h
		XOR EDI, EDI
		MOV EDX, DWORD PTR SS : [ESP + 20h]
		SUB EDX, 86h
		PUSH EDX
		PUSH 0Ah
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 112Ch]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 6Eh
		PUSH 14h
		PUSH 64h
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 32h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1130h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 5Ah
		PUSH 14h
		PUSH 64h
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 32h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1134h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 46h
		PUSH 14h
		PUSH 64h
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 32h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10F8h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 6Eh
		PUSH 14h
		PUSH 19h
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 0Ah
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10FCh]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 5Ah
		PUSH 14h
		PUSH 19h
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 0Ah
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1100h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 46h
		PUSH 14h
		PUSH 19h
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 0Ah
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10F4h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 5Ch
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 0B0h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1114h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 2Ch
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 0Ah
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1118h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 2Ch
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 28h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1104h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 2Ch
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 4Eh
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 110Ch]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 2Ch
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 74h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1110h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 2Ch
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 92h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1108h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 2Ch
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 0B0h
		ADD DWORD PTR SS : [ESP] , EDI
		JMP Aoc10C_00525690


	};
}

void __declspec(naked) fixRecordInterfaceCentred()
{
	__asm {
		MOV EDI, DWORD PTR SS : [ESP + 18h]
		CMP EDI, 400h
		JLE _007C1834
		MOV EDI, DWORD PTR SS : [ESP + 14h]
		SUB EDI, 500h
		SHR EDI, 1h
		MOV ECX, DWORD PTR DS : [ESI + 1138h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 0ACh
		PUSH 14h
		PUSH 0C4h
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 4Eh
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 112Ch]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 8Bh
		PUSH 14h
		PUSH 64h
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 74h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1130h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 77h
		PUSH 14h
		PUSH 64h
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 74h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1134h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 63h
		PUSH 14h
		PUSH 64h
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 74h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10F8h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 8Bh
		PUSH 14h
		PUSH 19h
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 4Eh
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10FCh]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 77h
		PUSH 14h
		PUSH 19h
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 4Eh
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1100h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 63h
		PUSH 14h
		PUSH 19h
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 4Eh
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10F4h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 73h
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 0F4h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1114h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 3Ch
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 4Eh
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1118h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 3Ch
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 6Ch
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1104h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 3Ch
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 92h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 110Ch]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 3Ch
		PUSH 1Eh
		PUSH 1Eh
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH EAX
		PUSH 0B8h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1110h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 3Ch
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 0D6h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1108h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 3Ch
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 0F4h
		ADD DWORD PTR SS : [ESP] , EDI
		JMP Aoc10C_00525690
		_007C1834:
		MOV ECX, DWORD PTR DS : [ESI + 1138h]
		CMP EDI, 300h
		PUSH 14h
		PUSH 0C4h
		MOV EAX, DWORD PTR DS : [ECX]
		JL _007C1A01
		MOV EDI, DWORD PTR DS : [ESI + 14h]
		SUB EDI, 400h
		SHR EDI, 1h
		MOV EDX, DWORD PTR SS : [ESP + 20h]
		SUB EDX, 90h
		PUSH EDX
		PUSH 2Ah
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 112Ch]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 76h
		PUSH 14h
		PUSH 64h
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 53h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1130h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 62h
		PUSH 14h
		PUSH 64h
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 53h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1134h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 4Eh
		PUSH 14h
		PUSH 64h
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 53h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10F8h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 76h
		PUSH 14h
		PUSH 19h
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 2Ah
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10FCh]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 62h
		PUSH 14h
		PUSH 19h
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 2Ah
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1100h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 4Eh
		PUSH 14h
		PUSH 19h
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 2Ah
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10F4h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 65h
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 0D0h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1114h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 35h
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 2Ah
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1118h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 35h
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 48h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1104h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 35h
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 6Eh
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 110Ch]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 35h
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 94h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1110h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 35h
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 0B2h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1108h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 35h
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 0D0h
		ADD DWORD PTR SS : [ESP] , EDI
		JMP Aoc10C_00525690
		_007C1A01:
		MOV EDI, DWORD PTR DS : [ESI + 14h]
		SUB EDI, 320h
		SHR EDI, 1h
		MOV EDX, DWORD PTR SS : [ESP + 20h]
		SUB EDX, 86h
		PUSH EDX
		PUSH 0Ah
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 112Ch]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 6Eh
		PUSH 14h
		PUSH 64h
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 32h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1130h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 5Ah
		PUSH 14h
		PUSH 64h
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 32h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1134h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 46h
		PUSH 14h
		PUSH 64h
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 32h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10F8h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 6Eh
		PUSH 14h
		PUSH 19h
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 0Ah
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10FCh]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 5Ah
		PUSH 14h
		PUSH 19h
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 0Ah
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1100h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 46h
		PUSH 14h
		PUSH 19h
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 0Ah
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 10F4h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 5Ch
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 0B0h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1114h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 2Ch
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 0Ah
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1118h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 2Ch
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 28h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1104h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 2Ch
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 4Eh
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 110Ch]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 2Ch
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 74h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1110h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 2Ch
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ECX]
		PUSH 92h
		ADD DWORD PTR SS : [ESP] , EDI
		CALL DWORD PTR DS : [EAX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1108h]
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		SUB EAX, 2Ch
		PUSH 1Eh
		PUSH 1Eh
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 0B0h
		ADD DWORD PTR SS : [ESP] , EDI
		JMP Aoc10C_00525690


	}
}
void Aoc10CWidescreen(bool wideScreenCentred)
{

	//force to user interface drs instead of .ws 
	//0066EE98  69 6E 74 65 72 66 61 63 2E 64 72 73 00           interfac.drs.
	BYTE  Aoc10CinterfacDrs[13]{0x69,0x6E,0x74,0x65,0x72,0x66,0x61,0x63,0x2E,0x64,0x72,0x73,0x00};
	writeData((DWORD)0x066EE98, Aoc10CinterfacDrs, 13);

 


	if (wideScreenCentred)
	{
		//hide conqueror logo
		BYTE aoclogoconqueror[5] =  {0x6A,0x00,0x90,0x90,0x90};
		writeData(0x05172EE, aoclogoconqueror, 5);
		//0051A3B7
		InjectHook(0x051A3B7, Aoc10CWidescreenResizeScreenCentered, PATCH_JUMP);
		//liste screen controle on game 
		writeByte(0x5bb3e1, 0x6E);
		writeByte(0x5bb410, 0x4B);
		writeByte(0x5bc31e, 0x66);
		Nop(0x5bc31f, 1);
		//005BB8CA
		InjectHook(0x05BB8CA, addWidescreenControl1, PATCH_JUMP);
		//005BC29F
		InjectHook(0x05BC29F, addWidescreenControl2, PATCH_JUMP);
		//resize slp interface
		//00522356 
		//00522351   . 68 68235200    PUSH age2_x1_.00522368
		BYTE push[5]{ 0x68,0x68,0x23,0x52,0x00 };
		writeData((DWORD)0x0522351, push, 5);
		InjectHook(0x0522356, ResizeslpInterfaceCentered, PATCH_JUMP);
		//005252BB   .-E9 50C32900    JMP age2_x1_.007C1610
		InjectHook(0x05252BB, fixRecordInterfaceCentred, PATCH_JUMP);
	}
	else
	{
		//resize screen
		InjectHook(0x051A3B7, Aoc10CWidescreenResizeScreenUserPatch, PATCH_JUMP);
		//liste screen controle on game 
		writeByte(0x5bb3e1, 0x6E); 
		writeByte(0x5bb410, 0x4B);
		writeByte(0x5bc31e, 0x66); 
		Nop(0x5bc31f,1); 
		//005BB8CA
		InjectHook(0x05BB8CA, addWidescreenControl1, PATCH_JUMP);
		//005BC29F
		InjectHook(0x05BC29F, addWidescreenControl2, PATCH_JUMP);
		//resize slp interface
		//00522356 
		//00522351   . 68 68235200    PUSH age2_x1_.00522368
		BYTE push[5]{0x68,0x68,0x23,0x52,0x00};
		writeData((DWORD)0x0522351, push,5);
		InjectHook(0x0522356, ResizeslpInterface, PATCH_JUMP);
		//005252BB   .-E9 50C32900    JMP age2_x1_.007C1610
		InjectHook(0x05252BB, fixRecordInterface, PATCH_JUMP);
		//0051FBBF     EB 7D          JMP SHORT age2_x1.0051FC3E
		//	0051FBC1     90             NOP
		//	0051FBC2     90             NOP
		//	0051FBC3     90             NOP
		//	0051FBC4     90             NOP
		//	0051FBC5     90             NOP
		//	0051FBC6     90             NOP
		//	0051FBC7     90             NOP
		writeByte(0x051FBBF, 0xEB);
		writeByte(0x51FBC0, 0x7D);
		Nop(0x051FBC1, 7);
		//fix x1024 widescreen bug
		//0051FBF6     EB 46          JMP SHORT age2_x1.0051FC3E
		writeByte(0x051FBF6, 0xEB);
		writeByte(0x051FBF6+1, 0x46);
	}
}
void noStartup()
{
	Patch(0x00586F5E + 1, (BYTE)0xAC);
}

void windowedMod(bool iswindowed)
{
	if (iswindowed)
	{
		Patch(0x5a1232, (BYTE)0x03);
		writeByte(0x5e752a, 0x66);
		Nop(0x5e752b, 1);
		writeByte(0x41ffe8, 0x66);
		Nop(0x41ffe9, 1);
		writeByte(0x57703d, 0x66);
		Nop(0x57703e, 1);
		LoadLibraryA("windmode.dll");
	}
}
DWORD Aoc10C_005A3B87 = 0x05A3B87;
void  __declspec(naked)  minimapColorhook1()
{
	__asm
	{
		DEC EBP
		DEC EDI
		MOV EAX, DWORD PTR DS : [ECX + 8h]
		TEST EAX, EAX
		JMP Aoc10C_005A3B87
	}
}
DWORD Aoc10C_005A3BA1 = 0x05A3BA1;
void  __declspec(naked)  minimapColorhook2()
{
	__asm
	{
		MOV EDX, DWORD PTR DS : [ECX + 30h]
		SUB EDX, 2h
		CMP EDI, EDX
		JMP Aoc10C_005A3BA1
	}
}
DWORD Aoc10C_005A3BAE = 0x05A3BAE;
void  __declspec(naked)  minimapColorhook3()
{
	__asm
	{
		MOV EAX, DWORD PTR DS : [ECX + 30h]
		SUB EAX, 2h
		CMP EBP, EAX
		JMP Aoc10C_005A3BAE
	}
}
char minimapColor[]= "Mini-map Colors";
DWORD Aoc10C_00542850 = 0x0542850;
DWORD Aoc10C_00543B70 = 0x0543B70;
DWORD Aoc10C_0040A7BB = 0x040A7BB;
DWORD Aoc10C_007A5204;
void  __declspec(naked)  minimapColorhook4()
{
	__asm
	{
		CALL Aoc10C_00542850
		XOR EAX, EAX
		MOV ECX, DWORD PTR DS : [7911E8h]
		MOV DWORD PTR DS : [Aoc10C_007A5204] , EAX
		PUSH offset minimapColor; ASCII "Mini-map Colors"
		PUSH 1h
		CALL Aoc10C_00543B70
		CMP EAX, -1h
		JNZ short _007CC06F
		MOV ECX, DWORD PTR DS : [7911E8h]
		PUSH offset minimapColor; ASCII "Mini-map Colors"
		PUSH 0
		CALL Aoc10C_00543B70
		CMP EAX, -1h
		JE __0040A7BB
		_007CC06F:
		MOV DWORD PTR DS : [Aoc10C_007A5204] , EAX
		JMP Aoc10C_0040A7BB
		__0040A7BB:
		JMP Aoc10C_0040A7BB
	}
}
DWORD Aoc10C_00432BB2 = 0x0432BB2;
void  __declspec(naked)  minimapColorhook5()
{
	__asm
	{
		MOV EDX, DWORD PTR DS : [ESI + 0F8h]
		MOV ECX, DWORD PTR DS : [EDX + 4Ch]
		MOV EDX, DWORD PTR SS : [ESP + 30h]
		MOV ECX, DWORD PTR DS : [ECX + EDX * 4h]
		MOV EDX, DWORD PTR DS : [ESI + 0FCh]
		MOV ECX, DWORD PTR DS : [ECX + 9Ch]
		CMP ECX, DWORD PTR DS : [EDX + 9Ch]
		JNZ _00432BD2
		FLD DWORD PTR DS : [EDI + 1E8h]
		_00432BD2:
		JMP Aoc10C_00432BB2
	}
}
DWORD Aoc10C_00468D07 = 0x0468D07;
void  __declspec(naked)  minimapColorhook6()
{
	__asm
	{
		MOV CL, BYTE PTR SS : [EBP + 1Ch]
		MOV BYTE PTR DS : [EDI + 30h] , CL
		MOV ECX, DWORD PTR SS : [ESP + 10h]
		MOV EDX, DWORD PTR DS : [ECX + 4h]
		JMP Aoc10C_00468D07
	}
}
DWORD Aoc10C_005E2240 =0x05E2240;
DWORD Aoc10C_7CC0C0[]{0xFF,0x23,0xFF,0xFF,0xFF,0xFF,0x0B,0x53,0xFF,0xFF,0xFF,0xFF,0xFF,0x84,0xFF,0xFF,0xFF,0x22,0xFF,0xFF,0xFF,0x73,0xFF,0x53,0xFF,0xFF,0xFF,0xFF,0xFF,0x84,0xFF,0xFF
,0x8B,0x96,0xF8};
void  __declspec(naked)  minimapColorhook7()
{
	__asm
	{
		CALL Aoc10C_00542850
		MOVZX ECX, BYTE PTR DS : [ESI + 4h]
		MOV EDX, 1h
		SHL EDX, CL
		AND EDX, DWORD PTR DS : [Aoc10C_007A5204]
		NEG EDX
		SBB EDX, EDX
		AND EDX, 10h
		ADD EDX, ECX
		//MOV AL, BYTE PTR DS : [EDX + 7CC0C0h]//??? maybe we need remove this hook
		MOV AL, BYTE PTR DS : [EDX + Aoc10C_7CC0C0]
		CMP AL, 0FFh
		JE _005E2240
		MOV BYTE PTR DS : [ESI + 20h] , AL
		_005E2240:
		JMP Aoc10C_005E2240
	}
}
DWORD Aoc10C_00432C7C = 0x0432C7C;
DWORD Aoc10C_00432C83 = 0x0432C83;
void  __declspec(naked)  minimapColorhook8()
{
	__asm
	{
		MOV EAX,DWORD PTR DS:[ESI+17Ch]
		TEST AL,AL
		JE _007CC140
		SHR EAX,8h
		TEST AL,AL
		JMP Aoc10C_00432C7C
		_007CC140:
		MOVSX ECX,BYTE PTR DS:[EDI+30h]
		MOV EAX,DWORD PTR DS:[ESI+0F8h]
		MOV EAX,DWORD PTR DS:[EAX+4Ch]
		MOV ECX,DWORD PTR DS:[EAX+ECX*4h]
		MOV EDX,DWORD PTR DS:[ECX+160h]
		MOV EAX,DWORD PTR DS:[EDX+20h]
		JMP Aoc10C_00432C83
	}
}
DWORD Aoc10C_005A3C6F = 0x05A3C6F;
DWORD Aoc10C_07A51B0 ;
void  __declspec(naked)  minimapColorhook9()
{
	__asm
	{
		MOV ECX, DWORD PTR DS : [Aoc10C_07A51B0]
		ADD ECX, 3h
		MOV DWORD PTR SS : [ESP + 1Ch] , ECX
		JMP Aoc10C_005A3C6F
	}
}
void miniMapColor()
{
	InjectHook(0x05A3B82, minimapColorhook1, PATCH_JUMP);
	InjectHook(0x05A3B9C, minimapColorhook2, PATCH_JUMP);
	InjectHook(0x05A3BA9, minimapColorhook3, PATCH_JUMP);
	InjectHook(0x040A7B6, minimapColorhook4, PATCH_JUMP);
	InjectHook(0x0432BAC, minimapColorhook5, PATCH_JUMP);
	Nop(0x0432BB1,1);
	InjectHook(0x0468d00, minimapColorhook6, PATCH_JUMP);
	Nop(0x0468D05, 2);
	//InjectHook(0x05e223b, minimapColorhook7, PATCH_JUMP);//mini map color ???
	BYTE __004324B1[36]{0x81,0xF9,0xA6,0x00,0x00,0x00,0x72,0x19,0x8D,0x8E,0x7C,0x01,0x00,0x00,0x89,0x41,0xFC,0x31,0xC0,0x38,0x01,0x0F,0x94,0x01,0x74,0x07,0x38,0x41,0x01,0x0F,0x94,0x41,0x01,0x8B,0x4E,0x20};
	writeData(0x04324B1, __004324B1, 36);
	InjectHook(0x0432C69, minimapColorhook8, PATCH_JUMP);
	InjectHook(0x05A3C5F, minimapColorhook9, PATCH_JUMP);
	Nop(0x05A3C64, 1);
	Patch(0x0432C86+1, (BYTE)0x06);
	Patch(0x0432BB2+1, (BYTE)0x03);
	BYTE __004328B5[]{0x8A,0x86,0x7C,0x01,0x00,0x00,0x84,0xC0};
	//same byte for the 4 address
	writeData(0x04328B5, __004328B5, 8);
	writeData(0x0432913, __004328B5, 8);
	writeData(0x0432EBD, __004328B5, 8);
	writeData(0x0432EF7, __004328B5, 8);
	BYTE _00433606[10] = {0x8A,0x87,0x7C,0x01,0x00,0x00,0x6A,0x00,0x84,0xC0};
	writeData(0x0433606 , _00433606, 10);
	writeData(0x0433649, _00433606, 10);
}


typedef unsigned char uchar;
typedef unsigned short ushort;
typedef unsigned int uint;

struct SlpHeader
{
	char version[4];
	int numFrames;
	char comment[24];
};

struct SlpFrame
{
	int cmdTableOffset;
	int outlineTableOffset;
	int paletteOffset;
	int properties;
	int width;
	int height;
	int centerX;
	int centerY;
};

struct TShape
{
	int alloctype;
	int size;
	int* frametbl;
	SlpHeader* slp;
	SlpFrame* frames;
	char isLoaded;
	int numFrames;

	TShape* ctor(char* name, int id);
	void dtor(void);
	TShape* btnctor(char* name, int id);
	void copy(void);
	inline short* getOutlineTable(int n) { return (short*)((char*)this->slp + this->frames[n].outlineTableOffset); }
	inline int* getCmdTable(int n) { return (int*)((char*)this->slp + this->frames[n].cmdTableOffset); }
	inline uchar* getCmd(int off) { return (uchar*)this->slp + off; }
};

WRAPPER TShape* TShape::ctor(char* name, int id) { EAXJMP(0x004DAE00); }
WRAPPER void TShape::dtor(void) { EAXJMP(0x004DB110); }
WRAPPER void* aoemalloc(int n) { EAXJMP(0x006146C3); }

uchar colmap[256];

void
ShapeForallPixels(TShape* slp, uchar(*colmap)[256])
{
	short* outline;
	int* cmdtable;
	uchar* cmd;
	uchar c;
	int npx;
	int y;
	SlpFrame* frame;
	int n;

	int gCurPlayerColor = 1;

	for (n = 0; n < slp->numFrames; n++) {
		frame = &slp->frames[n];
		outline = slp->getOutlineTable(n);
		cmdtable = slp->getCmdTable(n);
		cmd = slp->getCmd(*cmdtable);

		for (y = 0; y < frame->height; y++) {
			for (;;) {
				switch (*cmd & 0x003) {
				case 0x000:	/* small block */
					npx = *cmd++ >> 2;
					while (npx--) {
						*cmd = (*colmap)[*cmd];
						cmd++;
					}
					break;
				case 0x001:	/* small skip */
					npx = *cmd++ >> 2;
					break;
				default:
					switch (*cmd & 0x00F) {
					case 0x002:	/* block */
						npx = (int)(*cmd++ & 0x00F0) << 4;
						npx |= *cmd++;
						while (npx--) {
							*cmd = (*colmap)[*cmd];
							cmd++;
						}
						break;
					case 0x003:	/* skip */
						npx = (int)(*cmd++ & 0x00F0) << 4;
						npx |= *cmd++;
						break;
					case 0x006:	/* player block */
						npx = *cmd++ >> 4;
						if (npx == 0) npx = *cmd++;
						while (npx--) {
							cmd++;
						}
						break;
					case 0x007:	/* fill */
						npx = *cmd++ >> 4;
						if (npx == 0) npx = *cmd++;
						*cmd = (*colmap)[*cmd];
						cmd++;
						break;
					case 0x00A:	/* player fill */
						npx = *cmd++ >> 4;
						if (npx == 0) npx = *cmd++;
						c = *cmd++ + (gCurPlayerColor << 4);
						break;
					case 0x00B:	/* shadow fill ?? */
						npx = *cmd++ >> 4;
						if (npx == 0) npx = *cmd++;
						cmd++;
						break;
					case 0x00F:	/* end of line */
						cmd++;
						goto endofline;
					case 0x00E:	/* extended */
						switch (*cmd++ >> 4) {
						case 0x000:	/* next only if not flipped */
							break;
						case 0x001:	/* next only if flipped */
							break;
						case 0x002:	/* set normal color transform */
							break;
						case 0x003:	/* set alternate color transform */
							break;
						case 0x004:	/* one outline player */
							break;
						case 0x005:	/* outline player */
							cmd++;
							break;
						case 0x006:	/* one outline black */
							break;
						case 0x007:	/* outline black */
							cmd++;
							break;
						}
					}
					break;
				}
			}
		endofline:;
			outline += 2;
		}
	}
}

void
TShape::copy(void)
{
	uchar* data;
	int size;
	size = this->size;
	data = (uchar*)aoemalloc(size);
	assert(data);
	memcpy(data, this->slp, size);
	this->dtor();
	this->slp = (SlpHeader*)data;
	this->alloctype = 1;
	this->size = size;

	this->frames = (SlpFrame*)(this->slp + 1);
	this->numFrames = this->slp->numFrames;
	this->isLoaded = 1;
}

TShape*
TShape::btnctor(char* name, int id)
{
	int i, n;
	TShape* shp;

	// fix color palette
	for (i = 0; i < 256; i++) {
		switch (i) {
		case 8:
			n = 5;
			break;
		case 12:
			n = 129;
			break;
		case 111:
			n = 106;
			break;
		case 142:
			n = 140;
			break;
		case 192:
			n = 249;
			break;
		case 212:
			n = 0;
			break;
		case 229:
			n = 23;
			break;
		case 248:
			n = 229;
			break;
		default:
			n = i;
		}

		colmap[i] = n;
	}

	shp = ctor(name, id);
	shp->copy(); // crashes otherwise
	ShapeForallPixels(shp, &colmap);

	return shp;
}
void slplogo()
{
	InjectHook(0x05172FA, &TShape::btnctor);
	//Patch(0x00517062 + 1, 50753); // aok button slp
	//
	//InjectHook(0x0051706E, &TShape::btnctor);

	//InjectHook(0x0516EC0, &TShape::btnctor);
	//InjectHook(0x0418B28, &TShape::btnctor);
	//InjectHook(0x044934C, &TShape::btnctor);
	//InjectHook(0x04494A7, &TShape::btnctor);
	//InjectHook(0x04494DF, &TShape::btnctor);
	//InjectHook(0x044960C, &TShape::btnctor);
	//InjectHook(0x0449787, &TShape::btnctor);
	//InjectHook(0x04497BF, &TShape::btnctor);
	//InjectHook(0x044D6A0, &TShape::btnctor);
	//InjectHook(0x044D6F7, &TShape::btnctor);
	//InjectHook(0x044D74E, &TShape::btnctor);
	//InjectHook(0x044D7A5, &TShape::btnctor);
	//InjectHook(0x04525D8, &TShape::btnctor);
	//InjectHook(0x045262F, &TShape::btnctor);
	//InjectHook(0x0465775, &TShape::btnctor);
	////InjectHook(0x04D4A60, &TShape::btnctor);
	//InjectHook(0x04D4FBD, &TShape::btnctor);
	//InjectHook(0x04D50B6, &TShape::btnctor);
	//InjectHook(0x04D54AD, &TShape::btnctor);
	//InjectHook(0x04E8DE7, &TShape::btnctor);
	//InjectHook(0x04E8E5B, &TShape::btnctor);
	//InjectHook(0x04F8181, &TShape::btnctor);
	//InjectHook(0x04F867C, &TShape::btnctor);
	//InjectHook(0x04FB37C, &TShape::btnctor);


}

 
DWORD _00527C18;

//flag auto farms is actif
DWORD FlagAutoFarm;

//00527C59   . E8 C289FFFF    CALL age2_x1.00520620
DWORD _00520620 = 0x0520620;
DWORD _00527C5E = 0x0527C5E;
DWORD _005298F0;
char description[] = "Auto Farms";
//004BD7DB  |> 33C0           XOR EAX,EAX                              ;  Default case of switch 004BD37A
//hot key
DWORD __0058F3F0 = 0x58F3F0;
void __declspec(naked)  AddAutoFarmButton004BD7DB()
{
	__asm {
		CMP EDX, 0BAh
		JNZ Default
		LEA EAX, DWORD PTR SS : [ESP + 03h] ;
		LEA EDX, DWORD PTR SS : [ESP + 03h]
			PUSH EAX
			LEA EAX, DWORD PTR SS : [ESP + 07h]
			PUSH EDX
			PUSH EAX
			PUSH 00h
			PUSH 07h//0Eh
			CALL __0058F3F0
			POP ECX
			RETN 04

			Default:
		XOR EAX, EAX;  Default case of switch 004BD37A
			POP ECX
			RETN 04h

	}
}
//0x0440157
DWORD _00457170 = 0x0457170;
DWORD DeadFishTrapEAX;
DWORD DeadFishTrapECX;
DWORD DeadFishTrapEDX;
DWORD DeadFishTrapEBX;
DWORD DeadFishTrapESP;
DWORD DeadFishTrapEBP;
DWORD DeadFishTrapESI;
DWORD DeadFishTrapEDI;
DWORD _0044016A = 0x044016A;
DWORD _00440161 = 0x0440161;
DWORD __x = 0x0;
DWORD __y = 0x0;
DWORD CurrentUnit = 0x0;
//00440134   . 8B1490         MOV EDX,DWORD PTR DS:[EAX+EDX*4]
DWORD currentPlayerToRessedFishTrap = 0x0;
//
//DWORD _0051E5E0;
DWORD _0045E4E0 = 0x045E4E0;
DWORD _00603D50 = 0x0603D50;

DWORD PPC_PTREAX;
DWORD PPC_PTRECX;
DWORD PPC_PTREDX;
DWORD PPC_PTREBX;
DWORD PPC_PTRESP;
DWORD PPC_PTREBP;
DWORD PPC_PTRESI;
DWORD PPC_PTREDI;


DWORD _00467380;
DWORD _045E4F0;
//0051F8CD  |. E8 8E070000    CALL age2_x1.00520060
//click left handel

//0051E1DF   . 83FF 01        CMP EDI,0x1
DWORD _0046A6F0 = 0x046A6F0;
DWORD _005E7560 = 0x05E7560;
DWORD _00602F84 = 0x00602F84;

//DWORD _00520620;

DWORD _0058A650;
DWORD _00520140;
//logo change only when re select mil
void __declspec(naked)  AddAutoFarmButton00527C38()
{
	__asm {
		//CALL _00520620
		CALL _0058A650

		//PUSH 01032h  //4146, 	"Reseed Farm" todo add Auto Farms 
		//LEA ECX, DWORD PTR SS : [ESP + 03Ch] ; |
		//PUSH 012h; | Arg3 = 00000012
		//LEA EDX, DWORD PTR SS : [ESP + 068h] ; |
		//PUSH ECX; | Arg2
		//PUSH EDX; | Arg1
		//MOV ECX, ESI; |
		//MOV DWORD PTR SS : [ESP + 06Ch] , EAX; |







		//LEA EAX, DWORD PTR SS : [ESP + 060h]
		PUSH EBP
		PUSH  offset description//EAX
		PUSH EBP
		PUSH EBP
		PUSH - 01h
		PUSH EBP
		PUSH 0h//01352h
		PUSH 032h
		PUSH 0BAh// jump default switch case
		cmp FlagAutoFarm, 1
		JE logoActived
		//52 53   =  
		PUSH 23h//034h//logoposition in slp
		Jmp next

		logoActived :
		PUSH 023h// 033h//logoposition in slp
			Jmp next



		next:
		PUSH 03h//button position
			MOV ECX, ESI
			CALL _005298F0
			PUSH  EAX
			MOV ECX, ESI
			CALL _00520620


			jmp _00527C18 //00527C5E  |. 8B86 90100000  MOV EAX,DWORD PTR DS:[ESI+0x1090]
	}
}

//0051E5E0  /$ 64:A1 00000000     MOV EAX,DWORD PTR FS:[0]
DWORD _0051E60C = 0x051E60C;
DWORD __0527AF0 = 0x0527AF0;

// mov in fuction 0x0603D4B rebuild farms
//initialize to 1 to allow first push
//DWORD FarmsInQueue=0x1;

DWORD _00529A00 = 0x0529A00;
//DWORD _005E7560 = 0x05E7560;
DWORD _0046A730 = 0x046A730;
DWORD RE_EAX;
DWORD RE_ECX;
DWORD RE_EDX;
DWORD RE_EBX;
DWORD RE_ESP;
DWORD RE_EBP;
DWORD RE_ESI;
DWORD RE_EDI;

char messageON[260] = "Auto-Farms: On";
char messageOFF[260] = "Auto-Farms: Off";
char AutoFishTrapOff[260] = "Auto-Fish-Trap: Off";
char AutoFishTrapOn[260] = "Auto-Fish-Trap: On";
DWORD _0051CD30 = 0x051CD30;
DWORD RessedFarms = 0x0;
//0x051E605
DWORD FlagideButton = 0x0;
DWORD _005246C0 = 0x05246C0;


DWORD FalgisDock = 0x0;
DWORD _Sub_00469680_bis;
DWORD _Sub_00457170_bis;
DWORD _005570F0 = 0x05570F0;
DWORD FlagAutoShipTrap = 0x0;
DWORD initialized = 0x0;
//select mil
//0051FEFB  |. E8 405A0000    CALL age2_x1.00525940

//Get missing addresse when unselect mil
DWORD RecordMilAddr;
void __declspec(naked)  AddAutoFarmButton00ReesedEvent()
{
	__asm {

		MOV EAX, DWORD PTR SS : [ESP + 014h]
		Cmp EAX, 0BAh //if auto farm butoon is clicked
		JNZ CheckFishReseed//continueProcess
		mov FalgisDock, 0h//setflagressed dock diasable
		//save register
		MOV RE_EAX, EAX
		MOV RE_ECX, ECX
		MOV RE_EDX, EDX
		MOV RE_EBX, EBX
		MOV RE_ESP, ESP
		MOV RE_EBP, EBP
		MOV RE_ESI, ESI
		MOV RE_EDI, EDI
		//reall button to auto resseed famrs
		CMP RessedFarms, 0h
		JE Normale
		JMP LikeAD

		Normale :
		cmp FlagAutoFarm, 0
			JE setOn

			setOff :
		mov FlagAutoFarm, 0
			//refresh screen logo button auto farm
			MOV EAX, DWORD PTR SS : [7912A0h + 01820h]
			call __0527AF0
			push 0h
			push offset messageOFF
			CALL _0051CD30
			//restore register
			MOV EAX, RE_EAX
			MOV ECX, RE_ECX
			MOV EDX, RE_EDX
			MOV EBX, RE_EBX
			MOV ESP, RE_ESP
			MOV EBP, RE_EBP
			MOV ESI, RE_ESI
			MOV EDI, RE_EDI
			Jmp CheckFishReseed//continueProcess

			setOn :
		mov FlagAutoFarm, 1h
			//refresh screen logo button auto farm
			MOV EAX, DWORD PTR SS : [7912A0h + 01820h]
			call __0527AF0
			push 0h
			push offset messageON
			CALL _0051CD30
			//restore register
			MOV EAX, RE_EAX
			MOV ECX, RE_ECX
			MOV EDX, RE_EDX
			MOV EBX, RE_EBX
			MOV ESP, RE_ESP
			MOV EBP, RE_EBP
			MOV ESI, RE_ESI
			MOV EDI, RE_EDI
			LikeAD :
		MOV EAX, DWORD PTR SS : [ESP + 01Ch]

			//CMP FarmsInQueue, 1
			//JG AddZeroFarmsQueue
			//PUSH 01h
			//JMP short CallFunc
			//AddZeroFarmsQueue:
			//PUSH 0h
			//JMP short CallFunc

			//	CallFunc:
			PUSH 01h
			TEST EAX, EAX
			JE short _0051F429
			MOV ECX, DWORD PTR DS : [07912A0h]
			CALL _005E7560
			MOV ECX, DWORD PTR DS : [EAX + 09Ch]
			MOV EDX, DWORD PTR DS : [ESI + 0121Ch]
			PUSH ECX
			MOV ECX, DWORD PTR DS : [EDX + 068h]
			CALL _0046A730
			MOV ECX, DWORD PTR SS : [ESP + 04h]
			MOV DWORD PTR FS : [0h] , ECX
			POP ESI
			ADD ESP, 0Ch
			RETN 0Ch

			_0051F429 :
		MOV ECX, ESI; |
			CALL _00529A00; \age2_x1.00529A00
			MOV ECX, DWORD PTR SS : [ESP + 04h]
			MOV DWORD PTR FS : [0h] , ECX
			POP ESI
			ADD ESP, 0Ch
			RETN 0Ch

			CheckFishReseed :
		//fish trap auto reseeed
		/*CMP EAX,0AAh //more dock item
		JNZ reseedFishTrape
		CMP FlagideButton,1h
		JE HideButton
		MOV FlagideButton, 1h
		JMP reseedFishTrape
		HideButton:
		MOV FlagideButton,0h
		JMP reseedFishTrape

		reseedFishTrape:
		Cmp EAX, 0BBh
		JNZ checkAutoFish//continueProcess
		////creat unit fish trap
		//MOV EDX, 0h //DWORD PTR SS : [ESP + 01Ch] ;  Case 12 of switch 0051E609
		//MOV EAX, 0362h//fish trap unit //DWORD PTR SS : [ESP + 018h]
		//NEG EDX
		//SBB EDX, EDX
		//MOV ECX, ESI
		//AND EDX, 0FFFFFFFEh
		//INC EDX
		//PUSH EDX; / Arg2
		//PUSH EAX; | Arg1
		//CALL _005246C0; \age2_x1.005246C0
		//MOV ECX, DWORD PTR SS : [ESP + 04h]
		//MOV DWORD PTR FS : [0h] , ECX
		//POP ESI
		//ADD ESP, 0Ch
		//RETN 0Ch
		mov FalgisDock, 1h //set dock flag reseed enable
		MOV EAX, DWORD PTR SS : [ESP + 01Ch]
		PUSH 01h
		TEST EAX, EAX
		JE short _0051F429_bis
		MOV ECX, DWORD PTR DS : [07912A0h]
		CALL _005E7560
		MOV ECX, DWORD PTR DS : [EAX + 09Ch]
		MOV EDX, DWORD PTR DS : [ESI + 0121Ch]
		PUSH ECX
		MOV ECX, DWORD PTR DS : [EDX + 068h]
		CALL _0046A730
		MOV ECX, DWORD PTR SS : [ESP + 04h]
		MOV DWORD PTR FS : [0h] , ECX
		POP ESI
		ADD ESP, 0Ch
		RETN 0Ch

		_0051F429_bis :
		MOV ECX, ESI; |
		CALL _PushFarmMil //_00529A00; \age2_x1.00529A00
		MOV ECX, DWORD PTR SS : [ESP + 04h]
		MOV DWORD PTR FS : [0h] , ECX
		POP ESI
		ADD ESP, 0Ch
		RETN 0Ch
		*/
	checkAutoFish:
		CMP EAX, 0BBh
			JNZ continueProcess//continueProcess

			CMP FlagAutoShipTrap, 0h
			JE AutoFishOn

			//AutoFishOff :
			MOV FlagAutoShipTrap, 0h
			//refresh screen logo button auto farm
			MOV EAX, DWORD PTR SS : [7912A0h + 01820h]
			call __0527AF0
			push 0h
			push offset AutoFishTrapOff
			CALL _0051CD30
			JMP continueProcess// continueProcess


			AutoFishOn :
		MOV FlagAutoShipTrap, 1h
			//refresh screen logo button auto farm
			MOV EAX, DWORD PTR SS : [7912A0h + 01820h]
			call __0527AF0
			push 0h
			push offset AutoFishTrapOn
			CALL _0051CD30
			JMP continueProcess//continueProcess


			continueProcess :
		MOV EAX, DWORD PTR SS : [ESP + 014h]
			LEA ECX, DWORD PTR DS : [EAX - 01h]
			JMP _0051E60C
	}
}
DWORD _ActionShipBuild;




void __declspec(naked)  Sub_00457170_bis()
{
	__asm {
		PUSH ECX
		PUSH ESI
		PUSH EDI
		MOV EDI, DWORD PTR SS : [ESP + 010h]
		MOV ESI, ECX
		MOVSX ECX, DI
		MOV EAX, DWORD PTR DS : [ESI + 074h]
		MOV EAX, DWORD PTR DS : [EAX + ECX * 4h]
		TEST EAX, EAX
		//JE age2_x1.0045728A
		MOV DL, BYTE PTR DS : [EAX + 05Ah]
		TEST DL, DL
		CMP DI, 026Dh
		CMP ECX, 0C7h


		MOV EAX, DWORD PTR DS : [ESI]
		//this make idle fish ship
		PUSH 00h
		PUSH 00h
		PUSH 00h
		PUSH - 01h
		PUSH - 01h
		PUSH 015h
		LEA ECX, DWORD PTR SS : [ESP + 020h]
		PUSH 04h
		LEA EDX, DWORD PTR SS : [ESP + 02Ch]
		PUSH ECX
		PUSH EDX
		MOV ECX, ESI
		MOV EBP, 0
		CALL  _005570F0  //DWORD PTR DS : [EAX + 0B0h]




		MOV AL, 1h
		TEST AL, AL
		//JE SHORT age2_x1.0045728A
		MOV EAX, DWORD PTR SS : [ESP + 1Ch]
		MOV ECX, DWORD PTR SS : [ESP + 18h]
		MOV EDX, DWORD PTR SS : [ESP + 14h]
		PUSH EAX
		MOV EAX, DWORD PTR SS : [ESP + 0Ch]
		PUSH ECX
		MOV ECX, DWORD PTR SS : [ESP + 018h]
		//function that creat fondation cmd
		PUSH EDX
		MOV EDX, DWORD PTR DS : [ESI + 08Ch]
		PUSH EDI
		PUSH EAX
		PUSH ECX
		MOV ECX, DWORD PTR DS : [EDX + 068h]
		CALL _Sub_00469680_bis // age2_x1.00469680
		POP EDI
		MOV AL, 01h
		POP ESI
		POP ECX
		RETN 010h
		POP EDI
		XOR AL, AL
		POP ESI
		POP ECX
		RETN 010h
	}
}
void __declspec(naked)  ActionShipBuild()
{
	__asm {
		SUB ESP, 0Ch
		MOV EAX, DWORD PTR SS : [ESP + 010h]
		PUSH EBX
		PUSH EBP
		MOV EBP, ECX
		MOV ECX, DWORD PTR SS : [ESP + 01Ch]
		XOR EBX, EBX
		MOV DWORD PTR DS : [EAX] , EBX
		MOV DWORD PTR SS : [ESP + 0Ch] , EBX
		MOV WORD PTR DS : [ECX] , BX
		MOV EAX, DWORD PTR SS : [EBP + 0268h]
		CMP EAX, EBX
		MOV EAX, DWORD PTR SS : [ESP + 02Ch]
		CMP WORD PTR SS : [ESP + 020h] , 0FFFFh
		CMP AX, 02h
		MOV DWORD PTR SS : [ESP + 010h] , EAX

		PUSH ESI
		PUSH EDI
		MOV DWORD PTR SS : [ESP + 010h] , EBX
		LEA EDI, DWORD PTR SS : [EBP + 01C4h]
		MOV EDX, DWORD PTR SS : [ESP + 010h]
		MOV EAX, DWORD PTR SS : [EBP + 0268h]
		CMP EDX, EAX
		MOV ESI, DWORD PTR DS : [EDI]
		TEST ESI, ESI
		//CMP BYTE PTR DS : [ESI + 048h] , 02h
		//CMP DWORD PTR DS : [ESI + 0Ch] , EBP

		//MOV EAX, DWORD PTR DS : [ESI + 08h]
		//MOVZX CX, BYTE PTR DS : [EAX + 095h]
		//CMP CX, WORD PTR SS : [ESP + 028h]

		MOV CX, WORD PTR SS : [ESP + 02Ch]
		CMP CX, 0FFFFh
		XOR DX, DX
		MOV DL, CL
		//CMP WORD PTR DS : [EAX + 016h] , DX
		MOV CX, WORD PTR SS : [ESP + 030h]
		CMP CX, 0FFFFh
		MOV ECX, DWORD PTR SS : [ESP + 034h]
		CMP CX, 0FFFFh

		MOV ECX, DWORD PTR SS : [ESP + 018h]
		CMP CX, 0FFFFh


		MOV CL, BYTE PTR SS : [ESP + 03Ch]
		TEST CL, CL

		MOV EAX, DWORD PTR SS : [ESP + 040]

		MOV EAX, DWORD PTR SS : [ESP + 014h]
		MOV EDX, DWORD PTR DS : [EDI]
		MOVSX ECX, AX
		INC EAX
		MOV DWORD PTR DS : [ECX * 4h + 06B71A0h] , EDX
		MOV DWORD PTR SS : [ESP + 014h] , EAX
		INC DWORD PTR SS : [ESP + 010h]
		INC EBX
		ADD EDI, 04h
		CMP EBX, 028h

		MOV EAX, DWORD PTR SS : [ESP + 0x14]
		POP EDI
		TEST AX, AX
		POP ESI


		MOV ECX, DWORD PTR SS : [ESP + 018h]
		MOV EDX, DWORD PTR SS : [ESP + 01Ch]
		POP EBP
		POP EBX
		//MOV DWORD PTR DS : [ECX] , 006B71A0h
		//MOV WORD PTR DS : [EDX] , AX
		MOV AL, 01h
		ADD ESP, 0Ch
		RETN 24h






	}
}
////0044023F

//DWORD _006137C9 = 0x06137C9;
DWORD _005C8F70 = 0x05C8F70;
DWORD _0045BF20 = 0x045BF20;
void __declspec(naked)  Sub_00469680_bis()
{
	__asm {
		PUSH ECX
		PUSH EBX
		PUSH EBP
		MOV EBP, DWORD PTR SS : [ESP + 010h]
		PUSH ESI
		MOV EBP, 006B71A0h
		TEST EBP, EBP
		PUSH EDI
		MOV DWORD PTR SS : [ESP + 010h] , ECX
		//JE age2_x1.00469766
		MOV BX, WORD PTR SS : [ESP + 01Ch]
		MOV BL, 01h
		CMP BX, 01h
		//JL _00469766
		MOVSX ESI, BX
		LEA EDI, DWORD PTR DS : [ESI * 4h + 018h]
		PUSH EDI
		PUSH 01h
		MOV DWORD PTR SS : [ESP + 024h] , EDI
		CALL Aoc10C_006137C9//_006137C9
		ADD ESP, 08h
		LEA ECX, DWORD PTR DS : [EAX + 018h]
		TEST EAX, EAX
		JE short _00469766
		TEST ESI, ESI
		JLE short _004696EE
		MOV EDI, EBP
		SUB EDI, ECX
		//_004696D0:
		//MOV EDX, DWORD PTR DS : [EDI + ECX]
		//TEST EDX, EDX
		//JE short _004696DE
		//MOV EDX, DWORD PTR DS : [EDX + 04h]
		//MOV DWORD PTR DS : [ECX] , EDX
		//JMP short _004696E4
		//_004696DE:
		//MOV DWORD PTR DS : [ECX] , -01h
		//_004696E4:
		//ADD ECX, 04h
		//DEC ESI
		//JNZ short _004696D0
		MOV EDI, DWORD PTR SS : [ESP + 01Ch]
		_004696EE :
		MOV BYTE PTR DS : [EAX] , 066h
		MOV BYTE PTR DS : [EAX + 01h] , BL
		MOV ECX, DWORD PTR SS : [EBP]
		TEST ECX, ECX
		JE short _00469706
		MOV ECX, DWORD PTR DS : [ECX + 0Ch]
		MOV ECX, DWORD PTR DS : [ECX + 09Ch]
		JMP short _00469709
		_00469706 :
		OR ECX, 0FFFFFFFFh
			_00469709 :
		MOV EDX, DWORD PTR SS : [ESP + 024h]
			MOV ESI, DWORD PTR SS : [ESP + 020h]
			MOV BYTE PTR DS : [EAX + 02h] , CL
			MOV ECX, DWORD PTR SS : [ESP + 028h]
			MOV DWORD PTR DS : [EAX + 04h] , EDX
			MOV DL, BYTE PTR SS : [ESP + 02Ch]
			MOV WORD PTR DS : [EAX + 0Ch] , SI
			MOV DWORD PTR DS : [EAX + 08h] , ECX
			MOV DWORD PTR DS : [EAX + 010h] , -01h
			MOV BYTE PTR DS : [EAX + 014h] , DL
			MOV ECX, DWORD PTR SS : [EBP]
			TEST ECX, ECX
			JE short _00469742
			MOV ECX, DWORD PTR DS : [ECX + 0Ch]
			MOV ECX, DWORD PTR DS : [ECX + 09Ch]
			JMP short _00469744
			_00469742 :
		XOR ECX, ECX
			_00469744 :
		PUSH ECX
			MOV ECX, DWORD PTR SS : [ESP + 014h]
			PUSH EDI
			PUSH EAX
			CALL _005C8F70
			TEST EAX, EAX
			JE SHORT _00469766
			MOV EAX, DWORD PTR SS : [EBP]
			TEST EAX, EAX
			JE SHORT _00469766
			MOV ECX, DWORD PTR DS : [EAX + 0Ch]
			PUSH 00h; / Arg2 = 00000000
			PUSH ESI; | Arg1
			CALL _0045BF20; \age2_x1.0045BF20
			_00469766 :
		POP EDI
			POP ESI
			POP EBP
			POP EBX
			POP ECX
			RETN 018h


	}
}
DWORD _005E7380 = 0x05E7380;
//DWORD _005E7560 = 0x05E7560;
//DWORD _0045E4E0 = 0x045E4E0;
DWORD _005EB990 = 0x05EB990;
DWORD _00520030 = 0x0520030;
DWORD _0054A1F0 = 0x054A1F0;
//DWORD _0046A6F0 = 0x046A6F0;
DWORD _00457CB0 = 0x0457CB0;

void __declspec(naked)  PushFarmMil()
{
	__asm {
		SUB ESP, 0204h
		PUSH EBX
		MOV EBX, ECX
		MOV ECX, DWORD PTR DS : [07912A0h]
		PUSH ESI
		PUSH 00h
		CALL _005E7380
		TEST EAX, EAX
		JNZ _00529BD6
		MOV EAX, DWORD PTR DS : [EBX + 01230h]
		TEST EAX, EAX
		JE _00529BD6
		MOV EAX, DWORD PTR DS : [EAX + 08h]
		//CMP WORD PTR DS : [EAX + 010h] , 044h //44 hex= 68 dec= mil
		CMP WORD PTR DS : [EAX + 010h] , 02Dh //2D hex= 45 dec= DOCK
		JNZ _00529BD6
		MOV ECX, DWORD PTR DS : [07912A0h]
		CALL _005E7560
		MOV ECX, EAX
		CALL _0045E4E0
		CMP EAX, 028h
		JL short _00529A9A
		MOV ECX, DWORD PTR DS : [07912A0h]
		PUSH 00h
		PUSH 00h
		PUSH 03h
		CALL _005EB990
		MOV ECX, DWORD PTR DS : [07912A0h]
		LEA EAX, DWORD PTR SS : [ESP + 0Ch]
		PUSH 0200h
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 0BDFh
		CALL DWORD PTR DS : [EDX + 028h]
		PUSH 00h
		LEA ECX, DWORD PTR SS : [ESP + 010h]
		PUSH 024h
		PUSH ECX
		PUSH 01h
		MOV ECX, EBX
		CALL _00520030
		POP ESI
		POP EBX
		ADD ESP, 0204h
		RETN 04h
		_00529A9A :
		MOV ECX, DWORD PTR DS : [07912A0h]
			CALL _005E7560
			MOV ECX, EAX
			CALL _0045E4E0
			MOV ESI, DWORD PTR SS : [ESP + 0210h]
			ADD EAX, ESI
			CMP EAX, 028h
			JLE short _00529ADA
			MOV ECX, DWORD PTR DS : [07912A0h]
			CALL _005E7560
			MOV ECX, EAX
			CALL _0045E4E0
			MOV ESI, 028h
			SUB ESI, EAX
			MOV DWORD PTR SS : [ESP + 0210h] , ESI
			_00529ADA :
		TEST ESI, ESI
			JLE _00529BB5
			FILD DWORD PTR SS : [ESP + 0210h]
			PUSH 00h
			PUSH 00h
			PUSH 01h
			PUSH ECX
			MOV ECX, DWORD PTR DS : [07912A0h]
			LEA EDX, DWORD PTR SS : [ESP + 01Ah]
			FSTP DWORD PTR SS : [ESP]
			PUSH EDX
			PUSH 0C7h
			CALL _005E7560
			MOV ECX, EAX
			CALL _00457CB0
			TEST AL, AL
			JNZ _00529BB5
			PUSH EDI
			XOR EDI, EDI
			CMP ESI, 01h
			JLE short _00529B5E
			_00529B1C :
		DEC ESI
			PUSH 00h
			MOV DWORD PTR SS : [ESP + 0218h] , ESI
			PUSH 00h
			FILD DWORD PTR SS : [ESP + 021Ch]
			PUSH 01h
			PUSH ECX
			MOV ECX, DWORD PTR DS : [07912A0h]
			LEA EAX, DWORD PTR SS : [ESP + 01Eh]
			FSTP DWORD PTR SS : [ESP]
			PUSH EAX
			PUSH 0C7h
			CALL _005E7560
			MOV ECX, EAX
			CALL _00457CB0
			CMP AL, 01h
			JE short _00529B59
			CMP ESI, 01h
			JG short _00529B1C
			JMP short _00529B5E
			_00529B59 :
		MOV EDI, 01h
			_00529B5E :
		MOV ECX, DWORD PTR DS : [07912A0h]
			PUSH 00h
			PUSH 00h
			PUSH 03h
			CALL _005EB990
			MOV ECX, DWORD PTR DS : [07912A0h]
			LEA EAX, DWORD PTR SS : [ESP + 010h]
			PUSH 0200h
			PUSH EAX
			MOVSX EAX, WORD PTR SS : [ESP + 016h]
			MOV EDX, DWORD PTR DS : [ECX]
			PUSH EAX
			PUSH 01h
			PUSH 067h
			CALL DWORD PTR DS : [EDX + 02Ch]
			PUSH - 01h; / Arg10 = FFFFFFFF
			PUSH 00h; | Arg9 = 00000000
			PUSH - 01h; | Arg8 = FFFFFFFF
			PUSH 00h; | Arg7 = 00000000
			PUSH 00h; | Arg6 = 00000000
			PUSH 00h; | Arg5 = 00000000
			PUSH 00h; | Arg4 = 00000000
			LEA ECX, DWORD PTR SS : [ESP + 02Ch] ; |
			PUSH 024h; | Arg3 = 00000024
			PUSH ECX; | Arg2
			MOV ECX, DWORD PTR DS : [EBX + 01178h] ; |
			PUSH 01h; | Arg1 = 00000001
			CALL _0054A1F0; \age2_x1.0054A1F0
			TEST EDI, EDI
			POP EDI
			JE short _00529BD6
			_00529BB5 :
		MOV ECX, DWORD PTR DS : [07912A0h]
			PUSH ESI
			CALL _005E7560
			MOV EDX, DWORD PTR DS : [EAX + 09Ch]
			MOV EAX, DWORD PTR DS : [EBX + 0121Ch]
			PUSH EDX
			MOV ECX, DWORD PTR DS : [EAX + 068h]
			CALL _0046A6F0
			_00529BD6 :
		POP ESI
			POP EBX
			ADD ESP, 0204h
			RETN 04h


	}
}


DWORD SaveEAX;
DWORD SaveECX;
DWORD SaveEDX;
DWORD SaveEBX;
DWORD SaveESP;
DWORD SaveEBP;
DWORD SaveESI;
DWORD SaveEDI;
DWORD _0051DCC0 = 0x51DCC0;
DWORD _0051E5E0 = 0x051E5E0;
//DWORD _0051CD30 = 0x051CD30;


DWORD RessedButtonAddres;
DWORD RessedECX;
DWORD RessedESI;
DWORD CurrentPlayer;

//0x0603D4B
void __declspec(naked)  RebuildFarms()
{
	__asm {

		//call 
		cmp FlagAutoFarm, 1
		JNZ _NoAutoFarm
		//save register
		MOV SaveEAX, EAX
		MOV SaveECX, ECX
		MOV SaveEDX, EDX
		MOV SaveEBX, EBX
		MOV SaveESP, ESP
		MOV SaveEBP, EBP
		MOV SaveESI, ESI
		MOV SaveEDI, EDI

		//get current player
		MOV ECX, DWORD PTR DS : [07912A0h]
		call _005E7560
		MOV CurrentPlayer, EAX
		//restore register
		MOV EAX, SaveEAX
		MOV ECX, SaveECX
		MOV EDX, SaveEDX
		MOV EBX, SaveEBX
		MOV ESP, SaveESP
		MOV EBP, SaveEBP
		MOV ESI, SaveESI
		MOV EDI, SaveEDI
		//call how many farm for random player
		MOV EAX, DWORD PTR DS : [ESI + 08h]
		MOV ECX, DWORD PTR DS : [EAX + 0Ch]
		//recall how many farm
		CALL _0045E4E0
		//if not current player don't push button
		CMP CurrentPlayer, ECX
		JNZ _NoAutoFarm

		//00603D4B  |. E8 90A7E5FF    CALL age2_x1.0045E4E0
		CALL _0045E4E0
		//if not farm in reseed farm then call reseed but event
		CMP EAX, 1
		JG short _NoAutoFarm; >
		CMP RessedButtonAddres, 0 //if the button address is not loaded it could potentially crash the game 
		JE  short _NoAutoFarm


		//todo push only if farms <=1

		//set flag auto ressed like AD  
		Mov RessedFarms, 1h

		MOV EAX, SaveEAX
		MOV ECX, 0h
		MOV EDX, 032h //located in mil
		MOV EAX, 0BAh//0ADh //resseed button

		PUSH ECX
		PUSH EDX
		PUSH EAX

		MOV EBP, RessedButtonAddres
		MOV EBX, RessedECX
		MOV ESI, RessedESI
		MOV ECX, EBX
		CALL _0051E5E0
		Mov RessedFarms, 0h


		//restore register
		MOV EAX, SaveEAX
		MOV ECX, SaveECX
		MOV EDX, SaveEDX
		MOV EBX, SaveEBX
		MOV ESP, SaveESP
		MOV EBP, SaveEBP
		MOV ESI, SaveESI
		MOV EDI, SaveEDI
		_NoAutoFarm :


		//refresh 
		MOV EAX, DWORD PTR DS : [ESI + 08h]
			MOV ECX, DWORD PTR DS : [EAX + 0Ch]
			//recall how many farm
			CALL _0045E4E0
			Jmp _00603D50

	}
}

//get button address
//0051E1C4   . E8 17040000    CALL age2_x1.0051E5E0
//0x0603D4B
//DWORD _0051E5E0 = 0x0051E5E0;
DWORD _0051E1C9 = 0x051E1C9;
void __declspec(naked)  GetRessedButtonAddres()
{
	__asm {
		//get only ressed button addresse
		//CMP EAX,0ADh //reseed button
		CMP EAX, 0BAh //ADh reseed button
		JNZ continue
		CMP EDX, 032h
		JNZ continue
		MOV RessedButtonAddres, EBP
		MOV RessedECX, EBX
		MOV RessedESI, ESI
		continue:
		CALL _0051E5E0
			JMP _0051E1C9
	}
}

////get button address
////0051E1C4   . E8 17040000    CALL age2_x1.0051E5E0
////0x0603D4B
////DWORD _0051E5E0 = 0x0051E5E0;
//DWORD _0051E1C9 = 0x051E1C9;
//void __declspec(naked)  GetRessedButtonAddres()
//{
//	__asm {
//		//get only ressed button addresse
//		//CMP EAX,0ADh //reseed button
//		CMP EAX, 0BAh //ADh reseed button
//		JNZ continue
//		CMP EDX, 032h
//		JNZ continue
//		MOV RessedButtonAddres, EBP
//		MOV RessedECX, EBX
//		MOV RessedESI, ESI
//		continue:
//		CALL _0051E5E0
//			JMP _0051E1C9
//	}
//}
//select mil
//0051FEFB  |. E8 405A0000    CALL age2_x1.00525940

//Get missing addresse when unselect mil
//DWORD RecordMilAddr;
DWORD _00529A2D = 0x0529A2D;
DWORD _00529BD6 = 0x0529BD6;
DWORD _00529A25 = 0x0529A25;
//00529A1F  |. 8B83 30120000  MOV EAX,DWORD PTR DS:[EBX+0x1230]

void __declspec(naked)  GetMissingAdresseWhenunSelectMilAddres()
{
	__asm {


		Cmp initialized, 1h
		JE Restore
		MOV EAX, DWORD PTR DS : [EBX + 01230h]
		MOV RecordMilAddr, EAX
		MOV initialized, 1h
		//Mov RessedFarms, 0h
		JMP _00529A25
		Restore :
		MOV EAX, RecordMilAddr
			//TEST EAX, EAX
			//JE _00529BD6
			JMP _00529A25
	}
}


DWORD _00527C7B = 0x0527C7B;
DWORD fishEBX;
char descriptionFishTrape[] = "Auto Fish Trape";
char descriptionReseedFishTrape[] = "Reseed Fish Trape";
DWORD _00527C74 = 0x0527C74;
DWORD _00527B4A = 0x0527B4A;
DWORD _00527B54 = 0x0527B54;
void __declspec(naked)  CreatFishTrapButtons()
{
	__asm {
		CMP WORD PTR DS : [ECX + 010h] , 02Dh//dock
		JE AutoFishButton

		CMP WORD PTR DS : [ECX + 010h] , 044h//mil
		JNZ __00527C74
		JMP _00527B4A //00527B4A  |. 8078 48 02     CMP BYTE PTR DS:[EAX+0x48],0x2
		CMP BYTE PTR DS : [EAX + 0x48] , 0x2
		JNZ __00527C74
		jmp _00527B54


		AutoFishButton :
		CMP FlagideButton, 0h
			JNZ __00527C74
			mov fishEBX, EBP
			/*
		//auto ressed button dock
		PUSH EBP
		PUSH  offset descriptionReseedFishTrape//EAX
		PUSH EBP
		PUSH EBP
		PUSH - 01h
		PUSH EBP
		PUSH 0h//01352h
		PUSH 032h
		PUSH 0BBh// jump default switch case
		//52 53   =
		PUSH 03Ah//logoposition in slp

		PUSH 6h//0Bh//button position
		MOV ECX, ESI
		CALL _005298F0
		PUSH  EAX
		MOV ECX, ESI
		CALL _00520620*/


		//unHIDE when fixe
		//auto fish trape button dock
			PUSH EBP
			PUSH  offset descriptionFishTrape//EAX
			PUSH EBP
			PUSH EBP
			PUSH - 01h
			PUSH EBP
			PUSH 0h//01352h
			PUSH 032h
			PUSH 0BCh// jump default switch case
			cmp FlagAutoShipTrap, 1h
			JE logoActived
			//52 53   =  
			PUSH 039h//logoposition in slp
			Jmp next

			logoActived :
		PUSH 038h//logoposition in slp
			Jmp next

			next :
		PUSH 0Ah//0Ch//button position
			MOV ECX, ESI
			CALL _005298F0
			PUSH  EAX
			MOV ECX, ESI
			CALL _00520620


			__00527C74 :
		JMP _00527C74

			//restore EBP
			//mov fishEBX, EBP
			//PUSH EBX
			//LEA EBX, DWORD PTR DS : [ESI + 0124Ah]
			//00527C7B  |. 6A 00          PUSH 0x0

		__00527B54:
		//jmp _00527C7B 
		jmp _00527B54 //00527C74  |> 53             PUSH EBX




	}
}
//00529AFE     6A 32          PUSH 0x32   32 = 50 = farms 

DWORD _00451EF0 = 0x0451EF0;
DWORD _00450DFF = 0x0450DFF;
DWORD _00450E2B = 0x0450E2B;

//0x0450DF8
void __declspec(naked)  ChangeToFishTrape()
{
	__asm {

		//0000A48B  logo
		MOV EAX, DWORD PTR SS : [EBP + 08h]
		CMP WORD PTR DS : [EAX + 014h] , 0362h  //866 new fish trap created unit
		JNZ Normal
		MOV ECX, DWORD PTR SS : [ESP + 020h]
		MOV EDX, DWORD PTR SS : [ESP + 024h]
		PUSH - 01h
		PUSH ECX
		MOV EAX, DWORD PTR SS : [ESP + 050h]
		PUSH 01h
		PUSH - 04h  //farm event?
		PUSH 00h
		PUSH 86h//last logo 
		PUSH EDX
		PUSH 028h//size button
		PUSH 028h//size button
		PUSH EBX
		PUSH EDI
		PUSH EAX
		MOV ECX, ESI
		CALL _00451EF0
		JMP _00450E2B

		Normal :
		MOV EAX, DWORD PTR SS : [EBP + 08h]
			MOV EDX, DWORD PTR SS : [ESP + 020h]
			JMP _00450DFF

			//MOVSX EAX, WORD PTR DS : [EAX + 054h] ; ;logo indice
			////logo building
			//MOV ECX, DWORD PTR SS : [ESP + 0x20]

			////logo unit
			//MOV ECX, DWORD PTR SS : [ESP + 0x38]

	}
}
//00568336  |. 894E 04        MOV DWORD PTR DS:[ESI+0x4],ECX

DWORD _00527A60 = 0x0527A60;
//004673B0  |. 0F87 71040000  JA age2_x1.00467827


void __declspec(naked)  KillFishTrap()
{
	__asm {

		CMP EAX, 0Fh
		JA Default

		MOV EDX, 2Bh //DOCK
		MOV ECX, ESI;  Case 31 of switch 0051E609
		CALL _00527A60
		MOV ECX, DWORD PTR SS : [ESP + 04h]
		MOV DWORD PTR FS : [0h] , ECX
		POP ESI
		ADD ESP, 0Ch
		RETN 0Ch

		Default :
		MOV ECX, DWORD PTR SS : [ESP + 0x514] ;  Default case of switch 004677AF
			POP EDI
			POP ESI
			POP EBP
			POP EBX
			MOV DWORD PTR FS : [0] , ECX
			ADD ESP, 0x510
			RETN 0x4


	}
}
DWORD _00450A75 = 0x0450A75;
DWORD _00450A55 = 0x0450A55;
//0x0450A4E
void __declspec(naked)  garnisonLikeMil()
{
	__asm {

		CMP WORD PTR DS : [ECX + 010h] , 044h //mill
		JNZ short checkDock
		MOV FalgisDock, 0h
		JE short __00450A55

		checkDock :
		CMP WORD PTR DS : [ECX + 010h] , 02Dh//dock
			JNZ short __00450A75
			MOV FalgisDock, 01h
			CMP EBX, 0h
			JNZ __00450A75
			MOV EBX, 01h //force to show reseed fish trap
			JMP _00450A75  //JMP _00450A55
			__00450A75 :
		JMP _00450A75
			__00450A55 :
		JMP _00450A55

	}
}

//00450F49     8B4C24 34      MOV ECX,DWORD PTR SS:[ESP+0x34]

DWORD FishTrapCount = 0x0;

//00450F1A     8B4424 14      MOV EAX,DWORD PTR SS:[ESP+0x14]
DWORD _00450F20 = 0x0450F20;
DWORD CurrentCount = 0x0;
DWORD CurrentbuttonID;//max garnison doxk 10 = A
DWORD _____2_006139E4 = 0x006139E4;
DWORD _00450F60 = 0x0450F60;
DWORD _005A2780 = 0x05A2780;
DWORD _005A2FC0 = 0x05A2FC0;
//DWORD _067022C = 0x67022C;
//DWORD val1 = 0x2442;  //41.000000
//DWORD val2 = 0xF442;  //122.000000

void __declspec(naked)  LoopMilOrShipTrapReseedQueue()
{
	__asm {

		//MOV ECX, DWORD PTR DS : [ESI + 020h]
		//LEA EAX, DWORD PTR DS : [ESI + 024h]
		//PUSH EAX
		//CALL _005A2FC0
		//MOV ECX, DWORD PTR DS : [ESI + 020h]
		//PUSH 067022Ch;  ASCII "tpnl_obj::draw_garrison"
		//CALL _005A2780

		//FishTrapCount
		cmp FalgisDock, 1h
		JNZ normal
		cmp FishTrapCount, 0h
		JE normal //no print button when 0 in queue
		MOV EAX, FishTrapCount
		DEC EAX
		MOV DWORD PTR SS : [ESP + 014h] , EAX
		MOV EAX, DWORD PTR SS : [ESP + 034h]//current count unit garnison
		MOV CurrentbuttonID, EAX
		printbuton :
		//panel placement?
		FILD DWORD PTR SS : [ESP + 014h]
			FMUL DWORD PTR SS : [ESP + 02Ch]
			FADD DWORD PTR DS : [063766Ch]
			CALL _____2_006139E4
			MOV EDI, EAX
			MOV EAX, DWORD PTR SS : [ESP + 018h]


			//MOV EAX, DWORD PTR SS : [EBP + 08h]
			//CMP WORD PTR DS : [EAX + 014h] , 0362h  //866 new fish trap created unit
			//JNZ Normal
			MOV ECX, DWORD PTR SS : [ESP + 020h]
			MOV EDX, DWORD PTR SS : [ESP + 024h]
			PUSH - 01h
			PUSH ECX
			MOV EAX, DWORD PTR SS : [ESP + 050h]
			PUSH 01h
			PUSH - 04h  //farm event?
			PUSH 00h
			PUSH 173h//86h//last logo 
			PUSH EDX
			PUSH 026h//026h//size button
			PUSH 028h//028h//size button
			PUSH 70h//70h // EBX
			ADD EDI, 100h
			PUSH EDI
			PUSH CurrentbuttonID//0h//EAX
			MOV ECX, ESI
			CALL _00451EF0
			//JMP _00450E2B

			//MOV EAX, DWORD PTR SS : [ESP + 014h]
			//MOV EAX, DWORD PTR SS : [ESP + 014h]
			//TEST EAX, EAX
			//JNZ short _00450F30
			//MOV EDX, DWORD PTR SS : [ESP + 030h]
			//SUB EBX, 02Ah
			//DEC EDX
			//MOV DWORD PTR SS : [ESP + 014h] , EDX
			//JMP short _00450F34
			//_00450F30:
			DEC DWORD PTR SS : [ESP + 014h]//print buttons
			//_00450F34:

			MOV EAX, CurrentCount
			CMP EAX, FishTrapCount
			JG short normal
			INC EAX
			MOV CurrentCount, EAX
			INC CurrentbuttonID
			CMP EAX, FishTrapCount
			JL short printbuton

			normal :
		MOV CurrentCount, 0h

			MOV ECX, DWORD PTR DS : [ESI + 020h]
			LEA EAX, DWORD PTR DS : [ESI + 024h]

			JMP	_00450F60



	}
}




//00467809  |. E8 E26CFFFF    CALL age2_x1.0045E4F0

//0045E4F0
DWORD _00457E40 = 0x0457E40;
char FullFishTrapQueue[260] = "FULL fishTrap Queue";

void __declspec(naked)  pushFishTrapGarnison()
{
	__asm {
		PUSH ECX
		PUSH ESI
		PUSH EDI
		MOV EDI, DWORD PTR SS : [ESP + 010h]
		MOV ESI, ECX
		CMP EDI, 01h
		JMP short _0045E506
		POP EDI
		XOR EAX, EAX
		POP ESI
		POP ECX
		RETN 04h
		_0045E506 :
		//CMP DWORD PTR DS : [ESI + 01EACh] , 028h//if full queue then donothing
		CMP WORD PTR DS : [ESI + 01EAEh] , 0h//try to creat new queque hope this addresse is not use
		//JL short _0045E517
			JMP _0045E58D
			//push 0h
			//push offset FullFishTrapQueue
			//CALL _0051CD30

			POP EDI
			XOR EAX, EAX
			POP ESI
			POP ECX
			RETN 04h
			_0045E517 :
		FILD DWORD PTR SS : [ESP + 010h]
			PUSH 00h
			PUSH 00h
			PUSH 01h
			PUSH ECX
			LEA EAX, DWORD PTR SS : [ESP + 01Ah]
			MOV ECX, ESI
			FSTP DWORD PTR SS : [ESP]
			PUSH EAX
			PUSH 0C7h
			CALL _00457CB0
			TEST AL, AL
			JNZ short _0045E56E
			CMP EDI, 01h
			JLE short _0045E566
			_0045E53C :
		DEC EDI
			PUSH 00h
			MOV DWORD PTR SS : [ESP + 014h] , EDI
			PUSH 00h
			FILD DWORD PTR SS : [ESP + 018h]
			PUSH 01h
			PUSH ECX
			LEA ECX, DWORD PTR SS : [ESP + 01Ah]
			FSTP DWORD PTR SS : [ESP]
			PUSH ECX
			PUSH 0C7h
			MOV ECX, ESI
			CALL _00457CB0
			CMP AL, 01h
			JE short _0045E56E
			CMP EDI, 01
			JG short _0045E53C
			_0045E566 :
		POP EDI
			XOR EAX, EAX
			POP ESI
			POP ECX
			RETN 04h
			_0045E56E :
		FILD DWORD PTR SS : [ESP + 010h]
			PUSH 01h
			PUSH ECX
			MOV ECX, ESI
			FSTP DWORD PTR SS : [ESP]
			PUSH 0C7h
			CALL _00457E40
			TEST AL, AL
			JNZ short _0045E58D
			POP EDI
			XOR EAX, EAX
			POP ESI
			POP ECX
			RETN 04h
			_0045E58D :
		//MOV EAX, DWORD PTR DS : [ESI + 01EACh]
		MOV EAX, 0h
			MOV AX, WORD PTR DS : [ESI + 01EAEh]
			MOV EAX, FlagAutoShipTrap
			POP EDI
			//MOV DWORD PTR DS : [ESI + 01EACh] , EAX
			MOV WORD PTR DS : [ESI + 01EAEh] , AX
			//MOV FishTrapCount, EAX
			MOV EAX, 01h
			POP ESI
			POP ECX
			RETN 04h



	}
}
//even button 
//00467809  |. E8 E26CFFFF    CALL age2_x1.0045E4F0

DWORD _0045E4F0 = 0x045E4F0;
DWORD _pushFishTrapGarnison = (DWORD)pushFishTrapGarnison;
DWORD _0046780E = 0x046780E;
void __declspec(naked)  pushFarmsGarnison()
{
	__asm {
		cmp FalgisDock, 0h
		JNZ DOCK

		MOVSX EAX, WORD PTR DS : [ESI + 04h] ;  Case D of switch 004673AD
		MOV EDX, DWORD PTR DS : [EDI + 04h]
		PUSH EAX
		MOVSX ECX, WORD PTR DS : [ESI + 02h]
		MOV EAX, DWORD PTR DS : [EDX + 04Ch]
		MOV ECX, DWORD PTR DS : [EAX + ECX * 4h]
		CALL _0045E4F0
		JMP _0046780E

		DOCK :
		MOVSX EAX, WORD PTR DS : [ESI + 04h] ;  Case D of switch 004673AD
			MOV EDX, DWORD PTR DS : [EDI + 04h]
			PUSH EAX
			MOVSX ECX, WORD PTR DS : [ESI + 02h]
			MOV EAX, DWORD PTR DS : [EDX + 04Ch]
			MOV ECX, DWORD PTR DS : [EAX + ECX * 4h]
			CALL _pushFishTrapGarnison // _0045E4F0
			JMP _0046780E

	}
}
//0051F3ED  |> 8B4424 1C      MOV EAX,DWORD PTR SS:[ESP+0x1C]                   ;  Case AD of switch 0051E609

DWORD _0051F3F3 = 0x051F3F3;
void __declspec(naked)  setdockqueuedisable()
{
	__asm {
		mov FalgisDock, 0h
		MOV EAX, DWORD PTR SS : [ESP + 01Ch] ;  Case AD of switch 0051E609
		PUSH 01h
		JMP _0051F3F3
	}
}
DWORD _0044DBE0 = 0x044DBE0;
//force to show ressed fish trap when 0 garnison
void __declspec(naked)  ShowReseedShipTrap()
{
	__asm {
		MOV AL, BYTE PTR SS : [ESP + 01Ch]
		MOV EDI, 01h
		MOV DWORD PTR SS : [ESP + 038h] , EDI
		TEST AL, AL

		JMP _0044DBE0
	}
}
//unqueue fishtrape
DWORD _0045E5B0 = 0x045E5B0;
DWORD _SublistunqueueFishTrape;
void __declspec(naked)  unqueueFishTrape()
{
	__asm {
		cmp FalgisDock, 0h
		JNZ DOCK

		MOVSX ECX, WORD PTR DS : [ESI + 04h] ;  Case E of switch 004673AD
		MOV EAX, DWORD PTR DS : [EDI + 04h]
		PUSH ECX
		MOVSX EDX, WORD PTR DS : [ESI + 02h]
		MOV ECX, DWORD PTR DS : [EAX + 04Ch]
		MOV ECX, DWORD PTR DS : [ECX + EDX * 4h]
		CALL _0045E5B0
		JMP default
		DOCK :
		MOVSX ECX, WORD PTR DS : [ESI + 04h] ;  Case E of switch 004673AD
		MOV EAX, DWORD PTR DS : [EDI + 04h]
		PUSH ECX
		MOVSX EDX, WORD PTR DS : [ESI + 02h]
		MOV ECX, DWORD PTR DS : [EAX + 04Ch]
		MOV ECX, DWORD PTR DS : [ECX + EDX * 4h]
		CALL _SublistunqueueFishTrape

		default:
			MOV ECX, DWORD PTR SS : [ESP + 0514h] ;  Default case of switch 004677AF
				POP EDI
				POP ESI
				POP EBP
				POP EBX
				MOV DWORD PTR FS : [0h] , ECX
				ADD ESP, 0510h
				RETN 04h


	}
}
DWORD _00457EC0 = 0x0457EC0;
void __declspec(naked)  SublistunqueueFishTrape()
{
	__asm {

		//MOV EAX, DWORD PTR DS : [ECX + 01EACh]
		MOV EAX, DWORD PTR DS : [ECX + 01EBCh]//fish trap value list
		MOV EDX, DWORD PTR SS : [ESP + 04h]
		CMP EDX, EAX
		JLE short _0045E5C0
		MOV EDX, EAX
		_0045E5C0 :
		CMP EDX, 01
			JGE short _0045E5CA
			XOR EAX, EAX
			RETN 04h
			_0045E5CA :
		SUB EAX, EDX
			PUSH EDX
			PUSH 0C7h
			//MOV DWORD PTR DS : [ECX + 01EACh] , EAX
			MOV DWORD PTR DS : [ECX + 01EBCh] , EAX
			MOV FishTrapCount, EAX
			CALL _00457EC0
			MOV EAX, 01h
			RETN 04h
	}
}
//00440134   . 8B1490         MOV EDX,DWORD PTR DS:[EAX+EDX*4]
//DWORD currentPlayerToRessedFishTrap = 0x0;
DWORD _0044013E = 0x044013E;
void __declspec(naked)  currentPlayerToRessedFishTrapAuto()
{
	__asm {
		MOV EDX, DWORD PTR DS : [EAX + EDX * 4]
		CMP BYTE PTR DS : [EDX + 0xA2] , 0x2
		MOV currentPlayerToRessedFishTrap, EDX
		JMP _0044013E
	}
}
//rebuild farms
////00457170  /$ 51             PUSH ECX

//0x0440157

//current player to ressed
//00440134   . 8B1490         MOV EDX,DWORD PTR DS:[EAX+EDX*4]
//00440149   . A1 C0517A00    MOV EAX,DWORD PTR DS:[0x7A51C0]


DWORD _0044014F = 0x044014F;

void __declspec(naked)  BuildFishTrape()
{
	__asm {


		MOV EAX, DWORD PTR DS : [07A51C0h]

		//save register
		MOV DeadFishTrapEAX, EAX
		MOV DeadFishTrapECX, ECX
		MOV DeadFishTrapEDX, EDX
		MOV DeadFishTrapEBX, EBX
		MOV DeadFishTrapESP, ESP
		MOV DeadFishTrapEBP, EBP
		MOV DeadFishTrapESI, ESI
		MOV DeadFishTrapEDI, EDI

		MOV AX, WORD PTR DS : [ECX + 010h]
		MOV CurrentUnit, EAX

		CMP AX, 116h//0C7h //if dead fish trap
		JNZ normale
		//build fish trap click right function
		//MOV EDI, DWORD PTR SS : [EBP + 0Ch]

		MOV EDX, DWORD PTR DS : [EDI + 03Ch] //x
		MOV __x, EDX
		MOV EAX, DWORD PTR DS : [EDI + 038h]//y
		MOV __y, EAX

		MOV EBX, 0C7h
		//RETN 0Ch



		//MOV EDX, DWORD PTR DS : [EDI + 03Ch] //x
		MOV EDX, __x
		//MOV EAX, DWORD PTR DS : [EDI + 038h]//y
		MOV EAX, DWORD PTR DS : [07912A0h]
		MOV AX, WORD PTR DS : [EAX + 042Eh]
		//PUSH EAX
		//PUSH EDX
		MOV  EAX, __y
		//PUSH EAX
		//PUSH 0C7h//EBX  //unit id fish trape : 0C7
		MOV EBX, 0C7h
		MOV EDI, currentPlayerToRessedFishTrap //player?
		MOV ECX, currentPlayerToRessedFishTrap //player?
		//CALL _00457170
		//no call only collect informations
		//Call _Sub_00457170_bis




	normale:
		//restaure register
		MOV EAX, DeadFishTrapEAX
			MOV ECX, DeadFishTrapECX
			MOV EDX, DeadFishTrapEDX
			MOV EBX, DeadFishTrapEBX
			MOV ESP, DeadFishTrapESP
			MOV EBP, DeadFishTrapEBP
			MOV ESI, DeadFishTrapESI
			MOV EDI, DeadFishTrapEDI


			//	MOV AX, WORD PTR DS : [ECX + 010h]
			//	CMP AX, 0165h
			//	JNZ SHORT __0044016A
			//	JMP _00440161


			//	__0044016A :
			//JMP _0044016A

			JMP _0044014F




	}
}
//004150E3   . 8B8F 0C010000  MOV ECX,DWORD PTR DS:[EDI+0x10C]
DWORD record_EDIFromClick = 0x0;
DWORD _004150E9 = 0x04150E9;
void __declspec(naked)  GetEDIFromClick()
{
	__asm {
		MOV ECX, DWORD PTR DS : [EDI + 010Ch]
		MOV record_EDIFromClick, EDI
		JMP _004150E9
	}
}
//00440109   . 8B4F 08        MOV ECX,DWORD PTR DS:[EDI+0x8]
DWORD record_ESI = 0x0;
DWORD _00440110 = 0x0440110;
void __declspec(naked)  GetEsiFishtrapBuildFound()
{
	__asm {
		MOV ECX, DWORD PTR DS : [EDI + 08h]
		MOV AX, WORD PTR DS : [ECX + 016h]
		MOV record_ESI, ECX
		JMP _00440110
	}
}
DWORD _00469680 = 0x0469680;
void __declspec(naked)  Test()
{
	__asm {
		PUSH ECX
		PUSH ESI
		PUSH EDI
		MOV EDI, DWORD PTR SS : [ESP + 010h]
		MOV ESI, ECX
		MOVSX ECX, DI
		MOV EAX, DWORD PTR DS : [ESI + 074h]
		MOV EAX, DWORD PTR DS : [EAX + ECX * 4h]
		TEST EAX, EAX
		//JE age2_x1.0045728A
		MOV DL, BYTE PTR DS : [EAX + 0x5A]
		TEST DL, DL
		//JNZ SHORT age2_x1.0045719C
		/*CMP DI, 0x26D
		JNZ age2_x1.0045728A*/
		CMP ECX, 0C7h

		MOV EAX, DWORD PTR SS : [ESP + 01Ch]
		MOV ECX, DWORD PTR SS : [ESP + 018h]
		MOV EDX, DWORD PTR SS : [ESP + 014h]
		PUSH EAX
		MOV EAX, DWORD PTR SS : [ESP + 0Ch]
		PUSH ECX
		MOV ECX, DWORD PTR SS : [ESP + 018h]
		PUSH EDX
		MOV EDX, DWORD PTR DS : [ESI + 08Ch]
		PUSH EDI
		MOV EAX, 06B71A0h
		PUSH EAX
		MOV ECX, ESI
		PUSH ECX
		MOV ECX, DWORD PTR DS : [EDX + 068h]
		CALL _00469680

		POP EDI
		MOV AL, 01h
		POP ESI
		POP ECX
		RETN 010h


	}
}
DWORD _004570C0 = 0x04570C0;
DWORD _JMP;

void __declspec(naked)  MouseClickRigthEvent()
{
	__asm {
		MOV EAX, DWORD PTR SS : [EBP + 01A8h]
		MOV EBP, EDI
		MOV EAX, __x
		PUSH EAX
		MOV EAX, DWORD PTR SS : [EBP + 038h]
		MOV EDI, record_EDIFromClick
		MOV EAX, __y
		MOV EDX, DWORD PTR DS : [ECX]//00637A44h
		ADD esp, 20h
		PUSH EAX
		PUSH EBP
		CALL _004570C0 //DWORD PTR DS : [EDX + 0xC4] ;  age2_x1.004570C0
		JMp _JMP
	}
}
DWORD _MouseClickRigthEvent = (DWORD)MouseClickRigthEvent;
//00464580   . 6A FF          PUSH -0x1


//rebuild auto fish trap
//0x044023F
DWORD _0051FD90 = 0x051FD90;

//DWORD _00457CB0 = 0x0457CB0;
//DWORD _005C8F70 = 0x05C8F70;
DWORD _0043CCB0 = 0x043CCB0;
//DWORD _Test = (DWORD)Test;
DWORD __00464580 = 0x0464580;

//select unit
//00562623 | .FF90 A0000000  CALL DWORD PTR DS : [EAX + 0xA0] ;  age2_x1.0042EAA0
//00562629 | .EB 06          JMP SHORT age2_x1.00562631
//0056262B | > FF90 B4000000  CALL DWORD PTR DS : [EAX + 0xB4]
//
DWORD CountMil = 0x0;

void __declspec(naked)  BuildFishTrapeAfterDelete()
{
	__asm {
		CALL _0051FD90

		MOV EAX, CurrentUnit
		CMP AX, 44h//new mil reset mill address dark
		//JE resetmilAdresse
		//MOV EAX, CurrentUnit
		//CMP AX, 81h//new mil reset mill address feo
		//JE resetmilAdresse
		//CMP AX, 82h//new mil reset mill address castle
		//JE resetmilAdresse
		//CMP AX, 83h//new mil reset mill address imerial
		JE resetmilAdresse



		//if button auto fish trape is off then go to normal
		CMP FlagAutoShipTrap, 0h
		JE Noramle
		//save register
		MOV DeadFishTrapEAX, EAX
		MOV DeadFishTrapECX, ECX
		MOV DeadFishTrapEDX, EDX
		MOV DeadFishTrapEBX, EBX
		MOV DeadFishTrapESP, ESP
		MOV DeadFishTrapEBP, EBP
		MOV DeadFishTrapESI, ESI
		MOV DeadFishTrapEDI, EDI



		MOV EAX, CurrentUnit
		CMP AX, 116h//0C7h //if dead fish trap
		JNZ normale


		////get current player
		//MOV ECX, DWORD PTR DS : [07912A0h]
		//call _005E7560

		//build fish trap click right function
		//MOV EDI, DWORD PTR SS : [EBP + 0Ch]

		//MOV EDX, DWORD PTR DS : [EDI + 03Ch] //x
		MOV EDX, __x
		//MOV EAX, DWORD PTR DS : [EDI + 038h]//y
		MOV EAX, DWORD PTR DS : [07912A0h]
		//MOV ECX, DWORD PTR DS : [07912A0h]
		//call _005E7560
		//MOV currentPlayerToRessedFishTrap,EAX
		MOV AX, WORD PTR DS : [EAX + 042Eh]
		PUSH EAX
		PUSH EDX
		MOV  EAX, __y
		PUSH EAX
		PUSH 0C7h//EBX  //unit id fish trape : 0C7
		MOV EBX, 0C7h
		MOV EDI, currentPlayerToRessedFishTrap //player?
		MOV ECX, currentPlayerToRessedFishTrap //player?
		//CALL _00457170
		Call _Sub_00457170_bis //work



		////MOV EDX, DWORD PTR DS : [EDI + 03Ch] //x
		//MOV EDX, __x
		////MOV EAX, DWORD PTR DS : [EDI + 038h]//y
		//MOV EAX, DWORD PTR DS : [07912A0h]
		////MOV ECX, DWORD PTR DS : [07912A0h]
		////call _005E7560
		////MOV currentPlayerToRessedFishTrap,EAX
		//MOV AX, WORD PTR DS : [EAX + 042Eh]
		//PUSH EAX
		//PUSH EDX
		//MOV  EAX, __y
		//PUSH EAX
		//PUSH 0C7h//EBX  //unit id fish trape : 0C7
		//MOV EBX, 0C7h
		//MOV EDI, currentPlayerToRessedFishTrap //player?
		//MOV ECX, currentPlayerToRessedFishTrap //player?
		//CALL _00457170


		//MOV EDX, __y
		//MOV ECX, __x
		//MOV EAX, DWORD PTR DS : [07912A0h]
		//MOV AX, WORD PTR DS : [EAX + 042Eh]
		//PUSH EAX
		//PUSH ECX
		////MOV ECX, DWORD PTR DS : [EDI + 010Ch]
		//MOV ECX, currentPlayerToRessedFishTrap
		//PUSH EDX
		//MOV EBX, 0C7h
		//PUSH EBX
		//CALL _00457170

		/*MOVECX,1h
		PUSH ECX
		MOV ECX, DWORD PTR SS : [ESP + 014h]
		PUSH EDI
		PUSH EAX
		MOV EBP, 006B71A0h
		MOV ESI, 0C7h
		MOV EDI, 01Ch//creat?
		CALL age2_x1.005C8F70*/




		//004C7CD6 > C686 39020000 0 > MOV BYTE PTR DS : [ESI + 0x239] , 0x1
		//004C7CDD > 8B5424 28       MOV EDX, DWORD PTR SS : [ESP + 0x28]
		//004C7CE1   . 8B4424 24       MOV EAX, DWORD PTR SS : [ESP + 0x24]
		//004C7CE5   . 8B4C24 20       MOV ECX, DWORD PTR SS : [ESP + 0x20]
		//004C7CE9   . 52              PUSH EDX
		//004C7CEA   . 8B5424 20       MOV EDX, DWORD PTR SS : [ESP + 0x20]
		//004C7CEE   . 50              PUSH EAX
		//004C7CEF   . 51              PUSH ECX
		//004C7CF0   . 52              PUSH EDX
		//004C7CF1   . 55              PUSH EBP
		//004C7CF2   . 8BCE            MOV ECX, ESI
		//004C7CF4.E8 378FFFFF     CALL age2_x1.004C0C30


		/*

		MOV ECX, DWORD PTR DS : [07912A0h]
		PUSH 00h
		PUSH 00h
		MOV EDX, DWORD PTR DS : [ECX]
		CALL _0043CCB0 // DWORD PTR DS : [EDX + 010h]
		MOV EAX, DWORD PTR DS : [07912A0h]
		//MOV ECX, DWORD PTR SS : [ESP + 010h]
		//MOV EDX, DWORD PTR SS : [ESP + 0Ch]
		MOV AX, WORD PTR DS : [EAX + 042Eh]
		MOV ECX, __x
		MOV EDX, __y
		MOV ESI , record_ESI
		PUSH EAX
		PUSH ECX
		//MOV ECX, DWORD PTR DS : [EDI + 010Ch]
		MOV ECX, currentPlayerToRessedFishTrap
		PUSH EDX
		PUSH EBX
		//CALL _00457170
		call _Test*/


		/*	POP EDI
			POP ESI
			POP EBX
			RETN 014h*/
		normale:
		//restaure register
		MOV EAX, DeadFishTrapEAX
			MOV ECX, DeadFishTrapECX
			MOV EDX, DeadFishTrapEDX
			MOV EBX, DeadFishTrapEBX
			MOV ESP, DeadFishTrapESP
			MOV EBP, DeadFishTrapEBP
			MOV ESI, DeadFishTrapESI
			MOV EDI, DeadFishTrapEDI

			Noramle :
		POP EDI
			POP ESI
			POP EBX
			MOV ESP, EBP
			POP EBP
			RETN 014h

			resetmilAdresse :
		INC CountMil





			////MOV RecordMilAddr, 0h
			//MOV initialized, 0h
			////MOV FlagAutoFarm, 0h
			////MOV FlagAutoShipTrap, 0h
			MOV EAX, DeadFishTrapEAX
			POP EDI
			POP ESI
			POP EBX
			MOV ESP, EBP
			POP EBP
			RETN 014h

	}
}
#pragma region Rest variable when game is close or finish
DWORD _2_00560510 = 0x0560510;
DWORD _0051E308 = 0x0051E308;
//DWORD CleanWIndowsOverlay = 0x0;
void __declspec(naked)  ResetAddresseAndFlag_QuitGameDialog()
{
	__asm {
		CALL _2_00560510
		//reset all game is finished
		MOV RecordMilAddr, 0h
		MOV initialized, 0h
		MOV FlagAutoFarm, 0h
		MOV FlagAutoShipTrap, 0h
		//Mov CleanWIndowsOverlay ,1h
		JMP _0051E308
	}
}
//0051E27A   . E8 91220400    CALL age2_x1.00560510
//DWORD _00560510 = 0x0560510;
DWORD _0051E27F = 0x051E27F;

void __declspec(naked)  ResetAddresseAndFlag_ResetGameDialog()
{
	__asm {
		CALL _2_00560510
		//reset all game is finished
		MOV RecordMilAddr, 0h
		MOV initialized, 0h
		MOV FlagAutoFarm, 0h
		MOV FlagAutoShipTrap, 0h
		//Mov CleanWIndowsOverlay, 1h
		JMP _0051E27F
	}
}
//0051E4F0   . E8 2B1E0400    CALL age2_x1.00560320

DWORD _0051E504 = 0x051E504;
void __declspec(naked)  ResetAddresseAndFlag_QuitAndLoadDialog()
{
	__asm {
		CALL _2_00560510
		//reset all game is finished
		MOV RecordMilAddr, 0h
		MOV initialized, 0h
		MOV FlagAutoFarm, 0h
		MOV FlagAutoShipTrap, 0h
		//Mov CleanWIndowsOverlay, 1h
		JMP _0051E504
	}
}
//0051E2B7   . E8 74ACF1FF    CALL age2_x1.00438F30
DWORD _00438F30 = 0x0438F30;
DWORD _0051E2BC = 0x051E2BC;
void __declspec(naked)  ResetAddresseAndFlag_ResigneDialog()
{
	__asm {
		CALL _00438F30
		//reset all game is finished
		MOV RecordMilAddr, 0h
		MOV initialized, 0h
		MOV FlagAutoFarm, 0h
		MOV FlagAutoShipTrap, 0h
		//Mov CleanWIndowsOverlay, 1h
		JMP _0051E2BC
	}

}

#pragma endregion  Rest variable when game is close or finish

DWORD _PushFarmMil = (DWORD)PushFarmMil;
//
//CPU Disasm
//Address   Hex dump              Command                                  Comments
//00529A2D   .  8B40 08           MOV EAX, DWORD PTR DS : [EAX + 8]
//00529A30   .  66:8378 10 44     CMP WORD PTR DS : [EAX + 10] , 44
DWORD _00529A27 = 0x0529A27;


//004115F1   . 8B5424 1C      MOV EDX, DWORD PTR SS : [ESP + 0x1C]
//004115F5   . 899E AC000000  MOV DWORD PTR DS : [ESI + 0xAC] , EBX
//004115FB   . 891D 70306800  MOV DWORD PTR DS : [0x683070] , EBX
//00411601   . 83C4 04        ADD ESP, 0x4
//00411604   . 89AE B4000000  MOV DWORD PTR DS : [ESI + 0xB4] , EBP
//0041160A > 8B4A 04        MOV ECX, DWORD PTR DS : [EDX + 0x4]
//0041160D   . 8B86 AC000000  MOV EAX, DWORD PTR DS : [ESI + 0xAC]
//00411613   . 8D0488         LEA EAX, DWORD PTR DS : [EAX + ECX * 4]
//00411616   . 8B08           MOV ECX, DWORD PTR DS : [EAX]
//00411618   . 8910           MOV DWORD PTR DS : [EAX] , EDX
//0041161A   . 8B96 B0000000  MOV EDX, DWORD PTR DS : [ESI + 0xB0]
//



//void __declspec(naked)  fixMilDeleteEmptyPtr()
//{
//	__asm {
//		//save register
//		MOV FixMill_EAX,EAX
//		MOV FixMill_ECX,ECX
//		MOV FixMill_EDX,EDX
//		//get current player structure
//		MOV ECX, DWORD PTR DS : [07912A0h]
//		CALL _005E7560
//		//get mill address
//		MOV EAX, DWORD PTR DS : [EAX + 01C0h]
//
//		//restaure register 
//		//MOV EAX, FixMill_EAX
//		MOV ECX, FixMill_ECX
//		MOV EDX, FixMill_EDX
//
//		//MOV EAX, DWORD PTR DS : [EBX + 01230h]
//		TEST EAX, EAX
//
//		JMP _00529A27
//	
//	}
//}
void __declspec(naked)  fixMilDeleteEmptyPtr()
{
	__asm {

		MOV EAX, DWORD PTR DS : [EBX + 01230h]
		MOV  EAX, RecordMilAddr
		TEST EAX, EAX

		JMP _00529A27

	}
}
//00411618   . 8910           MOV DWORD PTR DS : [EAX] , EDX

DWORD FixMill_EAX;
DWORD FixMill_ECX;
DWORD FixMill_EDX;
DWORD _00411620 = 0x0411620;
void __declspec(naked)  getEveryNewMillAdress()
{
	__asm {
		//save register
		MOV FixMill_EAX, EAX
		MOV FixMill_ECX, ECX
		MOV FixMill_EDX, EDX

		MOV EAX, DWORD PTR DS : [EDX + 8h]
		CMP WORD PTR DS : [EAX + 10h] , 44h //if mill
		JNZ Normale
		MOV RecordMilAddr, EDX

		Normale :
		//restaure register
		MOV EAX, FixMill_EAX
			MOV DWORD PTR DS : [EAX] , EDX
			MOV EDX, DWORD PTR DS : [ESI + 0B0h]

			JMP _00411620

	}
}
//00527B1B   . 8B86 30120000  MOV EAX,DWORD PTR DS:[ESI+0x1230]

DWORD _00527B21 = 0x0527B21;
void __declspec(naked) GetSelectedMilAdressPtr()
{
	__asm {
		//get current player structure
		MOV ECX, DWORD PTR DS : [07912A0h]
		CALL _005E7560
		MOV EDX, DWORD PTR DS : [EAX + 01C0h]

		MOV EAX, DWORD PTR DS : [ESI + 01230h]
		JMP _00527B21
	}
}
//
//00556B4F > 8B86 68020000  MOV EAX, DWORD PTR DS : [ESI + 0x268]
//00556B55   . 83F8 28        CMP EAX, 0x28
//
//00413E94 > 6A 00          PUSH 0x0



//creat count mill ???
//00432237 | . 6A 44 | PUSH 0x44
//00432239 | . 8D57 06 | LEA EDX, DWORD PTR DS : [EDI + 0x6]
//0043223C | . 51 | PUSH ECX
//0043223D | . 83C3 FA | ADD EBX, -0x6
//00432240 | . 52 | PUSH EDX
//00432241 | . 53 | PUSH EBX
//00432242 | . 83C7 FA | ADD EDI, -0x6


//mil addresse 
//0044DBA5 > 8B85 54080000  MOV EAX, DWORD PTR SS : [EBP + 0x854]
//0044DBAB   . 8B48 08        MOV ECX, DWORD PTR DS : [EAX + 0x8]
//0044DBAE   . 66 : 8379 10 44  CMP WORD PTR DS : [ECX + 0x10] , 0x44




//0051FD90 / $ 56             PUSH ESI
//0051FD91 | . 8BF1           MOV ESI, ECX
//0051FD93 | . 8B0D A0127900  MOV ECX, DWORD PTR DS : [0x7912A0]
//0051FD99 | . 57             PUSH EDI
//0051FD9A | .E8 C1770C00    CALL age2_x1.005E7560
//0051FD9F | . 8B8E 30120000  MOV ECX, DWORD PTR DS : [ESI + 0x1230]
//0051FDA5 | . 8BB8 C0010000  MOV EDI, DWORD PTR DS : [EAX + 0x1C0]
//0051FDAB | . 33D2           XOR EDX, EDX
//0051FDAD | . 3BCF           CMP ECX, EDI
//0051FDAF | . 8B0D A0127900  MOV ECX, DWORD PTR DS : [0x7912A0]
//0051FDB5 | . 0F95C2         SETNE DL
//0051FDB8 | . 8BFA           MOV EDI, EDX
//0051FDBA | .E8 A1770C00    CALL age2_x1.005E7560
//0051FDBF | . 8B80 C0010000  MOV EAX, DWORD PTR DS : [EAX + 0x1C0]
//0051FDC5 | . 8986 30120000  MOV DWORD PTR DS : [ESI + 0x1230] , EAX



//005293B0  /$ 56             PUSH ESI
//005293B1  |. 8BF1           MOV ESI,ECX
//005293B3  |. 8B0D A0127900  MOV ECX,DWORD PTR DS:[0x7912A0]
//005293B9  |. E8 A2E10B00    CALL age2_x1.005E7560
//005293BE  |. 8B80 C0010000  MOV EAX,DWORD PTR DS:[EAX+0x1C0]
//005293C4  |. 85C0           TEST EAX,EAX
//005293C6  |. 8986 30120000  MOV DWORD PTR DS:[ESI+0x1230],EAX


//queuefarms
void __declspec(naked) queuefarms()
{
	__asm {
		MOV ECX, DWORD PTR DS : [7912A0h]
		PUSH ESI
		CALL _005E7560
		MOV EDX, DWORD PTR DS : [EAX + 9Ch]
		MOV EAX, DWORD PTR DS : [EBX + 121Ch]
		PUSH EDX
		MOV ECX, DWORD PTR DS : [EAX + 68h]
		CALL _0046A6F0

	}
}
//0046A6F0 / $ 56             PUSH ESI
//DWORD _005C8F70 = 0x05C8F70;
//DWORD _006137C9 = 0x06137C9;

void __declspec(naked) sendFlagFishTrapEventOn()
{
	__asm {
		PUSH ESI
		PUSH 10h
		MOV ESI, ECX
		PUSH 1h
		CALL Aoc10C_006137C9//_006137C9
		ADD ESP, 8h
		TEST EAX, EAX
		JE short _0046A728
		MOV CX, WORD PTR SS : [ESP + 8h]
		MOV DX, WORD PTR SS : [ESP + 0Ch]
		PUSH 0h
		MOV WORD PTR DS : [EAX + 2h] , CX
		PUSH 10h
		PUSH EAX
		MOV ECX, ESI
		MOV WORD PTR DS : [EAX + 4h] , DX
		MOV BYTE PTR DS : [EAX] , 67h
		MOV BYTE PTR DS : [EAX + 1h] , 0Fh// event F on we creat online event to get the flag 
		CALL _005C8F70
		_0046A728 :
		POP ESI
			RETN 8h
	}
}
void __declspec(naked) sendFlagFishTrapEventOff()
{
	__asm {
		PUSH ESI
		PUSH 10h
		MOV ESI, ECX
		PUSH 1h
		CALL Aoc10C_006137C9//_006137C9
		ADD ESP, 8h
		TEST EAX, EAX
		JE short _0046A728
		MOV CX, WORD PTR SS : [ESP + 8h]
		MOV DX, WORD PTR SS : [ESP + 0Ch]
		PUSH 0h
		MOV WORD PTR DS : [EAX + 2h] , CX
		PUSH 10h
		PUSH EAX
		MOV ECX, ESI
		MOV WORD PTR DS : [EAX + 4h] , DX
		MOV BYTE PTR DS : [EAX] , 67h
		MOV BYTE PTR DS : [EAX + 1h] , 10h// event F on we creat online event to get the flag 
		CALL _005C8F70
		_0046A728 :
		POP ESI
			RETN 8h
	}
}

//00467810 > 0FBF4E 04      MOVSX ECX, WORD PTR DS : [ESI + 4] ;  Case E of switch 004673AD



//0x051E605
DWORD ___EBX = 0x0;
WORD flagAutoFish = 0x0;
DWORD _sendFlagFishTrapEventOn = (DWORD)sendFlagFishTrapEventOn;
DWORD _sendFlagFishTrapEventOff = (DWORD)sendFlagFishTrapEventOff;
void __declspec(naked)  AddAutoFarmEvent()
{
	__asm {

		MOV EAX, DWORD PTR SS : [ESP + 014h]
		Cmp EAX, 0BAh //if auto farm butoon is clicked
		JNZ checkAutoFish//continueProcess 
		mov FalgisDock, 0h//setflagressed dock diasable
		//save register
		MOV RE_EAX, EAX
		MOV RE_ECX, ECX
		MOV RE_EDX, EDX
		MOV RE_EBX, EBX
		MOV RE_ESP, ESP
		MOV RE_EBP, EBP
		MOV RE_ESI, ESI
		MOV RE_EDI, EDI
		//reall button to auto resseed famrs
		CMP RessedFarms, 0h
		JE Normale
		JMP LikeAD

		Normale :
		cmp FlagAutoFarm, 0
			JE setOn

			setOff :
		mov FlagAutoFarm, 0
			//refresh screen logo button auto farm
			MOV EAX, DWORD PTR SS : [7912A0h + 01820h]
			call __0527AF0
			push 0h
			push offset messageOFF
			CALL _0051CD30
			//restore register
			MOV EAX, RE_EAX
			MOV ECX, RE_ECX
			MOV EDX, RE_EDX
			MOV EBX, RE_EBX
			MOV ESP, RE_ESP
			MOV EBP, RE_EBP
			MOV ESI, RE_ESI
			MOV EDI, RE_EDI
			Jmp continueProcess//continueProcess

			setOn :
		mov FlagAutoFarm, 1h
			//refresh screen logo button auto farm
			MOV EAX, DWORD PTR SS : [7912A0h + 01820h]
			call __0527AF0
			push 0h
			push offset messageON
			CALL _0051CD30
			//restore register
			MOV EAX, RE_EAX
			MOV ECX, RE_ECX
			MOV EDX, RE_EDX
			MOV EBX, RE_EBX
			MOV ESP, RE_ESP
			MOV EBP, RE_EBP
			MOV ESI, RE_ESI
			MOV EDI, RE_EDI
			LikeAD :

		MOV ECX, DWORD PTR DS : [7912A0h]
			////get current player
			//MOV ECX, DWORD PTR DS : [07912A0h]
			//call __005E7560
			//MOV IndexCurrentPlayer, ECX



			//cmp EAX, ESI
			//JNZ normale

			////num_villagers
			////MOV EAX, num_villagers
			////MOV precNum_villagers, EAX
			//MOV ecx, ress_ECX
			//MOV EAX, dword ptr[ecx + 0A8h]

			//PUSH ESI
			PUSH 1h
			CALL _005E7560
			//MOV EAX,DWORD PTR SS:[ESP+24]
			MOV EDX, DWORD PTR DS : [EAX + 9Ch]
			MOV ___EBX, EBX
			MOV EAX, DWORD PTR DS : [EBX + 121Ch]
			PUSH EDX
			MOV ECX, DWORD PTR DS : [EAX + 68h]
			CALL _0046A6F0




			POP ESI
			ADD ESP, 0Ch
			RETN 0Ch



			//auto fish trap
		checkAutoFish:
		CMP EAX, 0BCh
			JNZ continueProcess//continueProcess
			mov FalgisDock, 1h
			//save register
			MOV RE_EAX, EAX
			MOV RE_ECX, ECX
			MOV RE_EDX, EDX
			MOV RE_EBX, EBX
			MOV RE_ESP, ESP
			MOV RE_EBP, EBP
			MOV RE_ESI, ESI
			MOV RE_EDI, EDI

			CMP FlagAutoShipTrap, 0h
			JE AutoFishOn
			MOV FlagAutoShipTrap, 0h
			//get current player
			MOV ECX, DWORD PTR DS : [07912A0h]


			PUSH 1h
			CALL _005E7560
			MOV EDX, DWORD PTR DS : [EAX + 9Ch]
			MOV ___EBX, EBX
			MOV EAX, DWORD PTR DS : [EBX + 121Ch]
			PUSH EDX
			MOV ECX, DWORD PTR DS : [EAX + 68h]
			//CALL _0046A6F0 0D for farms
			CALL _sendFlagFishTrapEventOff //F event

			//restore register
			MOV EAX, RE_EAX
			MOV ECX, RE_ECX
			MOV EDX, RE_EDX
			MOV EBX, RE_EBX
			MOV ESP, RE_ESP
			MOV EBP, RE_EBP
			MOV ESI, RE_ESI
			MOV EDI, RE_EDI
			//refresh screen logo button auto farm
			MOV EAX, DWORD PTR SS : [7912A0h + 01820h]
			call __0527AF0
			push 0h
			push offset AutoFishTrapOff
			CALL _0051CD30




			POP ESI
			ADD ESP, 0Ch
			RETN 0Ch

			//MOV EAX, DWORD PTR DS : [EAX + 0A8h]
			//ADD EAX, 048h //fish trap unused
			//MOV  dword ptr[EAX], 0h

		   /*
			//call how many farm for random player
			MOV EAX, DWORD PTR DS : [ESI + 08h]
			MOV ECX, DWORD PTR DS : [EAX + 0Ch]
			//recall howauto fish trap activated?
			MOV EAX, 0h
			MOV AX, WORD PTR DS : [ECX + 1EAEh]
			MOV EAX, flagAutoFish
			MOV   WORD PTR DS : [ECX + 1EAEh] , AX*/


			//restore register
			MOV EAX, RE_EAX
			MOV ECX, RE_ECX
			MOV EDX, RE_EDX
			MOV EBX, RE_EBX
			MOV ESP, RE_ESP
			MOV EBP, RE_EBP
			MOV ESI, RE_ESI
			MOV EDI, RE_EDI

			//AutoFishOff :

			//refresh screen logo button auto farm
			MOV EAX, DWORD PTR SS : [7912A0h + 01820h]
			call __0527AF0
			push 0h
			push offset AutoFishTrapOff
			CALL _0051CD30
			JMP continueProcess// continueProcess


			AutoFishOn :
		MOV FlagAutoShipTrap, 1h
			//get current player
			MOV ECX, DWORD PTR DS : [07912A0h]
			PUSH 1h
			call _005E7560
			MOV EDX, DWORD PTR DS : [EAX + 9Ch]
			MOV ___EBX, EBX
			MOV EAX, DWORD PTR DS : [EBX + 121Ch]
			PUSH EDX
			MOV ECX, DWORD PTR DS : [EAX + 68h]
			//CALL _0046A6F0
			CALL sendFlagFishTrapEventOn

			//restore register
			MOV EAX, RE_EAX
			MOV ECX, RE_ECX
			MOV EDX, RE_EDX
			MOV EBX, RE_EBX
			MOV ESP, RE_ESP
			MOV EBP, RE_EBP
			MOV ESI, RE_ESI
			MOV EDI, RE_EDI
			//refresh screen logo button auto farm
			MOV EAX, DWORD PTR SS : [7912A0h + 01820h]
			call __0527AF0
			push 0h
			push offset AutoFishTrapOn
			CALL _0051CD30

			POP ESI
			ADD ESP, 0Ch
			RETN 0Ch






			//restore register
			MOV EAX, RE_EAX
			MOV ECX, RE_ECX
			MOV EDX, RE_EDX
			MOV EBX, RE_EBX
			MOV ESP, RE_ESP
			MOV EBP, RE_EBP
			MOV ESI, RE_ESI
			MOV EDI, RE_EDI



			JMP continueProcess//continueProcess

			continueProcess :
		MOV EAX, DWORD PTR SS : [ESP + 014h]
			LEA ECX, DWORD PTR DS : [EAX - 01h]
			JMP _0051E60C
	}
}
//00467827   > 8B8C24 1405000>MOV ECX,DWORD PTR SS:[ESP+514]                            ;  Default case of switch 0046740C
DWORD _0046782E = 0x046782E;
void __declspec(naked)  EventAutReseedFishTrapOnline00467827()
{
	__asm
	{
		//fish trap on
		cmp EAX, 0Fh
		JNZ checkOff
		MOVSX EAX, WORD PTR DS : [ESI + 4h]
		MOV EDX, DWORD PTR DS : [EDI + 4h]
		MOVSX ECX, WORD PTR DS : [ESI + 2h]
		MOV EAX, DWORD PTR DS : [EDX + 4Ch]
		MOV ECX, DWORD PTR DS : [EAX + ECX * 4]
		MOV WORD PTR DS : [ECX + 1EAEh] , 1h
		JMP DefaultCase

		checkOff :
		//fish trap off
		cmp EAX, 10h
			JNZ DefaultCase
			MOVSX EAX, WORD PTR DS : [ESI + 4h]
			MOV EDX, DWORD PTR DS : [EDI + 4h]
			MOVSX ECX, WORD PTR DS : [ESI + 2h]
			MOV EAX, DWORD PTR DS : [EDX + 4Ch]
			MOV ECX, DWORD PTR DS : [EAX + ECX * 4]
			MOV WORD PTR DS : [ECX + 1EAEh] , 0h

			DefaultCase :
		MOV ECX, DWORD PTR SS : [ESP + 514] ;  Default case of switch 0046740C
			JMP _0046782E

	}
}


//0x0603D4B
DWORD _falgIsBadPointer = 0x0;
DWORD _falgIsBadPointer121C = 0x0;
DWORD _falgIsBadPointerplayer = 0x0;
DWORD EAXplayer = 0x0;
void __declspec(naked)  RebuildFarms2()
{
	_falgIsBadPointer = IsBadReadPtr((void*)___EBX, sizeof(UINT_PTR));
	_falgIsBadPointer121C = IsBadReadPtr((void*)(___EBX + 0x121C), sizeof(UINT_PTR));
	__asm {
		//call 
		cmp FlagAutoFarm, 1
		JNZ _NoAutoFarm
		cmp _falgIsBadPointer, 1
		JE _NoAutoFarm
		cmp _falgIsBadPointer121C, 1
		JE _NoAutoFarm
		//save register
		MOV SaveEAX, EAX
		MOV SaveECX, ECX
		MOV SaveEDX, EDX
		MOV SaveEBX, EBX
		MOV SaveESP, ESP
		MOV SaveEBP, EBP
		MOV SaveESI, ESI
		MOV SaveEDI, EDI

		//get current player
		MOV ECX, DWORD PTR DS : [07912A0h]
		call _005E7560
		MOV CurrentPlayer, EAX
		//restore register
		MOV EAX, SaveEAX
		MOV ECX, SaveECX
		MOV EDX, SaveEDX
		MOV EBX, SaveEBX
		MOV ESP, SaveESP
		MOV EBP, SaveEBP
		MOV ESI, SaveESI
		MOV EDI, SaveEDI
		//call how many farm for random player
		MOV EAX, DWORD PTR DS : [ESI + 08h]
		MOV ECX, DWORD PTR DS : [EAX + 0Ch]
		//recall how many farm
		CALL _0045E4E0
		//if not current player don't push button
		CMP CurrentPlayer, ECX
		JNZ _NoAutoFarm

		MOV ECX, DWORD PTR DS : [7912A0h]
		//PUSH ESI
		PUSH 1h
		CALL _005E7560
		mov EAXplayer, EAX
	}
	_falgIsBadPointerplayer = IsBadReadPtr((void*)EAXplayer, sizeof(UINT_PTR));
	__asm
	{
		cmp _falgIsBadPointerplayer, 1h
		JE _NoAutoFarm
		MOV EAX, EAXplayer
		MOV EDX, DWORD PTR DS : [EAX + 9Ch]
		MOV EBX, ___EBX
		MOV EAX, DWORD PTR DS : [EBX + 121Ch]
		PUSH EDX
		MOV ECX, DWORD PTR DS : [EAX + 68h]
		CALL _0046A6F0


		//restore register
		MOV EAX, SaveEAX
		MOV ECX, SaveECX
		MOV EDX, SaveEDX
		MOV EBX, SaveEBX
		MOV ESP, SaveESP
		MOV EBP, SaveEBP
		MOV ESI, SaveESI
		MOV EDI, SaveEDI
		_NoAutoFarm :


		//refresh 
		MOV EAX, DWORD PTR DS : [ESI + 08h]
			MOV ECX, DWORD PTR DS : [EAX + 0Ch]
			//recall how many farm
			CALL _0045E4E0
			Jmp _00603D50


	}
}
//
//#pragma region Rest variable when game is close or finish
//setHook((void*)0x051E303, ResetAddresseAndFlag_QuitGameDialog);
//setHook((void*)0x051E27A, ResetAddresseAndFlag_ResetGameDialog);
//setHook((void*)0x051E4FF, ResetAddresseAndFlag_QuitAndLoadDialog);
//setHook((void*)0x051E2B7, ResetAddresseAndFlag_ResigneDialog);
//#pragma endregion  Rest variable when game is close or finish
//
//
//#pragma region Add AutoFarms Button
////fix Mil DeleteEmptyPtr
////00529A1F  |. 8B83 30120000  MOV EAX,DWORD PTR DS:[EBX+0x1230]
//setHook((void*)0x0529A1F, fixMilDeleteEmptyPtr);
//
////00411618   . 8910            MOV DWORD PTR DS:[EAX],EDX
//setHook((void*)0x0411618, getEveryNewMillAdress);
//
//////00527B1B   . 8B86 30120000  MOV EAX,DWORD PTR DS:[ESI+0x1230]
////setHook((void*)0x0529A2D, GetSelectedMilAdressPtr);
//
//////count mill to reset mil address
////setHook((void*)0x052363E, CountMillDestroyed);
//
//
//setHook((void*)0x051E1C4, GetRessedButtonAddres);
////00529A1F  |. 8B83 30120000  MOV EAX,DWORD PTR DS:[EBX+0x1230]
///*setHook((void*)0x0529A1F, GetMissingAdresseWhenunSelectMilAddres);*/
//////count queue farms
//////0051F3ED   > 8B4424 1C      MOV EAX,DWORD PTR SS:[ESP+0x1C]          ;  Case AD of switch 0051E609
////setHook((void*)0x051F3ED, CountQueue);
//
//
//
////add new button
//
//_005298F0 = 0x05298F0;
//_00520620 = 0x0520620;
//_00527C18 = 0x0527C18;
////00527C59     E8 C289FFFF    CALL age2_x1.00520620
////00527C13  |. E8 382A0600    CALL age2_x1.0058A650
//_0058A650 = 0x058A650;
////00527BFB     8B8A C8000000  MOV ECX,DWORD PTR DS:[EDX+0xC8]
//
////creat auto farm button
//setHook((void*)0x0527C13, AddAutoFarmButton00527C38);
////Creat auto farm hotkey (A)
//setHook((void*)0x04BD7DB, AddAutoFarmButton004BD7DB);
//
//
////auto reseed call
//__0527AF0 = 0x0527AF0;
//_0051E5E0 = 0x051E5E0;
//_0045E4E0 = 0x045E4E0;
//_00603D50 = 0x0603D50;
//_00467380 = 0x0467380;
//_045E4F0 = 0x045E4F0;
//
//setHook((void*)0x0603D4B, RebuildFarms);
//
//
//
//
//_0051E60C = 0x051E60C;
//
//setHook((void*)0x051E605, AddAutoFarmButton00ReesedEvent);
//
////LoadLibraryA("wndmode.dll");
//
//#pragma endregion
//
//#pragma region auto fish trape 
//
//	//004150E3   . 8B8F 0C010000  MOV ECX,DWORD PTR DS:[EDI+0x10C]
//setHook((void*)0x04150E3, GetEDIFromClick);
//
//////00440109   . 8B4F 08        MOV ECX,DWORD PTR DS:[EDI+0x8]
//setHook((void*)0x0440109, GetEsiFishtrapBuildFound);
//
//
//_Sub_00469680_bis = (DWORD)Sub_00469680_bis;
//_Sub_00457170_bis = (DWORD)Sub_00457170_bis;
//_PushFarmMil = (DWORD)PushFarmMil;
//_ActionShipBuild = (DWORD)ActionShipBuild;
////00527B3F  |. 66:8379 10 44  CMP WORD PTR DS:[ECX+0x10],0x44
////create tow button one button auto reseed fish trap
//setHook((void*)0x0527B3F, CreatFishTrapButtons);
////00450DF8     8B45 08        MOV EAX,DWORD PTR SS:[EBP+0x8]
//
//
////setHook((void*)0x0450DF8, ChangeToFishTrape);
////add fish trap delete event
//////setHookJA((void*)0x04673B0 , KillFishTrap);
//
//#pragma region garnison fish trap 
//	/*setHook((void*)0x0450A4E , garnisonLikeMil);
//	//garnison condition if mil
//	//00450A43 | .C74424 18 0000 > MOV DWORD PTR SS : [ESP + 0x18] , 0x0
//	//00450A4E  |. 66:8379 10 44  CMP WORD PTR DS:[ECX+0x10],0x44
//
//	//0045E4F0  /$ 51             PUSH ECX
//
//	_pushFishTrapGarnison = (DWORD)pushFishTrapGarnison;
//	//00467809  |. E8 E26CFFFF    CALL age2_x1.0045E4F0
//	//004677F7  |> 0FBF46 04      MOVSX EAX,WORD PTR DS:[ESI+0x4]                   ;  Case D of switch 004673AD
//	setHook((void*)0x04677F7, pushFarmsGarnison);
//	//00450F5A  |> 8B4E 20        MOV ECX,DWORD PTR DS:[ESI+0x20]
//
//	setHook((void*)0x0450F5A, LoopMilOrShipTrapReseedQueue);
//
//	//setdockqueueenable
//	setHook((void*)0x051F3ED, setdockqueuedisable);
//
//	//0044DBDA   > 8A4424 1C      MOV AL,BYTE PTR SS:[ESP+0x1C]
//	setHook((void*)0x044DBDA, ShowReseedShipTrap);
//	//00467810  |> 0FBF4E 04      MOVSX ECX,WORD PTR DS:[ESI+0x4]                 ;  Case E of switch 004673AD
//	_SublistunqueueFishTrape = (DWORD)SublistunqueueFishTrape;
//	setHook((void*)0x0467810, unqueueFishTrape);
//	//reseed fish
//	//fish trap finished
//	//006038AE.FF50 5C         CALL DWORD PTR DS : [EAX + 0x5C] ;  age2_x1.006024C0
//	//widescreen elarge control to click button
//	//007C0B3A   68 96010000      PUSH 0x196
//	//007C0B3A - 0x400000 = 3C0B3A
//	writeDwordF(0x3C0B3A, 406);//109*/
//#pragma endregion garnison fish trap 
//
//	//rebuild fish trape
//	//0043A705   . E8 26A01A00     CALL age2_x1.005E4730
//	//004400D3   > 8B8E 24040000  MOV ECX,DWORD PTR DS:[ESI+0x424]         ;  Cases 66,69 of switch 0043FE80
//	//00440157   . 66:8B41 10     MOV AX,WORD PTR DS:[ECX+0x10]
//	//00440149   . A1 C0517A00    MOV EAX,DWORD PTR DS:[0x7A51C0]
//
//
//	//setHook((void*)0x0440157, BuildFishTrape);
//	//00440149
//setHook((void*)0x0440149, BuildFishTrape);
//
////get player to reseed
//setHook((void*)0x0440134, currentPlayerToRessedFishTrapAuto);
////0044023F   . E8 4CFB0D00    CALL age2_x1.0051FD90
//setHook((void*)0x044023F, BuildFishTrapeAfterDelete);
//
//#pragma endregion
//


//00603D58 | .D946 54        FLD DWORD PTR DS : [ESI + 54]
//00603D5B | .D95424 08      FST DWORD PTR SS : [ESP + 8]
//00603D5F | .D81D 64626300  FCOMP DWORD PTR DS : [636264]
//00603D65 | .DFE0           FSTSW AX
//00603D67 | .F6C4 40        TEST AH, 40
//00603D6A     0F85 8B000000  JNZ age2_x1.00603DFB
//00603D70     8B4E 08        MOV ECX, DWORD PTR DS : [ESI + 8]
//00603D73     6A 00          PUSH 0
//00603D75     6A 00          PUSH 0
//00603D77     6A 01          PUSH 1
//00603D79     8B41 0C        MOV EAX, DWORD PTR DS : [ECX + C]
//00603D7C     6A 01          PUSH 1
//00603D7E     6A 01          PUSH 1
//00603D80     6A 01          PUSH 1
//00603D82     8B50 74        MOV EDX, DWORD PTR DS : [EAX + 74]
//00603D85     6A 01          PUSH 1
//00603D87     8D4C24 24      LEA ECX, DWORD PTR SS : [ESP + 24]
//00603D8B     6A 01          PUSH 1
//00603D8D     8BBA C8000000  MOV EDI, DWORD PTR DS : [EDX + C8]
//00603D93     51             PUSH ECX
//00603D94     8B4E 58        MOV ECX, DWORD PTR DS : [ESI + 58]
//00603D97     8B17           MOV EDX, DWORD PTR DS : [EDI]
//00603D99     51             PUSH ECX
//00603D9A     8B4C24 30      MOV ECX, DWORD PTR SS : [ESP + 30]
//00603D9E     51             PUSH ECX
//00603D9F     50             PUSH EAX
//00603DA0     8BCF           MOV ECX, EDI
//00603DA2     FF52 24        CALL DWORD PTR DS : [EDX + 24]

//004649B0   . 83EC 18        SUB ESP, 18


DWORD fi_EAX;
DWORD fi_ECX;
DWORD fi_EDX;
DWORD fi_EBX;
DWORD fi_ESP;
DWORD fi_EBP;
DWORD fi_ESI;
DWORD fi_EDI;
//0044010C   . 66:8B41 16     MOV AX,WORD PTR DS:[ECX+16]
//rebuild fish trape
DWORD _004649B0 = 0x04649B0;
//DWORD __00464580 = 0x0464580;
//DWORD _00440110 = 0x0440110;
void __declspec(naked)  Fishtrap00440109()
{
	__asm {
		//0044010C   . 66:8B41 16     MOV AX, WORD PTR DS : [ECX + 16]
		//save register
		MOV ECX, DWORD PTR DS : [EDI + 8h]
		MOV AX, WORD PTR DS : [ECX + 16h]
		MOV fi_EAX, EAX
		MOV fi_ECX, ECX
		MOV fi_EDX, EDX
		MOV fi_EBX, EBX
		MOV fi_ESP, ESP
		MOV fi_EBP, EBP
		MOV fi_ESI, ESI
		MOV fi_EDI, EDI

		cmp  WORD PTR DS : [ECX + 10h] , 116h //dead fish trap
		JNZ continueProcess
		MOV EAX, DWORD PTR DS : [EDI + 0Ch]
		MOV EDX, DWORD PTR DS : [EAX + 74h]
		MOV EDI, DWORD PTR DS : [EDX + 31Ch]//fish trap  31C / 4 = C7 == 199 = fish trap
		MOV ESI, fi_EDI

		MOV EAX, DWORD PTR DS : [ESI + 38h]//x
		MOV ECX, DWORD PTR DS : [ESI + 3Ch]//y
		MOV EDX, DWORD PTR DS : [EDI]
		PUSH - 1h
		PUSH 0h
		PUSH EAX
		/*MOV EAX, DWORD PTR DS : [ESI + 8h] //EDI*/
		PUSH ECX
		//MOV ECX, DWORD PTR DS : [EAX + 0Ch]
		MOV ECX, DWORD PTR DS : [ESI + 0Ch]
		PUSH ECX
		MOV ECX, EDI
		CALL __00464580//_004649B0 // DWORD PTR DS : [EDX + 68h]

		continueProcess :
		//restaure rehister
		MOV EAX, fi_EAX
			MOV ECX, fi_ECX
			MOV EDX, fi_EDX
			MOV EBX, fi_EBX
			MOV ESP, fi_ESP
			MOV EBP, fi_EBP
			MOV ESI, fi_ESI
			MOV EDI, fi_EDI



			JMP _00440110
	}
}
 

//422A0000
//428D0000
//00638394
//1C53F420
//
//0FBF2490
//1BCCFC20
//22F80210
//0x0603D4B
//00602DD0   . 66:8379 10 32  CMP WORD PTR DS : [ECX + 10] , 32
//00602DD5   . 75 0D          JNZ SHORT age2_x1.00602DE4
//condition when fish trap is delete same as farms
DWORD _00602DE4 = 0x0602DE4;
DWORD _00602DEC = 0x0602DEC;
DWORD _00602DD7 = 0x0602DD7;
//0052452C > 8B0D A0127900  MOV ECX, DWORD PTR DS : [7912A0]
//00524532   . 57             PUSH EDI
//00524533.E8 28300C00    CALL age2_x1.005E7560
//00524538   . 8BC8           MOV ECX, EAX
//0052453A.E8 7124F3FF    CALL age2_x1.004569B0



//0044E8F1.E8 9A351B00    CALL age2_x1.00601E90
//0055544F
DWORD CurrentFishPlayer = 0x0;
DWORD FixBugDuplicatedFishTrap;
DWORD cptfish = 0x0;
float PlayerThatReseedFishTrapWood;
//DWORD _____2_006139E4 = 0x06139E4;
void __declspec(naked)  Fishtrap00602DD0()
{
	__asm {



		CMP WORD PTR DS : [ECX + 10h] , 32h
		JE farm

		cherckFishTrap :
		CMP WORD PTR DS : [ECX + 10h] , 0C7h
			JNZ normal
			//
			//CMP EAX, FixBugDuplicatedFishTrap
			//JE normal
			//
			//MOV FixBugDuplicatedFishTrap, EAX

			add cptfish, 1h
			CMP cptfish, 1h
			JE normal

			MOV cptfish, 0h

			MOV ECX, DWORD PTR DS : [ESI + 8h]
			MOV EAX, DWORD PTR DS : [ECX + 0Ch]


			NOP
			MOV EDX, DWORD PTR DS : [EAX + 74h]
			//get player structure
			MOV ECX, DWORD PTR SS : [EAX + 0A8h]
			//get player wood 
			ADD ECX, 04h
			FLD DWORD PTR DS : [ECX]
			CALL _____2_006139E4 //convert float to dword?
			CMP EAX, 64h
			JL normal

			//we get wood float value
			MOV ECX, DWORD PTR DS : [ECX]
			MOV PlayerThatReseedFishTrapWood, ECX
			MOV ECX, DWORD PTR DS : [ESI + 8h]
			MOV EAX, DWORD PTR DS : [ECX + 0Ch]
			MOV EDX, DWORD PTR DS : [EAX + 74h]
			/*MOV ECX, DWORD PTR SS : [EAX + 0A8h]*/
			//check if player have enought wood to reseed a fish trap
			//CMP todo check float 
			//fish trap flag from player structure 
			//(this will be synchro with all players )
			/*ADD ECX, 48h*/ // 048 we get unused variable struct
			//checkflag if we reseed fish trap button is activated
			/*MOV ECX, dword ptr[ECX]*/
			//CMP  WORD PTR DS : [ECX + 1EAEh] , 1h
			CMP WORD PTR DS : [EAX + 1EAEh] , 1h
			/*CMP ECX, 1h*/
			JNZ normal
	}
	//we substract wood to make player pay for fish trap
	PlayerThatReseedFishTrapWood = PlayerThatReseedFishTrapWood - 100.00f;
	__asm {
		MOV ECX, DWORD PTR DS : [ESI + 8h]
		MOV EAX, DWORD PTR DS : [ECX + 0Ch]
		MOV EDX, DWORD PTR DS : [EAX + 74h]
		//get player structure
		MOV ECX, DWORD PTR SS : [EAX + 0A8h]
		ADD ECX, 4h //substract 100 wood to player who reseed fish trap
		MOV EAX, PlayerThatReseedFishTrapWood
		// afect the result
		MOV  dword PTR SS : [ECX] , EAX

		MOV ECX, DWORD PTR DS : [ESI + 8h]
		MOV EAX, DWORD PTR DS : [ECX + 0Ch]
		LEA ECX, DWORD PTR SS : [ESP + 24h]
		MOV EDX, DWORD PTR DS : [EAX + 74h]
		NOP
		MOV EDI, DWORD PTR DS : [EDX + 31Ch]//fish trap unit id
		NOP
		MOV ECX, DWORD PTR DS : [ESI + 58h]
		MOV EDX, DWORD PTR DS : [EDI]
		NOP
		MOV ECX, DWORD PTR SS : [ESP + 30h]
		NOP
		MOV ECX, EDI

		NOP
		//MOV EAX, DWORD PTR DS : [ESI + 58h]
		//MOV ECX, DWORD PTR DS : [ESI + 54h]

		MOV EAX, DWORD PTR DS : [ESI + 8h]
		MOV ECX, DWORD PTR DS : [EAX + 38h]//x
		MOV EAX, DWORD PTR DS : [EAX + 3Ch]//y





		MOV EDX, DWORD PTR DS : [EDI]
		PUSH - 1h
		PUSH 0h
		PUSH EAX
		MOV EAX, DWORD PTR DS : [ESI + 8h]
		PUSH ECX
		MOV ECX, DWORD PTR DS : [EAX + 0Ch]
		PUSH ECX
		MOV ECX, EDI
		CALL __00464580//_004649B0// DWORD PTR DS : [EDX + 68]





		JMP  _00602DEC

		normal :
		JMP _00602DE4
			farm :
		JMP _00602DD7
	}
}

 


//ci
//00602DF3   . 8078 48 07     CMP BYTE PTR DS : [EAX + 48] , 7
//00602DF7   . 72 08          JB SHORT age2_x1.00602E01

//change Farm queue type dword to word
//i know this is uggly but it is the only way i found to send every play that fish trap button is pushed
//0045E5F0 / $ 8B81 AC1E0000  MOV EAX, DWORD PTR DS : [ECX + 1EAC]
DWORD _0045E5F6 = 0x045E5F6;
void __declspec(naked)  ChangeFarmqueue0045E5F0()
{
	__asm {
		MOV EAX, 0h
		MOV AX, WORD PTR DS : [ECX + 1EACh]
		JMP _0045E5F6
	}
}
//0045E5FF  |. 8981 AC1E0000  MOV DWORD PTR DS:[ECX+1EAC],EAX
DWORD _0045E605 = 0x045E605;
void __declspec(naked)  ChangeFarmqueue0045E5FF()
{
	__asm {
		MOV WORD PTR DS : [ECX + 1EACh] , AX
		JMP _0045E605
	}
}
//0045E506     66:83BE AC1E00 > CMP WORD PTR DS : [ESI + 1EAC] , 28
DWORD _0045E50D = 0x045E50D;
void __declspec(naked)  ChangeFarmqueue0045E506()
{
	__asm {
		CMP WORD PTR DS : [ESI + 1EACh] , 28h
		JMP _0045E50D
	}
}

//0045E58D     8B86 AC1E0000  MOV EAX,DWORD PTR DS:[ESI+1EAC]
DWORD _0045E593 = 0x045E593;
void __declspec(naked)  ChangeFarmqueue0045E58D()
{
	__asm {
		MOV EAX, 0h
		MOV AX, WORD PTR DS : [ESI + 1EACh]
		JMP _0045E593
	}
}
//0045E596  |. 8986 AC1E0000  MOV DWORD PTR DS:[ESI+1EAC],EAX
DWORD _0045E59C = 0x045E59C;
void __declspec(naked)  ChangeFarmqueue0045E596()
{
	__asm {
		MOV WORD PTR DS : [ESI + 1EACh] , AX
		//no sense because why we will update flag when we push auto farm button?? it is fish trap
		//MOV WORD PTR DS : [ESI + 1EAEh] , flagAutoFish

		JMP _0045E59C
	}
}
//0045E4F7 | . 8BF1           MOV ESI, ECX
//0045E4F9 | . 83FF 01        CMP EDI, 1
DWORD _0045E4FC = 0x045E4FC;
void __declspec(naked)  ChangeFarmqueue0045E4F7()
{
	__asm {
		MOV ESI, ECX
		//MOV WORD PTR DS : [ESI + 1EAEh] , flagAutoFish
		CMP EDI, 1
		JMP _0045E4FC
	}
}
void autoFarmAnFishTrapReseed()
{
	BYTE a[]{ 0xE8,0xFB,0x95,0x6E,0xAB,0x54,0x55,0x68,0x24,0xA5,0xEA,0x54,0x55,0x55,0x6A,0xFF,0x55,0x6A,0x00,0x6A,0x32,0x68,0xBA,0x00,0x00,0x00,0x83,0x3D,0x60,0x5F,0x7A,0x00
,0x01,0x74,0x04,0x6A,0x34,0xEB,0x04,0x6A,0x33,0xEB,0x00,0x6A,0x03,0x8B,0xCE,0xE8,0x6C,0x88,0x68,0xAB,0x54,0x50,0x8B,0xCE,0xE8,0x93,0xF5,0x67,0xAB,0x54,0xFF,0x25
,0xD0,0xAD,0xEA,0x54

	};

	_005298F0 = 0x05298F0;
	_00520620 = 0x0520620;
	_00527C18 = 0x0527C18;
	//00527C59     E8 C289FFFF    CALL age2_x1.00520620
	//00527C13  |. E8 382A0600    CALL age2_x1.0058A650
	_0058A650 = 0x058A650;
	//00527BFB     8B8A C8000000  MOV ECX,DWORD PTR DS:[EDX+0xC8]

	//creat auto farm button
	InjectHook((void*)0x0527C13, AddAutoFarmButton00527C38,PATCH_JUMP);
	////Creat auto farm hotkey (A)
	//i put this on scicillian sejeant hotkey part
	//setHook((void*)0x04BD7DB, AddAutoFarmButton004BD7DB);
	//0x051E605farms and fish trap event
	InjectHook((void*)0x051E605, AddAutoFarmEvent, PATCH_JUMP);
	//0x0603D4B
	InjectHook((void*)0x0603D4B, RebuildFarms2, PATCH_JUMP);
 

}//004570DA   . 66:3D 1601     CMP AX, 116

//00602DCD   . 8B48 08        MOV ECX, DWORD PTR DS : [EAX + 8]
//00602DD0   . 66 : 8379 10 32  CMP WORD PTR DS : [ECX + 10] , 32  //add 0C7 too??
//00602DD5   . 75 0D          JNZ SHORT age2_x1.00602DE4


//005E251F  |. BD 204E0000    |MOV EBP,4E20
//00457CB0
//00603D70     90             NOP


//005056A9  |. 81FF C8000000  |CMP EDI,0C8

void Aoc10c_250pop()
{
	//005056A9 
	writeByte(0x05056AB, 0xFA);
}
//Injection(0x5256b6, "E945912900"),
//Injection(0x51de3e, "8BF289542414"),
//Injection(0x51de4d, "31F689542414"),
//Injection(0x525709, "8BF98BE9"),
//Injection(0x525712, "31FFBD01000000"),
DWORD Aoc10c_005256BC = 0x05256BC;
void __declspec(naked)  Aoc10c_FixRecordingExplore1()
{
	__asm {
		MOV ECX, DWORD PTR DS : [791200h]
		MOV EAX, DWORD PTR DS : [ECX + 1614h]
		CMP DWORD PTR DS : [EAX + 568h] , 0h
		JNZ short _007BE834
		MOV ECX, DWORD PTR DS : [7912A0h]
		CMP DWORD PTR DS : [ECX + 13E0h] , 2h
		JNZ short _007BE834
		MOV EAX, DWORD PTR DS : [ESI + 121Ch]
		MOV ECX, DWORD PTR DS : [EAX + 34h]
		MOV BYTE PTR DS : [ECX + 0A256h] , 1h
		_007BE834:
		MOV ECX, DWORD PTR DS : [ESI + 10FCh]
		JMP Aoc10c_005256BC
	}
}
 
void Aoc10c_FixRecordingExploreStateBug()
{
	InjectHook((void*)0x5256b6, Aoc10c_FixRecordingExplore1, PATCH_JUMP);
	BYTE Aoc10C_51de3e[6] = {0x8B,0xF2,0x89,0x54,0x24,0x14};
	writeData(0x51de3e, Aoc10C_51de3e, 6);
	BYTE Aoc10C_51de4d[6] = {0x31,0xF6,0x89,0x54,0x24,0x14};
	writeData(0x51de4d, Aoc10C_51de4d, 6);
	BYTE Aoc10C_0525709[4] = {0x8B,0xF9,0x8B,0xE9};
	writeData(0x0525709, Aoc10C_0525709, 4);
	BYTE Aoc10C_0525712[7] = {0x31,0xFF,0xBD,0x01,0x00,0x00,0x00};
	writeData(0x525712, Aoc10C_0525712, 7);

}

using namespace std;

float ratioLogoUnitTech = 1.0f;
int translationX = 0;
bool selectedIdlVillager = false;
bool selectAllTC = false;
bool selectAllArmy = false;
bool selectAllSiegeWorkshop = false;
bool selectAllMilitaryBuilding = false;
bool selectAllArcheryRange = false;
bool selectAllCastle = false;
bool selectAllDonjon = false;
bool selectAllKrepost = false;
bool selectAllMarket = false;
bool selectAlMonastery = false;
bool selectAlltradeCarte = false;
bool selectAllDock = false;
bool selectAllBarrack = false;
bool selectAllStable = false;
bool deleteAllSelected = false;

int cptIDLEVIllager = 0;
int cptTCselected = 0;
int cptArmyselected = 0;
int cptallSiegeWorkshop = 0;
int cptallMilitaryBuilding = 0;
int cptallArcheryRange = 0;
int cptallCastle = 0;
int cptallDonjon = 0;
int cptallKrepost = 0;
int cptallMarket = 0;
int cptallMonastery = 0;
int cptalltradeCarte = 0;
int cptallDock = 0;
int cptallBarrack = 0;
int cptallStable = 0;
int countUnitDelete = 0;

char strWood[50];
char strFood[50];
char strGold[50];
char strStone[50];
char strNBVillager[50];
char strIDLE[50];
char strCiv[100];
char strAge[100];

char strResWood[50];
char strResFood[50];
char strResGold[50];
char strResStone[50];
char strResPOP[50];

DWORD flagClean = 0x0;
int Hotkeys[15][4] =
{
	{0x56 , 0xA0, 0x0, 0x0}, //0: Select all idle villagers (default Ctrl+.)
	{0x44 , 0xA0, 0x0, 0x0},    //1: Select all idle army (default Ctrl+,)
	{0x53 , 0xA0, 0x0, 0x0},    //2: Select all trade carts (default Ctrl+M)
	{0x46 , 0xA0, 0x0, 0x0},    //3: Select all Town Centers (default Ctrl+H)
	{0x58 , 0xA0, 0x0, 0x0},    //4: Select all Barracks (default Ctrl+Q)
	{0x43 , 0xA0, 0x0, 0x0},    //5: Select all Archery Ranges (default Ctrl+W)
	{0x41 , 0xA0, 0x0, 0x0},    //6: Select all Stables (default Ctrl+E)
	{0x5A , 0xA0, 0x0, 0x0},    //7: Select all Siege Workshops (default Ctrl+R)
	{0x52 , 0xA0, 0x0, 0x0},    //8: Select all Docks (default Ctrl+T)
	{0x54 , 0xA0, 0x0, 0x0},    //9: Select all Markets (default Ctrl+D)
	{0x47 , 0xA0, 0x0, 0x0},    //10: Select all Monasteries (default Ctrl+F)
	{0x59 , 0xA0, 0x0, 0x0},    //11: Select all Castles (default Ctrl+C)
	{0x4B , 0xA0, 0x0, 0x0},    //12: Select all Krepost (default Ctrl+V)
	{0x44 , 0xA0, 0x0, 0x0},    //13: Select all Donjon (default Ctrl+V)
	{0x4D , 0xA0, 0x0, 0x0}     //14: Select all Military buildings (default Ctrl+A)
};

//16770 = V//Select_all Idle_villagers
//16771 = D// Select all Idle_military
//16772 = S// Select all Trade_carts
//16773 = F// Select all Town_centers
//16774 = X// Select all Barracks
//16775 = C// Select all Archery ranges
//16776 = A// Select all Stables
//16777 = Z// Select all Siege_workshops
//16778 = R// Select all Docks
//16779 = T// Select all Markets
//16780 = G// Select all Monasteries
//16781 = Y// Select all Castles
//16782 = K// Select all Kreposts
//16783 = D// Select all Donjons
//16783 = M//Select all Military_Buildings
DWORD Starting = 0x0;
DWORD _00442320 = 0x0442320;
DWORD _0043E690 = 0x043E690;
//MOV Starting, 1h
void __declspec(naked)  getstartedGame()
{
	__asm {
		CALL _0043E690
		MOV Starting, 1h
		JMP _00442320
	};
}
DWORD _7_005E7560 = 0x05E7560;
//0x0521139
//transform get current player to get each player
DWORD CompterNbPlayer = 0x1;//not 0,we don't compte gaia
DWORD showOnlyCurrrentPlayerVillagerPerRessources = 0x0;
DWORD currentplayerIndexx;
DWORD PlarAddresss;

void __declspec(naked) geteachPlayer()
{
	__asm {
		MOV ECX, DWORD PTR DS : [7912A0h]
		CALL _7_005E7560
		MOV currentplayerIndexx, ECX
		MOV ECX, DWORD PTR DS : [7912A0h]

		MOV EAX, DWORD PTR DS : [ECX + 424h]
		TEST EAX, EAX
		JE short _005E758F
		MOV DX, WORD PTR DS : [EAX + 48h]//number of player gaia included
		JL short _005E758F//if single player we ignore
		//MOV CX,WORD PTR DS:[EAX+94h]//current player
		retry :
		MOV ECX, 0h
			MOV ECX, CompterNbPlayer
			INC CompterNbPlayer
			CMP currentplayerIndexx, ECX
			JNZ flagf

			MOV showOnlyCurrrentPlayerVillagerPerRessources, 1h
			JMP conti
			flagf :
		MOV showOnlyCurrrentPlayerVillagerPerRessources, 0h
			conti :

		CMP CX, DX
			JGE short _005E758F
			TEST CX, CX
			JL short _005E758F
			MOV EDX, DWORD PTR DS : [EAX + 4Ch]
			MOVSX ECX, CX
			MOV EAX, DWORD PTR DS : [EDX + ECX * 4h]
			MOV PlarAddresss, EAX
			RETN
			_005E758F :
		MOV CompterNbPlayer, 1h // we reset player compter
			JMP retry
	}
}
DWORD hidev = 0x0;
//0052150B   > 894424 10      MOV DWORD PTR SS:[ESP+10],EAX
DWORD _00521592 = 0x0521592;
DWORD _00521513 = 0x0521513;
void __declspec(naked) showOnlyRessPerVillageOnCurrentPlayer()
{
	__asm {
		MOV DWORD PTR SS : [ESP + 10h] , EAX
		MOV EAX, DWORD PTR SS : [ESP + 14h]
		CMP showOnlyCurrrentPlayerVillagerPerRessources, 1h
		JNZ _hide
		CMP hidev, 1h
		JE _hide
		JMP _00521513
		_hide :
		JMP _00521592
	}
}
DWORD TradeUnite;
DWORD Repairman;
DWORD Builder;
DWORD StoneMiner;
DWORD GoldMiner;
DWORD Lumberjack;
DWORD sheperds;
DWORD Hunter;
DWORD Fishermen;
DWORD Forage;
DWORD Farmer;
DWORD FishingShipp;
DWORD IdleFishingShipps;
DWORD IdleVillagers;
DWORD onFOOD;
DWORD onGOLD;
DWORD IDLE;

DWORD IndexCurrentPlayer;

DWORD ma_EAX;
DWORD ma_ECX;
DWORD ma_EDX;
DWORD ma_EBX;
DWORD ma_ESP;
DWORD ma_EBP;
DWORD ma_ESI;
DWORD ma_EDI;
DWORD _EAXVilStatus;
DWORD _00521403 = 0x0521403;
DWORD _GetPlayerColor;



//void __declspec(naked)  ggetMatrix()
//{
//    __asm {
//        //cmp _GetPlayerColor,0h
//        //JNZ matrix 
//      /*
//
//        MOV EDX, DWORD PTR DS : [7912A0h]
//        MOV EAX, DWORD PTR DS : [EDX + 424h]
//        MOV EAX, DWORD PTR DS : [EAX + 4Ch]
//        MOV ECX, IndexCurrentPlayer
//        MOV ECX, DWORD PTR DS : [EAX + ECX * 4h]
//        //MOV ECX, DWORD PTR DS : [EAX +  4h] 
//        MOV EDX, DWORD PTR DS : [ECX + 160h]
//        MOV EAX, DWORD PTR DS : [EDX + 20h]//color
//        MOV _GetPlayerColor, EAX
//      
//
//        //restore register
//        MOV EAX, ma_EAX
//        MOV ECX, ma_ECX
//        MOV EDX, ma_EDX
//        MOV EBX, ma_EBX
//        MOV ESP, ma_ESP
//        MOV EBP, ma_EBP
//        MOV ESI, ma_ESI
//        MOV EDI, ma_EDI
//          */
//
//
//    //matrix:
//        //save register
//        MOV ma_EAX, EAX
//            MOV ma_ECX, ECX
//            MOV ma_EDX, EDX
//            MOV ma_EBX, EBX
//            MOV ma_ESP, ESP
//            MOV ma_EBP, EBP
//            MOV ma_ESI, ESI
//            MOV ma_EDI, EDI
//
//        //save eax
//        MOV _EAXVilStatus, EAX
//            MOV EAX, DWORD PTR SS : [ESP + 50h]
//            MOV IdleVillagers, EAX
//            MOV EAX, DWORD PTR SS : [ESP + 4Ch]
//            MOV IdleFishingShipps, EAX
//            MOV EAX, DWORD PTR SS : [ESP + 48h]
//            MOV FishingShipp, EAX
//            MOV EAX, DWORD PTR SS : [ESP + 44h]
//            MOV Farmer, EAX
//            MOV EAX, DWORD PTR SS : [ESP + 40h]
//            MOV Forage, EAX
//            MOV EAX, DWORD PTR SS : [ESP + 3Ch]
//            MOV Fishermen, EAX
//            MOV EAX, DWORD PTR SS : [ESP + 38h]
//            MOV Hunter, EAX
//            MOV EAX, DWORD PTR SS : [ESP + 34h]
//            MOV sheperds, EAX
//            MOV EAX, DWORD PTR SS : [ESP + 30h]
//            MOV Lumberjack, EAX
//            //MOV EAX,0h
//            MOV AL, BYTE PTR SS : [ESP + 2Ch]//WORD PTR SS : [ESP + 2Ch]
//            MOV GoldMiner, EAX
//            //MOV EAX, 0h
//            MOV AL, BYTE PTR SS : [ESP + 2Eh]//2Ah
//            MOV StoneMiner, EAX
//            MOV EAX, DWORD PTR SS : [ESP + 28h]
//            MOV Builder, EAX
//            MOV EAX, DWORD PTR SS : [ESP + 24h]
//            MOV Repairman, EAX
//            MOV EAX, DWORD PTR SS : [ESP + 20h]
//            MOV TradeUnite, EAX
//
//            MOV onFOOD, 0h
//            MOV EAX, 0h
//            ADD EAX, sheperds
//            ADD EAX, Hunter
//            ADD EAX, Fishermen
//            ADD EAX, Forage
//            ADD EAX, Farmer
//            ADD EAX, FishingShipp
//            MOV onFOOD, EAX
//
//            MOV onGOLD, 0h
//            MOV EAX, 0h
//            ADD EAX, GoldMiner
//            ADD EAX, TradeUnite
//            MOV onGOLD, EAX
//
//            MOV IDLE, 0h
//            MOV EAX, 0h
//            ADD EAX, IdleVillagers
//            ADD EAX, IdleFishingShipps
//            MOV IDLE, EAX
//
//            //restore eax
//            MOV  EAX, _EAXVilStatus
//
//            //restore register
//            MOV EAX, ma_EAX
//            MOV ECX, ma_ECX
//            MOV EDX, ma_EDX
//            MOV EBX, ma_EBX
//            MOV ESP, ma_ESP
//            MOV EBP, ma_EBP
//            MOV ESI, ma_ESI
//            MOV EDI, ma_EDI
//            MOV ECX, 0483h
//            XOR EAX, EAX
//            SUB ECX, EBX
//
//
//            JMP _00521403
//    }
//
//}
;

float floatFromBits(DWORD const a)
{
	return static_cast<int>(a);
}


//0051BF0C   . 8B0D A0127900  MOV ECX,DWORD PTR DS:[0x7912A0]
DWORD _00521110 = 0x0521110;
DWORD _00521F29 = 0x0521F29;

DWORD stats_EAX;
DWORD stats_ECX;
DWORD stats_EDX;
DWORD stats_EBX;
DWORD stats_ESP;
DWORD stats_EBP;
DWORD stats_ESI;
DWORD stats_EDI;
//0x0521F23
DWORD FLAGShowPanelVilStatus = 0x0;

void __declspec(naked)  GetVillagerStatusDisplayressources()
{
	__asm {
		//save register
		MOV stats_EAX, EAX
		MOV stats_ECX, ECX
		MOV stats_EDX, EDX
		MOV stats_EBX, EBX
		MOV stats_ESP, ESP
		MOV stats_EBP, EBP
		MOV stats_ESI, ESI
		MOV stats_EDI, EDI
		//CMP Starting, 1h
		//JNZ restore


		MOV EAX, DWORD PTR DS : [07912A0h]
		TEST EAX, EAX
		JE restore
		//00446397   > 8B8D 20180000  MOV ECX,DWORD PTR SS:[EBP+0x1820]

		MOV FLAGShowPanelVilStatus, 1h
		MOV ECX, DWORD PTR SS : [EAX + 01820h]
		TEST ECX, ECX
		JE restore
		MOV ECX, ESI
		CALL _00521110
		MOV FLAGShowPanelVilStatus, 0h
		//ECX
		// 00521F29  |. 8A88 14020000  MOV CL,BYTE PTR DS:[EAX+0x214]
		//loop_ :
		// //?????
		//////MOV EAX, DWORD PTR SS : [ECX + 50h]
		//////TEST EAX, EAX
		//////JE restore



	restore:
		//restaure register
		MOV EAX, stats_EAX
			MOV ECX, stats_ECX
			MOV EDX, stats_EDX
			MOV EBX, stats_EBX
			MOV ESP, stats_ESP
			MOV EBP, stats_EBP
			MOV ESI, stats_ESI
			MOV EDI, stats_EDI
			//normale
			MOV EAX, DWORD PTR DS : [ESI + 0121Ch]
			JMP _00521F29
	}
}
DWORD pop_current;                  //+0x2C
DWORD Pop_avaible;                  //+0x2C
//get current pop
//00452914 | .  50            PUSH EAX; / Arg6 = 0C8
//0045291A   . 50             PUSH EAX                                 ; |Arg5
DWORD _00452923 = 0x0452923;
DWORD _006139E4 = 0x06139E4;

DWORD Pop_stats_EAX;
DWORD Pop_stats_ECX;
DWORD Pop_stats_EDX;
DWORD Pop_stats_EBX;
DWORD Pop_stats_ESP;
DWORD Pop_stats_EBP;
DWORD Pop_stats_ESI;
DWORD Pop_stats_EDI;
void __declspec(naked)  getCurentPOP()
{
	__asm {



		PUSH EAX; / Arg6 = 0C8
		MOV Pop_avaible, EAX
		CALL _006139E4
		MOV pop_current, EAX
		PUSH EAX; | Arg5
		PUSH 02h; | Arg4 = 00000002
		LEA EAX, DWORD PTR SS : [EBP + 017Fh]
		JMP _00452923
	}

}
//00555460 


//00520A8F   . 8D8424 9C00000>LEA EAX,DWORD PTR SS:[ESP+9C]

//DWORD _00520A96 = 0x0520A96;
DWORD _00602D6F = 0x0602D6F;
DWORD z_00556C50 = 0x0556C50;
DWORD z_005E7560 = 0x05E7560;
void __declspec(naked)  cleanScreenn()
{
	__asm {


		//cleanselection
		CMP flagClean, 1h
		JNZ conti
		//save register
		MOV Pop_stats_EAX, EAX
		MOV Pop_stats_ECX, ECX
		MOV Pop_stats_EDX, EDX
		MOV Pop_stats_EBX, EBX
		MOV Pop_stats_ESP, ESP
		MOV Pop_stats_EBP, EBP
		MOV Pop_stats_ESI, ESI
		MOV Pop_stats_EDI, EDI
		MOV ECX, DWORD PTR DS : [7912A0h]
		CALL z_005E7560
		MOV ECX, EAX
		CALL z_00556C50
		MOV flagClean, 0h

		//restore register
		MOV EAX, Pop_stats_EAX
		MOV ECX, Pop_stats_ECX
		MOV EDX, Pop_stats_EDX
		MOV EBX, Pop_stats_EBX
		MOV ESP, Pop_stats_ESP
		MOV EBP, Pop_stats_EBP
		MOV ESI, Pop_stats_ESI
		MOV EDI, Pop_stats_EDI
		conti :
		MOV EAX, DWORD PTR DS : [ESI + 18h]
			CMP EAX, -1h


			//JMP _00520A96
			JMP _00602D6F
	}
}

//00520A8F   . 8D8424 9C00000>LEA EAX,DWORD PTR SS:[ESP+9C]

DWORD _00520A96 = 0x0520A96;
//DWORD _00602D6F = 0x0602D6F;
void __declspec(naked)  cleanScreenn2()
{
	__asm {


		//cleanselection
		CMP flagClean, 1h
		JNZ conti
		//save register
		MOV Pop_stats_EAX, EAX
		MOV Pop_stats_ECX, ECX
		MOV Pop_stats_EDX, EDX
		MOV Pop_stats_EBX, EBX
		MOV Pop_stats_ESP, ESP
		MOV Pop_stats_EBP, EBP
		MOV Pop_stats_ESI, ESI
		MOV Pop_stats_EDI, EDI
		MOV ECX, DWORD PTR DS : [7912A0h]
		CALL z_005E7560
		MOV ECX, EAX
		CALL z_00556C50
		MOV flagClean, 0h
		//restore register
		MOV EAX, Pop_stats_EAX
		MOV ECX, Pop_stats_ECX
		MOV EDX, Pop_stats_EDX
		MOV EBX, Pop_stats_EBX
		MOV ESP, Pop_stats_ESP
		MOV EBP, Pop_stats_EBP
		MOV ESI, Pop_stats_ESI
		MOV EDI, Pop_stats_EDI
		conti :

		LEA EAX, DWORD PTR SS : [ESP + 9Ch]


			JMP _00520A96
			//JMP _00602D6F
	}
}
DWORD _0044DBF5 = 0x044DBF5;
DWORD _0044DB43 = 0x044DB43;
DWORD flagHide = 0x0;

DWORD getplayer = 0x05E7560;
DWORD _0046A110 = 0x046A110;


DWORD removeUnitQueue_EAX;
DWORD removeUnitQueue_ECX;
DWORD removeUnitQueue_EDX;
DWORD removeUnitQueue_EBX;
DWORD removeUnitQueue_ESP;
DWORD removeUnitQueue_EBP;
DWORD removeUnitQueue_ESI;
DWORD removeUnitQueue_EDI;
void __declspec(naked)  hideCreationBarre()
{
	__asm {

		cmp flagHide, 1h
		JE hidelogoCreated

		normale :
		CMP AX, 7Dh
			JNZ __0044DBF5
			JMP _0044DB43

			__0044DBF5 :
		JMP _0044DBF5
			hidelogoCreated :
		//save registery
		MOV removeUnitQueue_EAX, EAX
			MOV removeUnitQueue_ECX, ECX
			MOV removeUnitQueue_EDX, EDX
			MOV removeUnitQueue_EBX, EBX
			MOV removeUnitQueue_ESP, ESP
			MOV removeUnitQueue_EBP, EBP
			MOV removeUnitQueue_ESI, ESI
			MOV removeUnitQueue_EDI, EDI

			//even that unqueue units button
			MOV EAX, 0h//DWORD PTR SS:[ESP+18]                                   ;  Case 97 of switch 0051E609
			MOV ECX, DWORD PTR DS : [7912A0h]
			PUSH - 1h
			PUSH 0h
			PUSH 0h
			PUSH 0h
			PUSH EAX
			PUSH 4h
			PUSH 1h
			CALL getplayer//age2_x1_.005E7560
			//006B7190  30 93 E5 13                                      0å
			MOV ESI, DWORD PTR DS : [6B7190h]

			MOV ECX, DWORD PTR DS : [ESI + 121Ch]
			ADD EAX, 1C0h
			PUSH EAX
			MOV ECX, DWORD PTR DS : [ECX + 68h]
			CALL _0046A110
			MOV flagHide, 0h

			//restore registery
			MOV EAX, removeUnitQueue_EAX
			MOV ECX, removeUnitQueue_ECX
			MOV EDX, removeUnitQueue_EDX
			MOV EBX, removeUnitQueue_EBX
			MOV ESP, removeUnitQueue_ESP
			MOV EBP, removeUnitQueue_EBP
			MOV ESI, removeUnitQueue_ESI
			MOV EDI, removeUnitQueue_EDI

			CMP AX, 7Dh
			JNZ __0044DBF5
			JMP _0044DB43
	}

}
//00521110
DWORD _005E73C0 = 0x05E73C0;
//DWORD _007B9000 = 0x07B9000;
DWORD p_EAX;
DWORD p_ECX;
DWORD p_EDX;
DWORD p_EBX;
DWORD p_ESP;
DWORD p_EBP;
DWORD p_ESI;
DWORD p_EDI;
//0x5213FA
DWORD eachPlayerStoneMiner;
void __declspec(naked)  simulation_00521110()
{
	__asm {
		SUB ESP, 244h
		PUSH EBX
		PUSH EBP
		PUSH ESI
		MOV EBP, ECX
		PUSH EDI
		MOV ECX, 0Dh
		XOR EAX, EAX
		LEA EDI, DWORD PTR SS : [ESP + 20h]
		REP STOS DWORD PTR ES : [EDI]
		MOV ECX, DWORD PTR DS : [7912A0h]
		XOR EBX, EBX
		MOV DWORD PTR SS : [ESP + 10h] , EBX
		MOV DWORD PTR SS : [ESP + 14h] , EBX
		CALL geteachPlayer //dpamode.geteachPlayer
		MOV ECX, DWORD PTR DS : [7912A0h]
		PUSH 0Bh
		MOV EDI, EAX
		CALL _005E73C0//age2_x1_.005E73C0
		MOV ESI, EAX
		MOV EAX, DWORD PTR DS : [EDI + 78h]
		MOV ECX, DWORD PTR DS : [EAX + 4h]
		MOV EAX, DWORD PTR DS : [EAX + 8h]
		TEST EAX, EAX
		JLE _0052127A
		MOV DWORD PTR SS : [ESP + 18h] , ECX
		MOV DWORD PTR SS : [ESP + 1Ch] , EAX
		_00521168 :
		MOV EBX, DWORD PTR DS : [ECX]
			MOV EAX, DWORD PTR DS : [EBX + 8h]
			MOVSX EAX, WORD PTR DS : [EAX + 16h]
			ADD EAX, -2h;  Switch(cases 2..15)
			CMP EAX, 13h
			JA _0052125C
			XOR ECX, ECX
			MOV CL, BYTE PTR DS : [EAX + 5215B0h]
			CMP ECX, 1h
			JE _stoneMiner
			JMP _0052125C
			JMP DWORD PTR DS : [ECX * 4 + 5215A0h]
			_stoneMiner :
			MOV EDX, DWORD PTR DS : [EBX] ;  Case 4 of switch 00521171
			MOV ECX, EBX
			CALL DWORD PTR DS : [EDX + 164h]
			TEST AL, AL
			JE short _005211A3
			INC DWORD PTR SS : [ESP + 50h]
			JMP _0052125C
			_005211A3 :
		MOV EAX, DWORD PTR DS : [EBX + 8h]
			MOVSX EAX, WORD PTR DS : [EAX + 10h]
			CMP EAX, 0D8h;  Switch(cases D8..162)
			JG short _005211E5
			JE short _005211DF
			ADD EAX, -38h
			CMP EAX, 9Eh
			JA _0052125C
			XOR ECX, ECX
			MOV CL, BYTE PTR DS : [EAX + 5215E8h]
			CMP ECX, 5h
			JNZ _0052125C

			INC WORD PTR SS : [ESP + 2Eh]
			JMP _0052125C
			//JMP _0052125C //we ignore other res
			JMP DWORD PTR DS : [ECX * 4 + 5215C4h]
			INC DWORD PTR SS : [ESP + 28h]
			JMP _0052125C
			INC DWORD PTR SS : [ESP + 3Ch]
			JMP short _0052125C
			_005211DF :
		INC DWORD PTR SS : [ESP + 38h] ;  Case D8 of switch 005211AA
			JMP short _0052125C
			_005211E5 :
		CMP EAX, 162h
			JG short _0052121F
			JE short _00521219
			ADD EAX, -0DAh
			CMP EAX, 29h
			JA short _0052125C
			XOR EDX, EDX
			MOV DL, BYTE PTR DS : [EAX + 52169Ch]
			CMP EDX, 1h
			JNZ _0052125C

			INC WORD PTR SS : [ESP + 2Eh]
			JMP _0052125C




			JMP DWORD PTR DS : [EDX * 4 + 521688h]
			INC DWORD PTR SS : [ESP + 24h]
			JMP short _0052125C
			INC DWORD PTR SS : [ESP + 44h]
			JMP short _0052125C
			INC DWORD PTR SS : [ESP + 30h]
			JMP short _0052125C
			_00521219 :
		INC DWORD PTR SS : [ESP + 40h] ;  Case 162 of switch 005211AA
			JMP short _0052125C
			_0052121F :
		ADD EAX, -243h
			CMP EAX, 0Dh
			JA short _0052125C
			XOR ECX, ECX
			MOV CL, BYTE PTR DS : [EAX + 5216D4h]
			JMP _0052125C //we ignore other res
			JMP DWORD PTR DS : [ECX * 4h + 5216C8h]
			INC DWORD PTR SS : [ESP + 2Ch]
			JMP short _0052125C
			INC DWORD PTR SS : [ESP + 34h]
			JMP short _0052125C
			MOV EDX, DWORD PTR DS : [EBX] ;  Case 15 of switch 00521171
			MOV ECX, EBX
			CALL DWORD PTR DS : [EDX + 164h]
			//JMP _007B9000
			INC DWORD PTR SS : [ESP + 48h]
			TEST AL, AL
			JE short _0052125C
			INC DWORD PTR SS : [ESP + 4Ch]
			DEC DWORD PTR SS : [ESP + 48h]
			JMP short _0052125C


			NOP
			JMP short _0052125C
			INC DWORD PTR SS : [ESP + 20h] ;  Cases 2, 13 of switch 00521171
			_0052125C:
		MOV ECX, DWORD PTR SS : [ESP + 18h] ;  Default case of switch 005211AA
			MOV EAX, DWORD PTR SS : [ESP + 1Ch]
			ADD ECX, 4h
			DEC EAX
			MOV DWORD PTR SS : [ESP + 18h] , ECX
			MOV DWORD PTR SS : [ESP + 1Ch] , EAX
			JNZ _00521168
			MOV EBX, DWORD PTR SS : [ESP + 14h]
			_0052127A :
			//MOV EAX,DWORD PTR SS:[EBP+121Ch]
			//MOVSX ECX,WORD PTR DS:[EAX+94h]
			//MOV EDX,DWORD PTR DS:[EAX+4Ch]
			//MOV EAX,DWORD PTR DS:[EDX+ECX*4h]
			//0052128D   . 66:83B8 640B00>CMP WORD PTR DS:[EAX+0B64h],0
			//00521295   . 0F8E 5F010000  JLE age2_x1_.005213FA
			MOV EAX, 0h
			MOV AL, BYTE PTR SS : [ESP + 2Eh]//2Ah
			MOV eachPlayerStoneMiner, EAX

			//save register
			MOV p_EAX, EAX
			MOV p_ECX, ECX
			MOV p_EDX, EDX
			MOV p_EBX, EBX
			MOV p_ESP, ESP
			MOV p_EBP, EBP
			MOV p_ESI, ESI
			MOV p_EDI, EDI
			//we get res 286 for every player 
			////get current player
			//MOV ECX, DWORD PTR DS : [07912A0h]
			//call _7_005E7560
			MOV EAX, PlarAddresss
			MOV EAX, dword ptr[EAX + 0A8h]
			MOV EDX, EAX
			//Stone miners 286 * 4 -> 478h
			ADD EDX, 478h
			push eachPlayerStoneMiner//each player stone miner
			call floatFromBits
			//move st0 into eax 
			sub esp, 4h
			fstp  DWORD PTR DS : [esp]
			mov eax, [esp]
			add esp, 4h
			MOV  DWORD PTR DS : [EDX] , EAX

			//restaure register
			MOV EAX, p_EAX
			MOV ECX, p_ECX
			MOV EDX, p_EDX
			MOV EBX, p_EBX
			MOV ESP, p_ESP
			MOV EBP, p_EBP
			MOV ESI, p_ESI
			MOV EDI, p_EDI

			POP EDI
			POP ESI
			POP EBP
			POP EBX
			ADD ESP, 244h
			RETN
	}
}
//0x0602D7E
DWORD _3_00411460 = 0x0411460;
DWORD _3_00602D83 = 0x0602D83;
DWORD vil_ESI;
void __declspec(naked)  loopGetVillagerPerRessources()
{
	__asm {
		MOV hidev, 1h
		MOV vil_ESI, ESI
		MOV EAX, DWORD PTR DS : [7912A0h]
		MOV ECX, DWORD PTR SS : [EAX + 1820h]
		MOV ESI, ECX
		CALL  simulation_00521110//_00521110
		MOV hidev, 0h

		MOV ESI, vil_ESI
		MOV EAX, DWORD PTR DS : [ESI + 8h]
		MOV ECX, DWORD PTR DS : [EAX + 0Ch]
		MOV ECX, DWORD PTR DS : [ECX + 8Ch]
		CALL _3_00411460
		JMP _3_00602D83

	}
}
//0x05C5F1B
DWORD _005C61B0 = 0x05C61B0;
DWORD _005C5F20 = 0x05C5F20;
DWORD vil_ESI1;

void __declspec(naked)  MinesGenerateStone()
{
	__asm {
		CALL _005C61B0


		//MOV hidev, 1h
		MOV vil_ESI1, ESI
		MOV EAX, DWORD PTR DS : [7912A0h]
		MOV ECX, DWORD PTR SS : [EAX + 1820h]
		MOV ESI, ECX
		CALL  simulation_00521110//_00521110
		MOV ESI, vil_ESI1
		JMP _005C5F20

	}
}
//when build building (hereminer camp we update nb miner)
// 
//void __declspec(naked)  MinesGenerateStone2()
//{
//    __asm {
//        MOV vil_ESI2, ESI
//        MOV EAX, DWORD PTR DS : [7912A0h]
//        MOV ECX, DWORD PTR SS : [EAX + 1820h]
//        MOV ESI, ECX
//        CALL  simulation_00521110//_00521110
//        MOV ESI, vil_ESI2
//        MOV EAX, DWORD PTR DS : [ESI + 1820h]
//        JMP _2_00440227  
//
//    }
//}
// here we can over write the event sychronised action for every player online 
 //0x04673B0
DWORD _00467827 = 0x0467827;
DWORD _004673B6 = 0x04673B6;
void __declspec(naked)  createSyncActionEventJAMiner()
{
	__asm
	{
		CMP EAX, 12h;  Switch(cases 0..E)
		JNZ __ja
		//MOV vil_ESI2, ESI
		MOV EAX, DWORD PTR DS : [7912A0h]
		MOV ECX, DWORD PTR SS : [EAX + 1820h]
		MOV ESI, ECX
		CALL  simulation_00521110//_00521110
		//MOV ESI, vil_ESI2
		MOV EAX, DWORD PTR DS : [ESI + 1820h]
		JMP _00467827

		__ja :
		JA __00467827
			CMP EAX, 0Eh;  Switch(cases 0..E)
			JA __00467827
			JMP _004673B6



		__00467827:
		JMP _00467827
	}
}

//0044023F.E8 4CFB0D00    CALL age2_x1_.0051FD90

WORD iDCreteadUnit;
DWORD a_0051FD90 = 0x051FD90;
DWORD _00440244 = 0x0440244;
DWORD EAX_creat = 0x0440244;
void __declspec(naked)  getCreatedUnitcCreat()
{
	__asm {
		MOV EAX_creat, EAX
		MOV AX, WORD PTR DS : [ESP]
		MOV iDCreteadUnit, AX
		MOV  EAX, EAX_creat
		CALL a_0051FD90
		JMP _00440244
	}

}
DWORD _BuildingAddress;
DWORD _0044DAF3 = 0x044DAF3;
void __declspec(naked)  pushBuldingSelectionAddress()
{
	__asm {
		//0044DAEC   . 8B50 08        MOV EDX, DWORD PTR DS : [EAX + 8]
		cmp flagHide, 1h
		JNZ normale
		MOV EAX, _BuildingAddress
		MOV EDX, DWORD PTR DS : [EAX + 8h]
		CMP BYTE PTR DS : [EDX + 4h] , 50h//if type is building
		JMP _0044DAF3

		normale :
		MOV EDX, DWORD PTR DS : [EAX + 8h]
			CMP BYTE PTR DS : [EDX + 4h] , 50h//if type is building
			JMP _0044DAF3
	}

}
//0044DA96 > 39B5 54080000  CMP DWORD PTR SS : [EBP + 854] , ESI
//0044DA9C     0F84 F6140000  JE age2_x1_.0044EF98
DWORD _0044EF98 = 0x044EF98;
DWORD _0044DAA2 = 0x044DAA2;
DWORD selectedBuilding_EAX;
void __declspec(naked)  JumpToBuidlingSelection()
{
	__asm {
		MOV selectedBuilding_EAX, EAX
		cmp flagHide, 1h
		JNZ normale
		MOV EAX, _BuildingAddress
		MOV DWORD PTR SS : [EBP + 854h] , EAX   //we push obj to this pointer
		MOV EAX, selectedBuilding_EAX
		JMP _0044DAA2

		normale :
		CMP DWORD PTR SS : [EBP + 854h] , ESI
			JE __0044EF98
			JMP _0044DAA2

			__0044EF98 :
		JMP _0044EF98
	}

}

//void __declspec(naked)  creatButton()
//{
//    __asm {
// 
//    }
//
//}
//0051936C  |. 8D7C24 28      LEA EDI,DWORD PTR SS:[ESP+28]
//0051938F     0F1F4400       DD age2_x1_.00441F0F
// //bug broken instion so strange
//0051938F | .E8 5C830300    CALL age2_x1.005516F0
//005213FA  |>-E9 8374727B    JMP v15DE.7BC48882



DWORD _005516F0 = 0x05516F0;
DWORD _00519394 = 0x0519394;
void __declspec(naked)  fixbugCrash()
{
	__asm {
		MOV ECX, DWORD PTR DS : [ESI + 1110h]
		CALL _005516F0
		JMP _00519394
	}

}
//00556C50  /$ 8B81 68020000  MOV EAX,DWORD PTR DS:[ECX+268]

//005289E7   . 8B0D A0127900  MOV ECX, DWORD PTR DS : [7912A0]
//005289ED.E8 6EEB0B00    CALL age2_x1_.005E7560
//005289F2   . 8BC8           MOV ECX, EAX
//005289F4.E8 57E20200    CALL age2_x1_.00556C50

//0051DCE4   . 897424 10      MOV DWORD PTR SS : [ESP + stbi__vertically_flip_on_load_lo >

DWORD _00552806 = 0x0552806;

void __declspec(naked)  cleansel()
{
	__asm {
		MOV EBX, DWORD PTR SS : [ESP + 8h]



		//call cleanFunc

		CMP flagClean, 1h
		JNZ conti
		MOV ECX, DWORD PTR DS : [7912A0h]
		CALL z_005E7560
		MOV ECX, EAX
		CALL z_00556C50
		MOV flagClean, 0h

		conti :
		PUSH ECX
			MOV ECX, DWORD PTR SS : [ESP + 18h]


			JMP _00552806
	}
}
//007C0E69   8B8E 70100000    MOV ECX,DWORD PTR DS:[ESI+1070]

DWORD _007C0E6F = 0x007C0E6F;
void __declspec(naked)  fixInterfaceScreen()
{
	__asm {
		MOV ECX, DWORD PTR DS : [ESI + 1070h]
		MOV EAX, DWORD PTR DS : [ESI + 18h]//X
		SUB EAX, 0AFh
		PUSH EAX
		MOV EDX, DWORD PTR DS : [ESI + 14h]//Y
		SUB EDX, 1F4h
		PUSH EDX
		PUSH 19h
		MOV EDX, DWORD PTR DS : [ECX]
		PUSH 0
		CALL DWORD PTR DS : [EDX + 1Ch]
		MOV ECX, DWORD PTR DS : [ESI + 1070h]
		JMP _007C0E6F
	}
}

void  __declspec(naked) getVillagerMatrix()//
{
	__asm {
		//      //save register
		//MOV ma_EAX, EAX
		//MOV ma_ECX, ECX
		//MOV ma_EDX, EDX
		//MOV ma_EBX, EBX
		//MOV ma_ESP, ESP
		//MOV ma_EBP, EBP
		//MOV ma_ESI, ESI
		MOV ma_EDI, EDI

		//save eax
		MOV _EAXVilStatus, EAX
		//we get only for current player
		//CMP showOnlyCurrrentPlayerVillagerPerRessources, 1h
		//JNZ restore

		MOV EAX, DWORD PTR SS : [ESP + 50h]
		MOV IdleVillagers, EAX
		MOV EAX, DWORD PTR SS : [ESP + 4Ch]
		MOV IdleFishingShipps, EAX
		MOV EAX, DWORD PTR SS : [ESP + 48h]
		MOV FishingShipp, EAX
		MOV EAX, DWORD PTR SS : [ESP + 44h]
		MOV Farmer, EAX
		MOV EAX, DWORD PTR SS : [ESP + 40h]
		MOV Forage, EAX
		MOV EAX, DWORD PTR SS : [ESP + 3Ch]
		MOV Fishermen, EAX
		MOV EAX, DWORD PTR SS : [ESP + 38h]
		MOV Hunter, EAX
		MOV EAX, DWORD PTR SS : [ESP + 34h]
		MOV sheperds, EAX
		MOV EAX, DWORD PTR SS : [ESP + 30h]
		MOV Lumberjack, EAX
		//MOV EAX,0h
		MOV AL, BYTE PTR SS : [ESP + 2Ch]//WORD PTR SS : [ESP + 2Ch]
		MOV GoldMiner, EAX
		//MOV EAX, 0h
		MOV AL, BYTE PTR SS : [ESP + 2Eh]//2Ah
		MOV StoneMiner, EAX
		MOV EAX, DWORD PTR SS : [ESP + 28h]
		MOV Builder, EAX
		MOV EAX, DWORD PTR SS : [ESP + 24h]
		MOV Repairman, EAX
		MOV EAX, DWORD PTR SS : [ESP + 20h]
		MOV TradeUnite, EAX

		MOV onFOOD, 0h
		MOV EAX, 0h
		ADD EAX, sheperds
		ADD EAX, Hunter
		ADD EAX, Fishermen
		ADD EAX, Forage
		ADD EAX, Farmer
		ADD EAX, FishingShipp
		MOV onFOOD, EAX

		MOV onGOLD, 0h
		MOV EAX, 0h
		ADD EAX, GoldMiner
		ADD EAX, TradeUnite
		MOV onGOLD, EAX

		MOV IDLE, 0h
		MOV EAX, 0h
		ADD EAX, IdleVillagers
		ADD EAX, IdleFishingShipps
		MOV IDLE, EAX

		restore :
		//restore eax

		MOV  EAX, _EAXVilStatus








			////restore register
			//CMP ma_EAX, 0h
			//JE __00521403
			//MOV EAX, ma_EAX
			//MOV ECX, ma_ECX
			//MOV EDX, ma_EDX
			//MOV EBX, ma_EBX
			//MOV ESP, ma_ESP
			//MOV EBP, ma_EBP
			//MOV ESI, ma_ESI
			//MOV EDI, ma_EDI
			//////MOV ECX, 0483h
			MOV ECX, 0483h
			XOR EAX, EAX
			SUB ECX, EBX

			__00521403 :
		JMP _00521403
	};

}
void hookAoc()
{
	////0051DD01   > 8B8E B8110000  MOV ECX,DWORD PTR DS:[ESI+11B8]
	////setHook((void*)0x0552801  , cleansel);
	InjectHook((void*)0x0520A8F, cleanScreenn2,PATCH_JUMP);//case scenario and no villager we put it on score
	//00602D69   . 8B46 18        MOV EAX,DWORD PTR DS:[ESI+18]
	//00602D6C   . 83F8 FF        CMP EAX, -1


	InjectHook((void*)0x0602D69, cleanScreenn,PATCH_JUMP);
	////007C0E69   8B8E 70100000    MOV ECX,DWORD PTR DS:[ESI+1070]
	//setHook((void*)0x07C0E69, fixInterfaceScreen);



	//0051938F | .E8 5C830300    CALL age2_x1.005516F0
	//E8 5C 83 03 00


	//BYTE fixAssemblyBug[5]{0xE8, 0x5C, 0x83,0x03, 0x00};
	//writeData(0x051938F, fixAssemblyBug,5);
	//00519389  |. 8B8E 10110000  MOV ECX,DWORD PTR DS:[ESI+1110]
	//////////InjectHook((void*)0x0519389, fixbugCrash, PATCH_JUMP);

	InjectHook((void*)0x044231B, getstartedGame, PATCH_JUMP);

	//00521F23  |. 8B86 1C120000  MOV EAX,DWORD PTR DS:[ESI+0x121C]
	InjectHook((void*)0x0521F23, GetVillagerStatusDisplayressources, PATCH_JUMP);
	//setHook((void*)0x045291A, getCurentPOP);
	InjectHook((void*)0x0452914, getCurentPOP, PATCH_JUMP);
	//0044023F
	InjectHook((void*)0x044023F, getCreatedUnitcCreat, PATCH_JUMP);

	//we will put sync action on villager for poles stone miner generate gold
	//we use fu,ctio that show villager per ressources
	////00521139   . E8 22640C00    CALL age2_x1_.005E7560
	//InjectHook(0x0521139, geteachPlayer, PATCH_CALL);
	//0052150B   > 894424 10      MOV DWORD PTR SS:[ESP+10],EAX
	//InjectHook(0x052150B, showOnlyRessPerVillageOnCurrentPlayer, PATCH_JUMP);
	//setHook((void*)0x0602D7E, BurgundiansCallRelicTech);
	////setHook((void*)0x0602D7E, loopGetVillagerPerRessources);
	//005C5F1B   . E8 90020000    CALL age2_x1_.005C61B0
	//InjectHook(0x05C5F1B, MinesGenerateStone, PATCH_JUMP);
	//004673B0   . 0F87 71040000          JA age2_x1_.00467827
	//setHookJA((void*)0x04673B0, createSyncActionEventJAMiner);

	//00440221   > 8B86 20180000  MOV EAX,DWORD PTR DS:[ESI+1820]
	//InjectHook(0x0440221, MinesGenerateStone2, PATCH_JUMP);

	/*
		//manage to hide barre
		setHook((void*)0x044DB39, hideCreationBarre);
		////test push select object
		//setHook((void*)0x044DAEC, pushBuldingSelectionAddress);
		//aoc considere that you select nothing so we need to force to jump on that condition
		setHook((void*)0x044DA96, JumpToBuidlingSelection);*/

		//event multi delete
		//004660FA   > 50             PUSH EAX                                 ;  Case 6A of switch 00466099

		//004C2230   . 8B41 08        MOV EAX,DWORD PTR DS:[ECX+stbi__vertically_flip_on_>

		//004D221C   . 56             PUSH ESI
		//004D221D.E8 7E4A0800    CALL age2_x1_.00556CA0

		//fix widescreen
		//007C0E72   2D AF000000      SUB EAX, 0AF
		//    007C0E77   50               PUSH EAX
		//    007C0E78   8B56 14          MOV EDX, DWORD PTR DS : [ESI + 14]
		//    007C0E7B   52               PUSH EDX
		//    007C0E7C   6A 00            PUSH 0

		//writeByte( 0x07C0E72 + 1, 0xAF);
		//writeByte( 0x07C0E7C + 1, 0x00);
		//0051D395 > 8BCD           MOV ECX, EBP;  Case 14 of switch 0051D1F0
		//    0051D397.E8 A4630000    CALL age2_x1_.00523740
		//    0051D39C.B8 01000000    MOV EAX, 1

		//    005237DC > 68 10080000    PUSH 810
		//    005237E1.E8 CAFF0E00    CALL age2_x1_.006137B0


}

//DS:[7B15DC4C]=00000000
//selectall.cpp:2216. && *(void**)(*(size_t*)0x7912A0 + 0x424) != NULL )

void ManageSelection(int i, void* player, int Playerciv)
{
	bool flag1 = false;
	bool arraflag[15] = { false,false, false, false, false, false, false, false, false, false, false, false, false, false, false };
	arraflag[0] = selectedIdlVillager;
	arraflag[1] = selectAllTC;
	arraflag[2] = selectAllArmy;
	arraflag[3] = selectAllSiegeWorkshop;
	arraflag[4] = selectAllMilitaryBuilding;
	arraflag[5] = selectAllArcheryRange;
	arraflag[6] = selectAllCastle;
	arraflag[7] = selectAllDonjon;
	arraflag[8] = selectAllKrepost;
	arraflag[9] = selectAllMarket;
	arraflag[10] = selectAlMonastery;
	arraflag[11] = selectAlltradeCarte;
	arraflag[12] = selectAllDock;
	arraflag[13] = selectAllBarrack;
	arraflag[14] = selectAllStable;
	arraflag[15] = deleteAllSelected;
	int cpt = 0;
	for (int i = 0; i < 15; i++)
	{
		if (arraflag[i])
			cpt++;
	}
	//more than 2 same hotkey we ignore
	flag1 = cpt >= 2;
	if (flag1)
	{
		selectedIdlVillager = false;
		selectAllTC = false;
		selectAllArmy = false;
		selectAllSiegeWorkshop = false;
		selectAllMilitaryBuilding = false;
		selectAllArcheryRange = false;
		selectAllCastle = false;
		selectAllDonjon = false;
		selectAllKrepost = false;
		selectAllMarket = false;
		selectAlMonastery = false;
		selectAlltradeCarte = false;
		selectAllDock = false;
		selectAllBarrack = false;
		selectAllStable = false;
		for (int i = 0; i < 15; i++)
		{
			arraflag[i] = false;
		}
		return;
	}
	try
	{



		if (player != NULL)
		{
			//printf("select villager \n");
			cptIDLEVIllager = 0;
			cptTCselected = 0;
			cptArmyselected = 0;
			cptallSiegeWorkshop = 0;
			cptallMilitaryBuilding = 0;
			cptallArcheryRange = 0;
			cptallCastle = 0;
			cptallDonjon = 0;
			cptallKrepost = 0;
			cptallMarket = 0;
			cptallMonastery = 0;
			cptalltradeCarte = 0;
			cptallDock = 0;
			cptallBarrack = 0;
			cptallStable = 0;
			countUnitDelete = 0;
			//79529E70   8B77 78          MOV ESI,DWORD PTR DS:[EDI+78]
			//dllmain.cpp:2383.  RGE_Object_List* objects = player->objects;
			void* objects = (void*)((size_t)player + 0x78);//this is list object address care // player->objects
			 //objects = (void*)((size_t)objects + 0x4);// player->objects
			//struct  __declspec(align(2)) RGE_Object_List
			//{
			//    int vfptr;
			//    struct RGE_Static_Object** list;
			//    __int16 number_of_objects;
			//};


			if (!IsBadReadPtr((void*)objects, sizeof(UINT_PTR)) && objects != NULL)
			{


				//79529E70   8B77 78          MOV ESI,DWORD PTR DS:[EDI+78]
				//DS:[1C0168A8]=1D7E8400 ESI = 026DF820 dllmain.cpp:2383.  RGE_Object_List * objects = player->objects;

				//DWORD* lstSelectAdd = (DWORD*)(void**)((size_t)player + 0x78);//player->sel_list;
				//DWORD* lstSelect = (DWORD*)((DWORD)lstSelectAdd + 0x7 + 0x2);//get the good beging selection addrese
				DWORD* lstSelect = (DWORD*)((DWORD)player + 0x1C0);//get the good beging selection addrese
				//79529EA1   3887 68020000    CMP BYTE PTR DS:[EDI+268],AL

				//7952A881   8887 68020000    MOV BYTE PTR DS:[EDI+268],AL
				//dllmain.cpp:2917.  *NBSelect = cptIDLEVIllager;
				BYTE* NBSelect = (BYTE*)(void**)((size_t)player + 0x268);//set select range
				//BYTE* NBSelect = (BYTE*)(void**)((size_t)lstSelectAdd + 0xA8 + 0x7 + 0x2);//set select range
				//Address=1C0169F0  EBX = 75690100 (KERNEL32.IsBadReadPtr) dllmain.cpp:2387.  DWORD * lstSelect = (DWORD*)((DWORD)lstSelectAdd + 0x7 + 0x2);//get the good beging selection addrese
				//79529E90   8D9F C0010000    LEA EBX,DWORD PTR DS:[EDI+1C0]


				void** sel_list = (void**)(lstSelect);

				if (deleteAllSelected && *NBSelect != 0x0)
				{
					/*
					for (int i = 0; i <= *NBSelect; i++)
					{
						INPUT inputs[2] = {};
						ZeroMemory(inputs, sizeof(inputs));

						inputs[0].type = INPUT_KEYBOARD;
						inputs[0].ki.wVk = VK_DELETE;

						inputs[1].type = INPUT_KEYBOARD;
						inputs[1].ki.wVk = VK_DELETE;
						inputs[1].ki.dwFlags = KEYEVENTF_KEYUP;

						UINT uSent = SendInput(ARRAYSIZE(inputs), inputs, sizeof(INPUT));
						Sleep(50);
					}*/
					//for (int i = 0; i <= *NBSelect; i++)
					//{
					//    if (countUnitDelete <= *NBSelect && ((*sel_list)->object_class == 70 || (*sel_list)->object_class == 80))
					//    {
					//        //you can only delete you unit ans can't delete sheep
					//        if ((*sel_list)->owner_player == player && (*sel_list)->master_obj->object_group != 58) 
					//        {
					//            INPUT inputs[2] = {};
					//            ZeroMemory(inputs, sizeof(inputs));

					//            inputs[0].type = INPUT_KEYBOARD;
					//            inputs[0].ki.wVk = VK_DELETE;

					//            inputs[1].type = INPUT_KEYBOARD;
					//            inputs[1].ki.wVk = VK_DELETE;
					//            inputs[1].ki.dwFlags = KEYEVENTF_KEYUP;

					//            UINT uSent = SendInput(ARRAYSIZE(inputs), inputs, sizeof(INPUT));
					//            Sleep(50);
					//            //*sel_list++;
					//            countUnitDelete++;
					//        }
					//    }
					//}
				}


				//std::cout << "obj list:" << std::hex << (DWORD)lstSelect << std::endl;
				//std::cout << "obj number_of_objects:" << std::hex << (DWORD)objects->number_of_objects << std::endl;
				//DS:[1D7E8408]=0062AX = 0000dllmain.cpp:2437.  for (int ono = 0; ono < objects->number_of_objects; ono++)
				//79529F0D   66:3B46 08      CMP AX,WORD PTR DS:[ESI+8]
				//__int16	2	short, short int, signed short int	-32 768 à 32 767   -> 7FFF  DWORD size it tkink
				///*/*/*int number_of_objects = (DWORD)*(void**)((size_t)(void*)((size_t)player + 0x78) + 0x8);*/*/*/

				//MOV EAX,DWORD PTR DS:[ESI+4] -> struct RGE_Static_Object** list;
				//74884209   8B40 04          MOV EAX,DWORD PTR DS:[EAX+4]
				 //list =(void*) *(DWORD*)(objects); //(void*)(void**)(*(size_t*)objects + 0x4);
				if (IsBadReadPtr((void*)objects, sizeof(UINT_PTR)))
				{
					return;
				}
				void* p = (void*)*(DWORD*)((size_t)objects);
				if (IsBadReadPtr((void*)((size_t)p + 0x4), sizeof(UINT_PTR)))
				{
					return;
				}
				void* list = (void*)*(DWORD*)((size_t)p + 0x4); //(void*)(void**)(*(size_t*)objects + 0x4);
				if (IsBadReadPtr((void*)p, sizeof(UINT_PTR)))
				{
					return;
				}
				int number_of_objects = (int)*(DWORD*)((size_t)p + 0x8);
				for (int ono = 0; ono < (int)number_of_objects; ono++)// objects->number_of_objects
				{

					//79529F2A   8B1488           MOV EDX,DWORD PTR DS:[EAX+ECX*4]
					//void* obj = (void*)(void**)(*(size_t*)list + 0x4 * ono)  ;
					void* obj = (void*)(*(DWORD*)((size_t)list + 4 * ono));
					if (IsBadReadPtr((void*)obj, sizeof(UINT_PTR)))
					{
						break;
					}
					if (IsBadReadPtr((void*)((size_t)obj + 0x8), sizeof(UINT_PTR)))
					{
						break;
					}
					//*(DWORD*)(*(DWORD*)(v3 + 4) + 4 * v6);
					//std::cout << "obj number_of_objects:" << std::hex << sel_list << std::endl;
					//printf("select villager2 \n");
										//79529F5A   8B42 08          MOV EAX,DWORD PTR DS:[EDX+8]
					//void* master_obj = (void*)(void**) *(DWORD*)(*(size_t*)obj + 0x8);
					////79529F5D   0FB740 10        MOVZX EAX,WORD PTR DS:[EAX+10]
					//WORD* idADDR = (WORD*)(void**)(*(size_t*)master_obj + 0x10);

					//int id = (int)*idADDR;

					void* master_obj = (void*)*(DWORD*)((size_t)obj + 0x8);
					//hotfix
					if (IsBadReadPtr((void*)master_obj, sizeof(UINT_PTR)))
					{
						break;
					}

					//79529F5D   0FB740 10        MOVZX EAX,WORD PTR DS:[EAX+10]
					//WORD* idADDRG = (WORD*) *(WORD*)((size_t)master_objG + 0x10);
					//MOVZ
					int id = *(WORD*)((size_t)master_obj + 0x10);//(int)*idADDRG 
					////7952A2E7   807A 4E 50       CMP BYTE PTR DS:[EDX+4E],50
					//int object_class = (int)*(BYTE*)((size_t)obj + 0x4E);//(void**)

					if (flagClean == 0 && selectedIdlVillager && cptIDLEVIllager < 40 && IdleVillagers != 0x0)
					{
						//struct  __declspec(align(1)) RGE_Static_Object
						//{
						//    int vfptr;
						//    int id;
						//    struct RGE_Master_Static_Object* master_obj;
						//...
						// struct RGE_Master_Static_Object
						//{
						//    char field_0;
						//    char field_1;
						//    char field_2;
						//    char field_3;
						//    char master_type;//type ex: combattant
						//    char field_5;
						//    char field_6;
						//    char field_7;
						//    char* name;
						//    __int16 string_id;
						//    __int16 string_id2;
						//    __int16 id;
						//    __int16 copy_id;
						//    __int16 save_id;
						//    __int16 object_group;
						// //....

						//MOVZ

						if (
							id == 83 || id == 293 //normale villager
							|| id == 123 || id == 218//lumberjack
							|| id == 56 || id == 57//fisherman   
							|| id == 124 || id == 220 || id == 1493//stone miner
							|| id == 579 || id == 581 || id == 1497//gold miner
							|| id == 122 || id == 216 || id == 1491//hunter
							|| id == 590 || id == 592 || id == 1498//sherperd
							|| id == 214 || id == 259 || id == 1192 || id == 1490//farmer
							|| id == 118 || id == 212 || id == 1192 || id == 1489//builder
							|| id == 120 || id == 354 || id == 1496//forager
							|| id == 156 || id == 222 || id == 1494//repairer
							//less probability to apear so we put at the end
							|| id == 1310 || id == 1311//fisherman    
							|| id == 1312 || id == 1313//fisherman    
							|| id == 1314 || id == 1315//fisherman    
							|| id == 1316 || id == 1317//fisherman    
							|| id == 1318 || id == 1319//fisherman    
							|| id == 1320 || id == 1321//fisherman    
							|| id == 1322 || id == 1323//fisherman    
							|| id == 1324 || id == 1325//fisherman    
							|| id == 1326 || id == 1327//fisherman    
							|| id == 1328 || id == 1329//fisherman    
							|| id == 1488 || id == 1499//fisherman    
							|| id == 1500 || id == 1501//fisherman    
							|| id == 1502 || id == 1503//fisherman    
							|| id == 1504 || id == 1505//fisherman    
							|| id == 1506 || id == 1507 || id == 1508//fisherman    
							)
						{

							//005FF6F3   . 8B46 78        MOV EAX, DWORD PTR DS : [ESI + 78]
							DWORD* ptr = (DWORD*)*(void**)((size_t)obj + 0x78);
							DWORD* ptr1 = (DWORD*)*(void**)((size_t)obj + 0x108);
							DWORD flagIdle2;
							bool flagisidleres = false;
							//0xFFFF     -1
							if ((DWORD)ptr == 0xFFFFFFFF)
							{
								//00601E90  /$ 8B41 08        MOV EAX,DWORD PTR DS:[ECX+8]
								DWORD flagIdle = (DWORD) * (void**)((size_t)ptr1 + 0x8);
								if (flagIdle != 0)
								{
									//00601E97  |. 8B00           MOV EAX,DWORD PTR DS:[EAX]
									flagIdle2 = (DWORD) * (void**)((size_t)flagIdle);
									//005FF72F   . 8A46 0C        MOV AL,BYTE PTR DS:[ESI+C]
									flagIdle2 = (DWORD) * (void**)((size_t)flagIdle2 + 0xC);
									flagisidleres = true;
								}
								if (flagIdle == 0 && !flagisidleres
									||
									flagisidleres && (flagIdle2 == 0x0 || flagIdle2 == 0x1
										|| flagIdle2 == 0x2 || flagIdle2 == 0xD || flagIdle2 == 0x3
										|| flagIdle2 == 0xE))
								{
									if (cptIDLEVIllager == 0)
									{

										//first select need to be on double
										//7952A2AF   C642 36 01       MOV BYTE PTR DS:[EDX+36],1
										//obj->selected = true;
										*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
										*sel_list = obj;
										*sel_list++;
										cptIDLEVIllager++;
										//obj->selected = true;
										*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
										*sel_list = obj;
										*sel_list++;
										//cptIDLEVIllager++;
									}
									else
									{
										//if (!IsBadReadPtr((void*)(*sel_list), sizeof(UINT_PTR)) && IdleVillagers != 0)
										//obj->selected = true;
										*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
										*sel_list = obj;
										*sel_list++;
										cptIDLEVIllager++;
									}
								}
							}
						}

					}
					//                // //....
					////79529F5A   8B42 08          MOV EAX,DWORD PTR DS:[EDX+8]
					//                void* master_obj = (void*)(void**)(*(size_t*)obj + 0x8);
					//                //79529F5D   0FB740 10        MOVZX EAX,WORD PTR DS:[EAX+10]
					//                WORD* idADDR = (WORD*)(void**)(*(size_t*)master_obj + 0x10);
					if (IsBadReadPtr((void*)obj, sizeof(UINT_PTR)))
					{
						break;
					}
					if (IsBadReadPtr((void*)((size_t)obj + 0x8), sizeof(UINT_PTR)))
					{
						break;
					}
					//79529F5A   8B42 08          MOV EAX,DWORD PTR DS:[EDX+8]
					//(*(DWORD*)((size_t)list  
					void* master_objG = (void*)*(DWORD*)((size_t)obj + 0x8);
					//79529F5D   0FB740 10        MOVZX EAX,WORD PTR DS:[EAX+10]
					//WORD* idADDRG = (WORD*) *(WORD*)((size_t)master_objG + 0x10);
					//MOVZ
					if (IsBadReadPtr((void*)master_objG, sizeof(UINT_PTR)))
					{
						break;
					}
					int idG = *(WORD*)((size_t)master_objG + 0x10);//(int)*idADDRG 
					//7952A2E7   807A 4E 50       CMP BYTE PTR DS:[EDX+4E],50
					if ((int)obj == 0x0)
					{
						break;
					}

					if (IsBadReadPtr((void*)obj, sizeof(UINT_PTR)))
					{
						break;
					}
					int object_class = (int)*(BYTE*)((size_t)obj + 0x4E);//(void**)
					//select all tc
					if (selectAllTC && flagClean == 0 && cptTCselected < 40 && (int)idG == 0x6D && (int)object_class == 80)
					{
						if (cptTCselected == 0)
						{
							//first select need to be on double
							//obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
							cptTCselected++;
							//obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
						}
						else
						{
							//obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
							cptTCselected++;
						}
					}
					//master_objG
					//7952A346   8B42 08          MOV EAX, DWORD PTR DS : [EDX + 8]
					//7952A349   0FB740 16        MOVZX EAX, WORD PTR DS : [EAX + 16]
					int object_group = (int)*(WORD*)(void**)((size_t)master_objG + 0x16);
					//select all army cptArmyselected selectAllArmy
					if (selectAllArmy && flagClean == 0 && cptArmyselected < 40 && (int)object_class == 70 //combattant
						&& (
							(int)object_group == 0//archer
							|| (int)object_group == 6//infentery
							|| (int)object_group == 12//cavalery
							|| (int)object_group == 47//scoute
							|| (int)object_group == 13//siege weapons
							|| (int)object_group == 55//Balista
							|| (int)object_group == 36//cav Archer
							|| (int)object_group == 18//Monk
							|| (int)object_group == 54//unpacked unit treb  no work idk
							|| (int)object_group == 51//packed unit treb  no work idk
							|| (int)object_group == 35//packed unit treb
							|| (int)object_group == 23//conquistador
							|| (int)object_group == 24//war elephants
							|| (int)object_group == 44//hand canonner
							)
						)
					{
						//0051D3DD   > 8BCD           MOV ECX,EBP                                                          ;  Cases 2E,2F of switch 0051D1F0
						//00528A81   . 57             PUSH EDI
						//00528EDD   > 8B5C24 10      MOV EBX,DWORD PTR SS:[ESP+stbi__vertically_flip_on_load_local]
						//lol same as villager
						//005FF6F3   . 8B46 78        MOV EAX,DWORD PTR DS:[ESI+78]
						DWORD* ptr = (DWORD*)*(void**)((size_t)obj + 0x78);
						DWORD* ptr1 = (DWORD*)*(void**)((size_t)obj + 0x108);
						DWORD flagIdle2;
						bool flagisidleres = false;
						//0xFFFF     -1
						if ((DWORD)ptr == 0xFFFFFFFF)
						{
							//00601E90  /$ 8B41 08        MOV EAX,DWORD PTR DS:[ECX+8]
							DWORD flagIdle = (DWORD) * (void**)((size_t)ptr1 + 0x8);
							if (flagIdle != 0)
							{
								//00601E97  |. 8B00           MOV EAX,DWORD PTR DS:[EAX]
								flagIdle2 = (DWORD) * (void**)((size_t)flagIdle);
								//005FF72F   . 8A46 0C        MOV AL,BYTE PTR DS:[ESI+C]
								flagIdle2 = (DWORD) * (void**)((size_t)flagIdle2 + 0xC);
								flagisidleres = true;
							}

							if (flagIdle == 0 && !flagisidleres
								||
								flagisidleres && (flagIdle2 == 0x0 || flagIdle2 == 0x1
									|| flagIdle2 == 0x2 || flagIdle2 == 0xD || flagIdle2 == 0x3
									|| flagIdle2 == 0xE))
							{
								if (cptArmyselected == 0)
								{
									//first select need to be on double
									//obj->selected = true;
									*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
									*sel_list = obj;
									*sel_list++;
									cptArmyselected++;
									//obj->selected = true;
									*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
									*sel_list = obj;
									*sel_list++;
								}
								else
								{
									//obj->selected = true;
									*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
									*sel_list = obj;
									*sel_list++;
									cptArmyselected++;
								}
							}
						}
					}

					//select all siege workshop
					//idG   -> obj->master_obj->id
					if (selectAllSiegeWorkshop && flagClean == 0 && (int)object_class == 80 && cptallSiegeWorkshop < 40 &&
						(idG == 49 || (int)idG == 150))//&& (int)obj->master_obj->hp>1
					{
						if (cptallSiegeWorkshop == 0)
						{
							//first select need to be on double
							//obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
							cptallSiegeWorkshop++;
							//obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
						}
						else
						{
							//obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
							cptallSiegeWorkshop++;
						}
					}
					//select all militarybuilding
					//bool selectAllMilitaryBuilding = false; cptallMilitaryBuilding
					//idG   -> obj->master_obj->id
					if (selectAllMilitaryBuilding && flagClean == 0 && (int)object_class == 80 && cptallMilitaryBuilding < 40 &&
						(
							(int)idG == 49 || (int)idG == 150//Siege workshop
							|| (int)idG == 12 //barrack
							|| (int)idG == 87 //Archery Range 
							|| (int)idG == 101 //Stable 
							|| (int)idG == 82 //castel
							|| (int)idG == 1476 //|| (int)idG == 1453 || (int)idG == 1454 || (int)idG ==1452  //donjon
							|| (int)idG == 1245   //krepost
							)
						)
					{
						if (cptallMilitaryBuilding == 0)
						{
							//first select need to be on double
							//obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
							cptallMilitaryBuilding++;
							//obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
						}
						else
						{
							//obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
							cptallMilitaryBuilding++;
						}
					}
					//no work idk why :'(
					//////select All archery range
					////selectAllBuilding(selectAllArcheryRange, &cptallArcheryRange, flagClean, &obj,&sel_list, 87);
					//////select All castle
					////selectAllBuilding(selectAllCastle, &cptallCastle, flagClean, &obj, &sel_list, 82);
					//////select All Donjon
					////selectAllBuilding(selectAllDonjon, &cptallDonjon, flagClean, &obj, &sel_list, 1476);
					//////select All Krepost
					////selectAllBuilding(selectAllKrepost,  &cptallKrepost, flagClean, &obj, &sel_list, 1245);
					//////select All Market
					////selectAllBuilding(selectAllMarket, &cptallMarket, flagClean,&obj, &sel_list, 84);
					//select All archery range
					//idG   -> obj->master_obj->id
					if (selectAllArcheryRange && flagClean == 0 && (int)object_class == 80 && cptallArcheryRange < 40 && (int)idG == 87) //Archery Range 
					{
						if (cptallArcheryRange == 0)
						{
							//first select need to be on double
							//obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
							cptallArcheryRange++;
							//obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
						}
						else
						{
							//obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
							cptallArcheryRange++;
						}
					}
					//idG   -> obj->master_obj->id
					//select All castle
					if (selectAllCastle && flagClean == 0 && (int)object_class == 80 && cptallCastle < 40 && (int)idG == 82)//castel  
					{
						if (cptallCastle == 0)
						{
							//first select need to be on double
							//obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
							cptallCastle++;
							//obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
						}
						else
						{
							//obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
							cptallCastle++;
						}
					}
					//idG   -> obj->master_obj->id
					//select All Donjon
					if (selectAllDonjon && flagClean == 0 && (int)object_class == 80 && cptallDonjon < 40 && (int)idG == 1476)//donjon  
					{
						if (cptallDonjon == 0)
						{
							//first select need to be on double
							//obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
							cptallDonjon++;
							//obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
						}
						else
						{
							//obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
							cptallDonjon++;
						}
					}
					//idG   -> obj->master_obj->id
					//select All Krepost
					if (selectAllKrepost && flagClean == 0 && (int)object_class == 80 && cptallKrepost < 40 && (int)idG == 1245)   //krepost
					{
						if (cptallKrepost == 0)
						{
							//first select need to be on double
							//obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
							cptallKrepost++;
							//obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
						}
						else
						{
							//obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
							cptallKrepost++;
						}
					}
					//idG   -> obj->master_obj->id
					//select All Market
					if (selectAllMarket && flagClean == 0 && (int)object_class == 80 && cptallMarket < 40 && (int)idG == 84)
					{
						if (cptallMarket == 0)
						{
							//first select need to be on double
						   //obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
							cptallMarket++;
							//obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
						}
						else
						{
							//obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
							cptallMarket++;
						}
					}
					//select All monastery
					if (selectAlMonastery && flagClean == 0 && (int)object_class == 80 && cptallMonastery < 40 && (int)idG == 104)
					{
						if (cptallMonastery == 0)
						{
							//first select need to be on double
						   //obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
							cptallMonastery++;
							//obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
						}
						else
						{
							//obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
							cptallMonastery++;
						}
					}
					//select All trade cart
					if (selectAlltradeCarte && flagClean == 0 && (int)object_class == 70 && cptalltradeCarte < 40 &&
						(
							(int)idG == 108 || (int)idG == 128 || (int)idG == 204

							)
						)
					{
						if (cptalltradeCarte == 0)
						{
							//first select need to be on double
							//obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
							cptalltradeCarte++;
							//obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
						}
						else
						{
							//obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
							cptalltradeCarte++;
						}
					}
					//select All Dock
					if (selectAllDock && flagClean == 0 && (int)object_class == 80 && cptallDock < 40 &&
						(
							(int)idG == 45// || (int)obj->master_obj->id == 806 
							)
						)
					{
						if (cptallDock == 0)
						{
							//first select need to be on double
							//obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
							cptallDock++;
							//obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
						}
						else
						{
							//obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
							cptallDock++;
						}
					}
					//select all barack
					if (selectAllBarrack && flagClean == 0 && (int)object_class == 80 && cptallBarrack < 40 && (int)idG == 12)//barrack
					{
						if (cptallBarrack == 0)
						{
							//first select need to be on double
						   //obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
							cptallBarrack++;
							//obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
						}
						else
						{
							//obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
							cptallBarrack++;
						}
					}

					//select all stable
					if (selectAllStable && flagClean == 0 && (int)object_class == 80 && cptallStable < 40 && (int)idG == 101)//Stable  
					{
						if (cptallStable == 0)
						{
							//first select need to be on double
							//obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
							cptallStable++;
							//obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
						}
						else
						{
							//obj->selected = true;
							*(BYTE*)(void**)((size_t)obj + 0x36) = 0x1;
							*sel_list = obj;
							*sel_list++;
							cptallStable++;
						}
					}

				}
				if (selectedIdlVillager && IdleVillagers != 0 && flagClean == 0)
					*NBSelect = cptIDLEVIllager;
				if (selectAllTC && flagClean == 0)
					*NBSelect = cptTCselected;
				if (selectAllArmy && flagClean == 0)
					*NBSelect = cptArmyselected;
				if (selectAllSiegeWorkshop && flagClean == 0)
					*NBSelect = cptallSiegeWorkshop;
				if (selectAllMilitaryBuilding && flagClean == 0)
					*NBSelect = cptallMilitaryBuilding;
				if (selectAllArcheryRange && flagClean == 0)
					*NBSelect = cptallArcheryRange;
				if (selectAllCastle && flagClean == 0)
					*NBSelect = cptallCastle;
				if (selectAllDonjon && flagClean == 0)
					*NBSelect = cptallDonjon;
				if (selectAllKrepost && flagClean == 0)
					*NBSelect = cptallKrepost;
				if (selectAllMarket && flagClean == 0)
					*NBSelect = cptallMarket;
				if (selectAlMonastery && flagClean == 0)
					*NBSelect = cptallMonastery;
				if (selectAlltradeCarte && flagClean == 0)
					*NBSelect = cptalltradeCarte;
				if (selectAllDock && flagClean == 0)
					*NBSelect = cptallDock;
				if (selectAllBarrack && flagClean == 0)
					*NBSelect = cptallBarrack;
				if (selectAllStable && flagClean == 0)
					*NBSelect = cptallStable;


				//if (deleteAllSelected && flagClean == 0)
				//    *NBSelect = 0;
				if (flagClean == 0)
				{
					selectedIdlVillager = false;
					selectAllTC = false;
					selectAllArmy = false;
					selectAllSiegeWorkshop = false;
					selectAllMilitaryBuilding = false;
					selectAllArcheryRange = false;
					selectAllCastle = false;
					selectAllDonjon = false;
					selectAllKrepost = false;
					selectAllMarket = false;
					selectAlMonastery = false;
					selectAlltradeCarte = false;
					selectAllDock = false;
					selectAllBarrack = false;
					selectAllStable = false;
					deleteAllSelected = false;
				}
			}
		}
	}
	catch (const std::exception&)
	{
		return;
	}

	//else
	//printf("player is empty");
}


bool keydown(int key)
{
	Sleep(1);
	return GetAsyncKeyState(key) & 0x8000;// (GetAsyncKeyState(translteGLFW_KEY_IntoWindows(key)) & 0x8000);
}
bool keypressed(int a, int b, int c, int d)
{
	if (a == 0 && b == 0 && c == 0 && d == 0)
		return false;
	else
		return (a == 0 ? true : keydown(a)) && (b == 0 ? true : keydown(b)) && (c == 0 ? true : keydown(c)) && (d == 0 ? true : keydown(d));

	//if (a > 0 && b == 0 && c == 0 && d == 0)
	//    return keydown(a);
	//if (a > 0 && b > 0 && c == 0 && d == 0)
	//    return keydown(a) && keydown(b);
	//if (a > 0 && b > 0 && c > 0 && d == 0)
	//    return keydown(a) && keydown(b) && keydown(c);
	//if (a > 0 && b > 0 && c > 0 && d>0)
	//    return keydown(a) && keydown(b) && keydown(c) && keydown(c);
	//return false;
}
//typedef void*  (*fn_get_player)(void*);
//static inline void* get_player() {
//    fn_get_player aoc_get_player = (fn_get_player)0x5E7560;
//    return aoc_get_player(*(void**)0x7912A0);
//}

int  sub_5E7560(int a)
{
	int v1; // eax@1
	__int16 v2; // dx@2
	__int16 v3; // cx@3
	int result; // eax@5

	v1 = *(DWORD*)(a + 1060);
	if (v1 && (v2 = *(WORD*)(v1 + 72), v2 >= 1) && (v3 = *(WORD*)(v1 + 148), v3 < v2) && v3 >= 0 && !IsBadReadPtr((void*)*(DWORD*)(v1 + 76), sizeof(UINT_PTR)))
		result = *(DWORD*)(*(DWORD*)(v1 + 76) + 4 * v3);
	else
		result = 0;
	return result;
}

bool isKeyPress = false;
bool flagwaitLOAD = true;
bool noOverlay = false;
bool checkifsamehotkey(bool flag1, bool flag2)
{
	return flag1 && flag2;
}
bool arrayConf[15] = { false,false, false, false, false, false, false, false, false, false, false, false, false, false, false };

//DWORD* version;

void hotKeyActionelecting()
{
	//if (noOverlay)
	//{
	//    //Load positions of resource panel elements or revert to defaults
	//    ConfigData = LoadData();
	//    //ResetHotkeys(ConfigData);
	//    hookAoc();
	//}
		//idk how to mkae optimisation array is on esp (how to  read the pointer?)
	//005213FA   > B9 83040000    MOV ECX,0x483
	InjectHook((void*)0x5213FA, getVillagerMatrix,PATCH_JUMP);
	bool flag = true;
	//= ImGui::GetIO(); (void)io;
	void* player = NULL;
	BYTE Playerciv = NULL;

	//Sleep(3000);

			//TODO set a condition if key is pressed
		//To use only when pressing key
	//void* base_ = (void*)0x007912A0;
	//void** BaseGame_ = (void**)base_;
	//void* world_ = NULL;
	void* world;// = *(void**)(*(size_t*)0x7912A0 + 0x424);
	//void* player = get_player();
	while (true)
	{
		//version = (DWORD*)0x680A18;
		//if(*version!=0x11)          
		//    *version = 0x11;
		//if(BaseGame_ == NULL)
		//BaseGame_ = (void**)base_;
		//if (BaseGame_ != NULL && !IsBadReadPtr((void*)(*BaseGame_), sizeof(UINT_PTR)))//world_ == NULL && (*BaseGame_) != NULL)
		//    world_ =  (void*)((size_t)BaseGame_ + 0x424); ;//MOV EAX,DWORD PTR DS:[ECX+424]
		//else //continue;

		//unsigned int* _base = (unsigned int*)*BaseGame + 0x424;
		//unsigned int IndexCurrentPlayer = (unsigned int)*_base + 0x4C;


		if (!IsBadReadPtr((void*)(void**)(*(size_t*)0x7912A0), sizeof(UINT_PTR))
			&& !IsBadReadPtr((void*)*(void**)(*(size_t*)0x7912A0 + 0x424), sizeof(UINT_PTR))
			&& (world = *(void**)(*(size_t*)0x7912A0 + 0x424))
			&& !IsBadReadPtr((void*)*(void**)(*(size_t*)world + 0x48), sizeof(UINT_PTR))
			&& *(void**)(*(size_t*)0x7912A0 + 0x424) != NULL)
		{
			/*
			 world = *(void**)(*(size_t*)0x7912A0 + 0x424);
			 //MOV DX,WORD PTR DS:[EAX+48]
				player = get_player();
				IndexCurrentPlayer = (int)(void*)((size_t)world + 0x94); //005E7574  |. 66:8B88 940000>MOV CX,WORD PTR DS:[EAX+94]

*/
			player = (void*)sub_5E7560((int)*(void**)0x7912A0);
			//else
			//    //continue;
			//EnterCriticalSection(&cs_Civ);
			if (player != NULL && !IsBadReadPtr((void*)((size_t)player + 0x15D), sizeof(UINT_PTR)))
				Playerciv = (BYTE) * (void**)((size_t)player + 0x15D);
			//else
			//{
			//    //continue;
			//}
			//LeaveCriticalSection(&cs_Civ);




			if (keypressed(Hotkeys[0][0], Hotkeys[0][1], Hotkeys[0][2], Hotkeys[0][3]))//0 Select all idle villagers
			{
				//printf("villager \n");
				selectedIdlVillager = true;
				flagClean = 0x1;
				isKeyPress = true;
			}
			if (isKeyPress && selectedIdlVillager)
			{
				world = *(void**)(*(size_t*)0x7912A0 + 0x424);
				player = (void*)sub_5E7560((int)*(void**)0x7912A0); //get_player();
				Playerciv = (BYTE) * (void**)((size_t)player + 0x15D);
				ManageSelection((int)IndexCurrentPlayer, player, (int)Playerciv);
				continue; if (flagClean == 0) isKeyPress = false;
			}
			if (keypressed(Hotkeys[3][0], Hotkeys[3][1], Hotkeys[3][2], Hotkeys[3][3]))//3: Select all Town Centers  
			{
				selectAllTC = true;
				flagClean = 0x1;
				isKeyPress = true;
			}
			if (isKeyPress && selectAllTC)
			{
				world = *(void**)(*(size_t*)0x7912A0 + 0x424);
				player = (void*)sub_5E7560((int)*(void**)0x7912A0); //get_player();
				Playerciv = (BYTE) * (void**)((size_t)player + 0x15D);
				ManageSelection((int)IndexCurrentPlayer, player, (int)Playerciv);
				continue; if (flagClean == 0) isKeyPress = false;
			}
			if (keypressed(Hotkeys[1][0], Hotkeys[1][1], Hotkeys[1][2], Hotkeys[1][2]))//1: Select all idle army
			{
				selectAllArmy = true;
				flagClean = 0x1;
				isKeyPress = true;
			}
			if (isKeyPress && selectAllArmy)
			{
				world = *(void**)(*(size_t*)0x7912A0 + 0x424);
				player = (void*)sub_5E7560((int)*(void**)0x7912A0); //get_player();
				Playerciv = (BYTE) * (void**)((size_t)player + 0x15D);
				ManageSelection((int)IndexCurrentPlayer, player, (int)Playerciv);
				continue; if (flagClean == 0) isKeyPress = false;
			}
			if (keypressed(Hotkeys[7][0], Hotkeys[7][1], Hotkeys[7][2], Hotkeys[7][3]))//7: Select all Siege Workshops 
			{
				selectAllSiegeWorkshop = true;
				flagClean = 0x1;
				isKeyPress = true;
			}
			if (isKeyPress && selectAllSiegeWorkshop)
			{
				world = *(void**)(*(size_t*)0x7912A0 + 0x424);
				player = (void*)sub_5E7560((int)*(void**)0x7912A0); //get_player();
				Playerciv = (BYTE) * (void**)((size_t)player + 0x15D);
				ManageSelection((int)IndexCurrentPlayer, player, (int)Playerciv);
				continue; if (flagClean == 0) isKeyPress = false;
			}

			if (keypressed(Hotkeys[14][0], Hotkeys[14][1], Hotkeys[14][2], Hotkeys[14][3]))////14: Select all Military buildings (default Ctrl+A)
			{
				selectAllMilitaryBuilding = true;
				flagClean = 0x1;
				isKeyPress = true;
			}
			if (isKeyPress && selectAllMilitaryBuilding)
			{
				world = *(void**)(*(size_t*)0x7912A0 + 0x424);
				player = (void*)sub_5E7560((int)*(void**)0x7912A0); //get_player();
				Playerciv = (BYTE) * (void**)((size_t)player + 0x15D);
				ManageSelection((int)IndexCurrentPlayer, player, (int)Playerciv);
				continue; if (flagClean == 0) isKeyPress = false;
			}
			if (keypressed(Hotkeys[5][0], Hotkeys[5][1], Hotkeys[5][2], Hotkeys[5][3]))//5: Select all Archery Ranges 
			{
				selectAllArcheryRange = true;
				flagClean = 0x1;
				isKeyPress = true;
			}
			if (isKeyPress && selectAllArcheryRange)
			{
				world = *(void**)(*(size_t*)0x7912A0 + 0x424);
				player = (void*)sub_5E7560((int)*(void**)0x7912A0); //get_player();
				Playerciv = (BYTE) * (void**)((size_t)player + 0x15D);
				ManageSelection((int)IndexCurrentPlayer, player, (int)Playerciv);
				continue; if (flagClean == 0) isKeyPress = false;
			}
			if (keypressed(Hotkeys[11][0], Hotkeys[11][1], Hotkeys[11][2], Hotkeys[11][3]))//11: Select all Castles 
			{
				selectAllCastle = true;
				flagClean = 0x1;
				isKeyPress = true;
			}
			if (isKeyPress && selectAllCastle)
			{
				world = *(void**)(*(size_t*)0x7912A0 + 0x424);
				player = (void*)sub_5E7560((int)*(void**)0x7912A0); //get_player();
				Playerciv = (BYTE) * (void**)((size_t)player + 0x15D);
				ManageSelection((int)IndexCurrentPlayer, player, (int)Playerciv);
				continue; if (flagClean == 0) isKeyPress = false;
			}
			if (keypressed(Hotkeys[13][0], Hotkeys[13][1], Hotkeys[13][2], Hotkeys[13][3]))//13: Select all Donjon 
			{
				selectAllDonjon = true;
				flagClean = 0x1;
				isKeyPress = true;
			}
			if (isKeyPress && selectAllDonjon)
			{
				world = *(void**)(*(size_t*)0x7912A0 + 0x424);
				player = (void*)sub_5E7560((int)*(void**)0x7912A0); //get_player();
				Playerciv = (BYTE) * (void**)((size_t)player + 0x15D);
				ManageSelection((int)IndexCurrentPlayer, player, (int)Playerciv);
				continue; if (flagClean == 0) isKeyPress = false;
			}
			if (keypressed(Hotkeys[12][0], Hotkeys[12][1], Hotkeys[12][2], Hotkeys[12][3]))//12: Select all Krepost 
			{
				selectAllKrepost = true;
				flagClean = 0x1;
				isKeyPress = true;
			}
			if (isKeyPress && selectAllKrepost)
			{
				world = *(void**)(*(size_t*)0x7912A0 + 0x424);
				player = (void*)sub_5E7560((int)*(void**)0x7912A0); //get_player();
				Playerciv = (BYTE) * (void**)((size_t)player + 0x15D);
				ManageSelection((int)IndexCurrentPlayer, player, (int)Playerciv);
				continue; if (flagClean == 0) isKeyPress = false;
			}
			if (keypressed(Hotkeys[9][0], Hotkeys[9][1], Hotkeys[9][2], Hotkeys[9][3]))//9: Select all Markets
			{
				selectAllMarket = true;
				flagClean = 0x1;
				isKeyPress = true;
			}
			if (isKeyPress && selectAllMarket)
			{
				world = *(void**)(*(size_t*)0x7912A0 + 0x424);
				player = (void*)sub_5E7560((int)*(void**)0x7912A0); //get_player();
				Playerciv = (BYTE) * (void**)((size_t)player + 0x15D);
				ManageSelection((int)IndexCurrentPlayer, player, (int)Playerciv);
				continue; if (flagClean == 0) isKeyPress = false;
			}
			if (keypressed(Hotkeys[10][0], Hotkeys[10][1], Hotkeys[10][2], Hotkeys[10][3]))//10: Select all Monasteries
			{
				selectAlMonastery = true;
				flagClean = 0x1;
				isKeyPress = true;
			}
			if (isKeyPress && selectAlMonastery)
			{
				world = *(void**)(*(size_t*)0x7912A0 + 0x424);
				player = (void*)sub_5E7560((int)*(void**)0x7912A0); //get_player();
				Playerciv = (BYTE) * (void**)((size_t)player + 0x15D);
				ManageSelection((int)IndexCurrentPlayer, player, (int)Playerciv);
				continue; if (flagClean == 0) isKeyPress = false;
			}
			if (keypressed(Hotkeys[2][0], Hotkeys[2][1], Hotkeys[2][2], Hotkeys[2][3]))//2: Select all trade carts 
			{
				selectAlltradeCarte = true;
				flagClean = 0x1;
				isKeyPress = true;
			}
			if (isKeyPress && selectAlltradeCarte)
			{
				world = *(void**)(*(size_t*)0x7912A0 + 0x424);
				player = (void*)sub_5E7560((int)*(void**)0x7912A0); //get_player();
				Playerciv = (BYTE) * (void**)((size_t)player + 0x15D);
				ManageSelection((int)IndexCurrentPlayer, player, (int)Playerciv);
				continue; if (flagClean == 0) isKeyPress = false;
			}
			if (keypressed(Hotkeys[8][0], Hotkeys[8][1], Hotkeys[8][2], Hotkeys[8][3]))//8: Select all Docks 
			{
				selectAllDock = true;
				flagClean = 0x1;
				isKeyPress = true;
			}
			if (isKeyPress && selectAllDock)
			{
				world = *(void**)(*(size_t*)0x7912A0 + 0x424);
				player = (void*)sub_5E7560((int)*(void**)0x7912A0); //get_player();
				Playerciv = (BYTE) * (void**)((size_t)player + 0x15D);
				ManageSelection((int)IndexCurrentPlayer, player, (int)Playerciv);
				continue; if (flagClean == 0) isKeyPress = false;
			}
			if (keypressed(Hotkeys[4][0], Hotkeys[4][1], Hotkeys[4][2], Hotkeys[4][3]))//4: Select all Barracks 
			{
				selectAllBarrack = true;
				flagClean = 0x1;
				isKeyPress = true;
			}
			if (isKeyPress && selectAllBarrack)
			{
				world = *(void**)(*(size_t*)0x7912A0 + 0x424);
				player = (void*)sub_5E7560((int)*(void**)0x7912A0); //get_player();
				Playerciv = (BYTE) * (void**)((size_t)player + 0x15D);
				ManageSelection((int)IndexCurrentPlayer, player, (int)Playerciv);
				continue; if (flagClean == 0) isKeyPress = false;
			}
			if (keypressed(Hotkeys[6][0], Hotkeys[6][1], Hotkeys[6][2], Hotkeys[6][3]))//6: Select all Stables
			{
				selectAllStable = true;
				flagClean = 0x1;
				isKeyPress = true;
			}
			if (isKeyPress && selectAllStable)
			{
				world = *(void**)(*(size_t*)0x7912A0 + 0x424);
				player = (void*)sub_5E7560((int)*(void**)0x7912A0); //get_player();
				Playerciv = (BYTE) * (void**)((size_t)player + 0x15D);
				ManageSelection((int)IndexCurrentPlayer, player, (int)Playerciv);
				continue; if (flagClean == 0) isKeyPress = false;
			}
			if (keypressed(VK_DELETE, VK_MENU, 0, 0))//&& (GetAsyncKeyState() || GetAsyncKeyState(VK_LSHIFT)))//Alt+delete
			{
				deleteAllSelected = true;
				isKeyPress = true;
			}
			if (isKeyPress && deleteAllSelected)
			{
				world = *(void**)(*(size_t*)0x7912A0 + 0x424);
				player = (void*)sub_5E7560((int)*(void**)0x7912A0); //get_player();
				Playerciv = (BYTE) * (void**)((size_t)player + 0x15D);
				ManageSelection((int)IndexCurrentPlayer, player, (int)Playerciv);
				continue; if (flagClean == 0) isKeyPress = false;
			}
			/*
			if (isKeyPress)
			{
					world = *(void**)(*(size_t*)0x7912A0 + 0x424);
					player = (void*)sub_5E7560((int)*(void**)0x7912A0); //get_player();
					Playerciv = (BYTE) * (void**)((size_t)player + 0x15D);
					ManageSelection((int)IndexCurrentPlayer, player, (int)Playerciv);
			}

			if (flagClean == 0) isKeyPress = false;*/

		}
	}
}
//00447B70 / $ 81EC E0000000  SUB ESP, 0E0
//00447B76 | . 8B8424 E400000 > MOV EAX, DWORD PTR SS : [ESP + E4]
//00447B7D | . 53             PUSH EBX
//00447B7E | . 55             PUSH EBP

//004481FE   |. 83C4 18        ADD ESP,18



//004F7C24    . E8 67780900    CALL age2_x1_.0058F490                                ; \age2_x1_.0058F490

//004F7C46    . 8D4424 24      LEA EAX, DWORD PTR SS : [ESP + 24]
//004F7C4A    . 50             PUSH EAX
//004F7C4B.E8 60FC0400    CALL age2_x1_.005478B0
//004F7C50    . 8B8D 2C080000  MOV ECX, DWORD PTR SS : [EBP + 82C]
//16784, "Select_all Idle_villagers"
//16785, "Select all Idle_military"
//16786, "Select all Trade_carts"
//16787, "Select all Town_centers"
//16788, "Select all Barracks"
//16789, "Select all Archery ranges"
//16790, "Select all Stables"
//16791, "Select all Siege_workshops"
//16792, "Select all Docks"
//16793, "Select all Markets"
//16794, "Select all Monasteries"
//16795, "Select all Castles"
//16796, "Select all Kreposts"
//16797, "Select all Donjons"
//16798, "Select all Military_Buildings"
//get id item list
//004F7C24   . E8 67780900    CALL age2_x1_.0058F490                   ; \age2_x1_.0058F490
DWORD idItemMenu = 0x0;
DWORD _4_0058F490 = 0x058F490;
DWORD _004F7C29 = 0x04F7C29;

void __declspec(naked)  getMenuItemid()
{
	__asm {
		MOV idItemMenu, EDX
		CALL _4_0058F490; \age2_x1_.0058F490
		JMP _004F7C29
	}
}
//get item id
// 004F7C3F   . 8B8D 2C080000  MOV ECX, DWORD PTR SS : [EBP + 82C]

DWORD idItem = 0x0;
DWORD _004F7C45 = 0x04F7C45;
//00447B76  |. 8B8424 E400000>MOV EAX,DWORD PTR SS:[ESP+E4]

void __declspec(naked)  getItemId()
{
	__asm {
		MOV ECX, DWORD PTR SS : [EBP + 82Ch]
		MOV idItem, EDX
		JMP _004F7C45
	}
}

void saveInFileConfig()
{
	ofstream myfile("Voobly Mods\\AOC\\Patches\\v1.5 RC DE features\\config.ini");
	if (myfile.is_open())
	{
		//myfile << "This is a line.\n";
		//myfile << "This is another line.\n";
		for (int i = 0; i < 15; i++) {
			for (int j = 0; j < 3; j++)
			{
				myfile << Hotkeys[i][j] << " ";
			}
			myfile << "\n";
		}
		myfile.close();
	}

}
//0: Select all idle villagers(default Ctrl + .)
//1 : Select all idle army(default Ctrl + , )
//2 : Select all trade carts(default Ctrl + M)
//3 : Select all Town Centers(default Ctrl + H)
//4 : Select all Barracks(default Ctrl + Q)
//5 : Select all Archery Ranges(default Ctrl + W)
//6 : Select all Stables(default Ctrl + E)
//7 : Select all Siege Workshops(default Ctrl + R)
//8 : Select all Docks(default Ctrl + T)
//9 : Select all Markets(default Ctrl + D)
//10 : Select all Monasteries(default Ctrl + F)
//11 : Select all Castles(default Ctrl + C)
//12 : Select all Krepost(default Ctrl + V)
//13 : Select all Donjon(default Ctrl + V)
//14 : Select all Military buildings(default Ctrl + A)
//13: Select all idle villagers(default Ctrl + .)

//0: Select all idle villagers (default Ctrl+.)
//1 : Select all idle army(default Ctrl + , )
//2 : Select all trade carts(default Ctrl + M)
//3 : Select all Town Centers(default Ctrl + H)
//4 : Select all Barracks(default Ctrl + Q)
//5 : Select all Archery Ranges(default Ctrl + W)
//6 : Select all Stables(default Ctrl + E)
//7 : Select all Siege Workshops(default Ctrl + R)
//8 : Select all Docks(default Ctrl + T)
//9 : Select all Markets(default Ctrl + D)
//10 : Select all Monasteries(default Ctrl + F)
//11 : Select all Castles(default Ctrl + C)
//12 : Select all Krepost(default Ctrl + V)
//13 : Select all Donjon(default Ctrl + V)
//14 : Select all Military buildings(default Ctrl + A)
int getRealId(int id)
{
	switch (id)
	{
	case 0:
		return 5;//5 : Select all Archery Ranges(default Ctrl + W)
		break;
	case 1:
		return 4;//4 : Select all Barracks(default Ctrl + Q)
		break;
	case 2:
		return 11;//11 : Select all Castles(default Ctrl + C)
		break;
	case 3:
		return 8;//8 : Select all Docks(default Ctrl + T)
		break;
	case 4:
		return 13;//13 : Select all Donjon(default Ctrl + V)
		break;
	case 5:
		return 1;//1 : Select all idle army(default Ctrl + , )
		break;
	case 6:
		return 12;//12 : Select all Krepost(default Ctrl + V)
		break;
	case 7:
		return 9;//9 : Select all Markets(default Ctrl + D)
		break;
	case 8:
		return 14;//14 : Select all Military buildings(default Ctrl + A)
		break;
	case 9:
		return 10;//10 : Select all Monasteries(default Ctrl + F)
		break;
	case 10:
		return 7;//7 : Select all Siege Workshops(default Ctrl + R)
		break;
	case 11:
		return 6;//6 : Select all Stables(default Ctrl + E)
		break;
	case 12:
		return 3;//3 : Select all Town Centers(default Ctrl + H)
		break;
	case 13:
		return 2;//2 : Select all trade carts(default Ctrl + M)
		break;
	case 14:
		return 0;//0: Select all idle villagers (default Ctrl+.)
		break;
	default:
		return 100;
		break;
	}

}
//get keyInout
//004F7C4B   . E8 60FC0400    CALL age2_x1_.005478B0
DWORD _005478B0 = 0x05478B0;
DWORD key = 0x0;
DWORD EspKey;
void updateHoteKey()
{
	int i = getRealId((int)idItem);
	Hotkeys[i][0] = 0x0;
	Hotkeys[i][1] = 0x0;
	Hotkeys[i][2] = 0x0;
	Hotkeys[i][0] = key; //au moins une touch de racoursie 
	if (GetAsyncKeyState(VK_LCONTROL))
	{
		Hotkeys[i][1] = VK_LCONTROL;
	}
	if (GetAsyncKeyState(VK_CONTROL))
	{
		Hotkeys[i][1] = VK_CONTROL;
	}
	if (GetAsyncKeyState(VK_MENU))
	{
		Hotkeys[i][1] = VK_MENU;
	}
	if (GetAsyncKeyState(VK_LMENU))
	{
		Hotkeys[i][2] = VK_LMENU;
	}
	if (GetAsyncKeyState(VK_LMENU))
	{
		Hotkeys[i][2] = VK_LMENU;
	}
	if (GetAsyncKeyState(VK_LSHIFT))
	{
		Hotkeys[i][1] = VK_LSHIFT;
	}
	if (GetAsyncKeyState(VK_RSHIFT))
	{
		Hotkeys[i][1] = VK_RSHIFT;
	}

	if (GetAsyncKeyState(VK_MENU) && GetAsyncKeyState(VK_CONTROL))
	{
		Hotkeys[i][1] = VK_CONTROL;
		Hotkeys[i][2] = VK_MENU;
	}
	if (GetAsyncKeyState(VK_LMENU) && GetAsyncKeyState(VK_LCONTROL))
	{
		Hotkeys[i][1] = VK_LCONTROL;
		Hotkeys[i][2] = VK_LMENU;
	}
	if (GetAsyncKeyState(VK_LMENU) && GetAsyncKeyState(VK_CONTROL))
	{
		Hotkeys[i][1] = VK_CONTROL;
		Hotkeys[i][2] = VK_LMENU;
	}
	if (GetAsyncKeyState(VK_MENU) && GetAsyncKeyState(VK_LCONTROL))
	{
		Hotkeys[i][1] = VK_LCONTROL;
		Hotkeys[i][2] = VK_MENU;
	}

	if (GetAsyncKeyState(VK_MENU) && GetAsyncKeyState(VK_LSHIFT))
	{
		Hotkeys[i][1] = VK_LSHIFT;
		Hotkeys[i][2] = VK_MENU;
	}
	if (GetAsyncKeyState(VK_LCONTROL) && GetAsyncKeyState(VK_LSHIFT))
	{
		Hotkeys[i][1] = VK_LSHIFT;
		Hotkeys[i][2] = VK_LCONTROL;
	}
	if (GetAsyncKeyState(VK_MENU) && GetAsyncKeyState(VK_RSHIFT))
	{
		Hotkeys[i][1] = VK_MENU;
		Hotkeys[i][2] = VK_RSHIFT;
	}
	if (GetAsyncKeyState(VK_LCONTROL) && GetAsyncKeyState(VK_RSHIFT))
	{
		Hotkeys[i][1] = VK_LCONTROL;
		Hotkeys[i][2] = VK_RSHIFT;
	}
	//if (GetAsyncKeyState(VK_SCROLL))
	//{
	//    Hotkeys[i][1] = VK_SCROLL;
	//} 
	//if (GetAsyncKeyState(VK_MBUTTON))
	//{
	//    Hotkeys[i][1] = VK_MBUTTON;
	//}
	//if (GetAsyncKeyState(VK_XBUTTON1))
	//{
	//    Hotkeys[i][1] = VK_XBUTTON1;
	//}    
	//if (GetAsyncKeyState(VK_XBUTTON2))
	//{
	//    Hotkeys[i][1] = VK_XBUTTON2;
	//}


	//if (GetAsyncKeyState(WM_MOUSEHWHEEL) )
	//{
	//    Hotkeys[i][2] = WM_MOUSEHWHEEL;
	//}
	//if (GetAsyncKeyState(WM_MOUSEWHEEL))


	//Hotkeys[i][2]=0;

	////////saveInFileConfig();
}
DWORD _updateHoteKey = (DWORD)updateHoteKey;
DWORD EAXKEY;
DWORD ECXKEY;
DWORD EDXKEY;
DWORD _004F7C50 = 0x04F7C50;
//0x04F7C4B
void __declspec(naked)  getKeyInput()
{
	__asm {
		CMP idItemMenu, 011h
		JNZ normale
		//MOV flagClean,1h
		MOV key, EBX
		MOV EAXKEY, EAX
		MOV ECXKEY, ECX
		MOV EDXKEY, EDX

		call _updateHoteKey
		MOV ECX, ECXKEY
		MOV EDX, EDXKEY
		MOV EAX, EAXKEY
		//MOV flagClean,0
		normale :
		CALL _005478B0
			JMP _004F7C50
	}
}


//004F74AE  |. E8 BD06F5FF    |CALL age2_x1_.00447B70                             ; \age2_x1_.00447B70
//004F796A   . 8BF8           MOV EDI,EAX


//00519F3B | . 68 31100000    PUSH 1031
//00519F40 | . 8B01           MOV EAX, DWORD PTR DS : [ECX]
//00519F42 | .FF50 24        CALL DWORD PTR DS : [EAX + 24]


//004F74AE  |. E8 BD06F5FF    |CALL age2_x1_.00447B70                             ; \age2_x1_.00447B70
//004F796A   . 8BF8           MOV EDI,EAX

//0058F23A.E8 1136FBFF    CALL age2_x1_.00542850; \age2_x1_.00542850
//0058F23F   . 83C4 0C        ADD ESP, 0C
DWORD _00542850 = 0x0542850;
DWORD _0058F23F = 0x058F23F;
DWORD hki_EDX;
//02442940  56 00 00 00 | 90 41 00 00  V... A..
//02442948  00 00 01 00 | 44 00 00 00  ... D...
//02442950  91 41 00 00 | 00 00 01 00  ‘A.. ...
//02442958  53 00 00 00 | 92 41 00 00  S... ’A..
//02442960  00 00 01 00 | 46 00 00 00  ... F...
//02442968  93 41 00 00 | 00 00 01 00  “A.. ...
//02442970  58 00 00 00 | 94 41 00 00  X... ”A..
//02442978  00 00 01 00 | 4C 00 00 00  ... L...
//02442980  95 41 00 00 | 00 00 00 00  •A.. ....
//02442988  41 00 00 00 | 96 41 00 00  A... –A..
//02442990  00 00 01 00 | 5A 00 00 00  ... Z...
//02442998  97 41 00 00 | 00 00 01 00  —A.. ...
//024429A0  52 00 00 00 | 98 41 00 00  R... ˜A..
//024429A8  00 00 01 00 | 54 00 00 00  ... T...
//024429B0  99 41 00 00 | 00 00 01 00  ™A.. ...
//024429B8  47 00 00 00 | 9A 41 00 00  G... šA..
//024429C0  00 00 01 00 | 59 00 00 00  ... Y...
//024429C8  9B 41 00 00 | 00 00 01 00  ›A.. ...
//024429D0  4B 00 00 00 | 9C 41 00 00  K... œA..
//024429D8  00 00 01 00 | 4D 00 00 00  ... M...
//024429E0  9D 41 00 00 | 00 00 01 00  A... ..
//024429E8  53 00 00 00 | 9E 41 00 00  S... žA..
//024429F0  00 00 01 00 | 5C 0D 70 02  ... \.p
//0244294C‬ - 02442940 = 0C  =12            
//024429F0 - 02442940 = B0  =176
//16784, "Select_all Idle_villagers"
//16785, "Select all Idle_military"
//16786, "Select all Trade_carts"
//16787, "Select all Town_centers"
//16788, "Select all Barracks"
//16789, "Select all Archery ranges"
//16790, "Select all Stables"
//16791, "Select all Siege_workshops"
//16792, "Select all Docks"
//16793, "Select all Markets"
//16794, "Select all Monasteries"
//16795, "Select all Castles"
//16796, "Select all Kreposts"
//16797, "Select all Donjons"
//16798, "Select all Military_Buildings"
//}
//16770, "V"
//16771, "D"
//16772, "S"
//16773, "F"
//16774, "X"
//16775, "C"
//16776, "A"
//16777, "Z"
//16778, "R"
//16779, "T"
//16780, "G"
//16781, "Y"
//16782, "K"
BYTE* arrHki_EDX = {};//[176] 
void fillHotKeyArray()
{
	arrHki_EDX = (BYTE*)hki_EDX;
	//arrHki_EDX[0]=0;
	int cmpt = 0;
	for (int i = 0; i <= 176; i = i + 0x0C)
	{
		Hotkeys[cmpt][0] = 0x0;
		Hotkeys[cmpt][1] = 0x0;
		Hotkeys[cmpt][2] = 0x0;
		Hotkeys[cmpt][3] = 0x0;
		Hotkeys[cmpt][0] = arrHki_EDX[i];
		//CTRL-
		if (arrHki_EDX[i + 0x8] == 0x1)
		{
			Hotkeys[cmpt][3] = VK_LCONTROL;
		}
		//ALT-
		if (arrHki_EDX[i + 0x8 + 0x1] == 0x1)
		{
			Hotkeys[cmpt][2] = VK_LMENU;
		}
		//MAJ-
		if (arrHki_EDX[i + 0x8 + 0x1 + 0x1] == 0x1)
		{
			Hotkeys[cmpt][1] = VK_LSHIFT;
		}
		cmpt++;
		if (cmpt == 15)
			break;
	}



}
//0x058F23A
void __declspec(naked)  getKeyOnHkiFile()
{
	__asm {
		CMP EBX, 11h//select all hki
		JE _hki
		CALL _00542850
		JMP _0058F23F
		_hki :
		MOV hki_EDX, EDX//pointer that will contain hotkey value
			CALL _00542850
			//0058F22B   . 8B4E 0C        MOV ECX,DWORD PTR DS:[ESI+C]
			MOV ECX, hki_EDX
			call fillHotKeyArray


			JMP _0058F23F

	}
}



void keyInputHook()
{
	//loadhotkey hki
	InjectHook((void*)0x058F23A, getKeyOnHkiFile,PATCH_JUMP);

	//update ket
	InjectHook((void*)0x04F7C24, getMenuItemid, PATCH_JUMP);
	InjectHook((void*)0x04F7C3F, getItemId, PATCH_JUMP);
	InjectHook((void*)0x04F7C4B, getKeyInput, PATCH_JUMP);
}
 
DWORD WINAPI hotKeyActionelectingThread(LPVOID lpReserved)
{
	//no need we get from .hki file now 
	//////loadHotKey();
	hotKeyActionelecting();
	return 0;
}

void selectAllProc(HMODULE hModule)
{

	hookAoc();
	keyInputHook();

	//all to select double click selecting stone wall and palisade wall
//0042FC2C     66:837A 16 1B  CMP WORD PTR DS : [EDX + 16] , 1B
//0042FC31     0F84 06010000  JE age2_x1_.0042FD3D
//if(isDefeaturePatch)
// Nop(0x042FC2C, 11);
	CreateThread(nullptr, 0, hotKeyActionelectingThread, hModule, 0, nullptr);
}



//004BE464   . 83F8 0E        CMP EAX, 0E;  Switch(cases 0..E)  0E = 14

//004BEEB1   . E8 DA050D00    CALL age2_x1.0058F490                    ; \age2_x1.0058F490
DWORD _0058F490 = 0x058F490;
DWORD _004BEEB6 = 0x04BEEB6;
void __declspec(naked)  SetHootKeyList004BEEB1()
{
	__asm {
		CALL _0058F490
		PUSH 42C5h
		PUSH 0h
		PUSH 0h
		PUSH 0h; | Arg4 = 00000000
		PUSH 46h; | Arg3 = 00000041
		PUSH 0h; | Arg2 = 00000000
		PUSH 7h; | Arg1 = 00000007 //archery range or 7 th item?
		CALL _0058F490; \age2_x1.0058F490
		JMP _004BEEB6

	}
}

//004BC667   . 5E             POP ESI
//004BC668.C3             RETN
DWORD arrayUnitkey[] = {
	//user patch copyed value
	 0x3F3A,0x4B0C,0x1C,0x3
	,0x3F1F,0x4A83,0x1D,0x3
	,0x4021,0x4A58,0x4,0x7
	,0x403D,0x4A68,0x4,0x9
	//smith
	//,0x403D,0x4A68,0x10,0x0
	,0x415E,0x4A84,0x10,0x0
	,0x415F,0x4A85,0x10,0x1
	,0x4035,0x4A86,0x10,0x2
	,0x4036,0x4A87,0x10,0x3
	,0x4037,0x4A87,0x10,0x4
};
DWORD _0058F6B0 = 0x058F6B0;
DWORD _004BC0B1 = 0x04BC0B1;
//004BC0AC  |. E8 FF350D00    CALL age2_x1.0058F6B
void __declspec(naked)  SetHootKeyList004BC0AC()
{
	__asm {
		CALL _0058F6B0
		/*//Town center
		PUSH 4E24h
		PUSH 0Fh
		MOV ECX, ESI
		CALL _0058F6B0*/
		//Black Smith
		PUSH 4E26h
		PUSH 0Fh
		MOV ECX, ESI
		CALL _0058F6B0
		//University
		PUSH 4E33h
		PUSH 10h
		MOV ECX, ESI
		CALL _0058F6B0
		//select All
		PUSH 4E34h
		PUSH 11h
		MOV ECX, ESI
		CALL _0058F6B0
		/*//Monastery
		PUSH 4E2Ch
		PUSH 12h
		MOV ECX, ESI
		CALL _0058F6B0*/
		JMP _004BC0B1
	}
}

//4A82->19074 reseed   4E31->20017 mill
//004BCE8C  |. E8 DF270D00    CALL age2_x1.0058F670
DWORD _0058F670 = 0x058F670;
DWORD _004BCE91 = 0x04BCE91;

void __declspec(naked)  SetHootKeyList004BCE8C()
{
	__asm {
		CALL _0058F670

		//black smith
		PUSH 4A84h
		PUSH 0
		PUSH 0Fh
		MOV ECX, ESI
		CALL _0058F670
		PUSH 4A85h
		PUSH 1h
		PUSH 0Fh
		MOV ECX, ESI
		CALL _0058F670
		PUSH 4A86h
		PUSH 2h
		PUSH 0Fh
		MOV ECX, ESI
		CALL _0058F670
		PUSH 4A87h
		PUSH 3h
		PUSH 0Fh
		MOV ECX, ESI
		CALL _0058F670
		PUSH 4A88h
		PUSH 4h
		PUSH 0Fh
		MOV ECX, ESI
		CALL _0058F670
		//University
		PUSH 4AB6h
		PUSH 0h
		PUSH 10h//11h
		MOV ECX, ESI
		CALL _0058F670
		PUSH 4AB7h
		PUSH 1h
		PUSH 10h//11h
		MOV ECX, ESI
		CALL _0058F670
		PUSH 4AB8h
		PUSH 2h
		PUSH 10h//11h
		MOV ECX, ESI
		CALL _0058F670
		PUSH 4ABDh
		PUSH 3h
		PUSH 10h//11h
		MOV ECX, ESI
		CALL _0058F670
		PUSH 4AB9h
		PUSH 4h
		PUSH 10h//11h
		MOV ECX, ESI
		CALL _0058F670
		PUSH 4ABAh
		PUSH 5h
		PUSH 10h//11h
		MOV ECX, ESI
		CALL _0058F670
		PUSH 4ABBh
		PUSH 6h
		PUSH 10h//11h
		MOV ECX, ESI
		CALL _0058F670
		PUSH 4ABCh
		PUSH 7h
		PUSH 10h//11h
		MOV ECX, ESI
		CALL _0058F670
		PUSH 4ABEh
		PUSH 8h
		PUSH 10h//11h
		MOV ECX, ESI
		CALL _0058F670
		PUSH 4ABFh
		PUSH 9h
		PUSH 10h//11h
		MOV ECX, ESI
		CALL _0058F670
		PUSH 4AC0h
		PUSH 0Ah
		PUSH 10h//11h
		MOV ECX, ESI
		CALL _0058F670
		//select ALL

		//16784
		PUSH 4190h
		PUSH 0h
		PUSH 11h
		MOV ECX, ESI
		CALL _0058F670
		PUSH 4191h
		PUSH 1h
		PUSH 11h
		MOV ECX, ESI
		CALL _0058F670
		PUSH 4192h
		PUSH 2h
		PUSH 11h
		MOV ECX, ESI
		CALL _0058F670
		PUSH 4193h
		PUSH 3h
		PUSH 11h
		MOV ECX, ESI
		CALL _0058F670
		PUSH 4194h
		PUSH 4h
		PUSH 11h
		MOV ECX, ESI
		CALL _0058F670
		PUSH 4195h
		PUSH 5h
		PUSH 11h
		MOV ECX, ESI
		CALL _0058F670
		PUSH 4196h
		PUSH 6h
		PUSH 11h
		MOV ECX, ESI
		CALL _0058F670
		PUSH 4197h
		PUSH 7h
		PUSH 11h
		MOV ECX, ESI
		CALL _0058F670
		PUSH 4198h
		PUSH 8h
		PUSH 11h
		MOV ECX, ESI
		CALL _0058F670
		PUSH 4199h
		PUSH 9h
		PUSH 11h
		MOV ECX, ESI
		CALL _0058F670
		PUSH 419Ah
		PUSH 0Ah
		PUSH 11h
		MOV ECX, ESI
		CALL _0058F670
		PUSH 419Bh
		PUSH 0Bh
		PUSH 11h
		MOV ECX, ESI
		CALL _0058F670
		PUSH 419Ch
		PUSH 0Ch
		PUSH 11h
		MOV ECX, ESI
		CALL _0058F670
		PUSH 419Dh
		PUSH 0Dh
		PUSH 11h
		MOV ECX, ESI
		CALL _0058F670
		PUSH 419Eh
		PUSH 0Eh
		PUSH 11h
		MOV ECX, ESI
		CALL _0058F670
		JMP _004BCE91

	}
}
//004BCD8C  |. E8 DF280D00    CALL age2_x1.0058F670

DWORD _004BCD91 = 0x04BCD91;
void __declspec(naked)  SetHootKeyList004BCD8CMonastary()
{
	__asm {
		CALL _0058F670
		//monastary
		PUSH 4AACh
		PUSH 2h
		PUSH 0Ah//12h
		MOV ECX, ESI
		CALL _0058F670
		PUSH 4AADh
		PUSH 03h
		PUSH 0Ah//12h
		MOV ECX, ESI
		CALL _0058F670
		PUSH 4AAEh
		PUSH 04h
		PUSH 0Ah//12h
		MOV ECX, ESI
		CALL _0058F670
		PUSH 4AAFh
		PUSH 05h
		PUSH 0Ah//12h
		MOV ECX, ESI
		CALL _0058F670
		/*PUSH 4AAFh
		PUSH 05h
		PUSH 12h
		MOV ECX, ESI
		CALL _0058F670*/
		PUSH 4AB0h
		PUSH 06h
		PUSH 0Ah//12h
		MOV ECX, ESI
		CALL _0058F670
		PUSH 4AB1h
		PUSH 07h
		PUSH 0Ah//12h
		MOV ECX, ESI
		CALL _0058F670
		PUSH 4AB2h
		PUSH 08h//08h
		PUSH 0Ah//12h
		MOV ECX, ESI
		CALL _0058F670
		PUSH 4AB3h
		PUSH 09h
		PUSH 0Ah//12h
		MOV ECX, ESI
		CALL _0058F670
		PUSH 4AB4h
		PUSH 0Ah
		PUSH 0Ah//12h
		MOV ECX, ESI
		CALL _0058F670
		PUSH 4AB5h
		PUSH 0Bh
		PUSH 0Ah//12h
		MOV ECX, ESI
		CALL _0058F670
		JMP _004BCD91
	}
}
//004BCBEC  |. E8 7F2A0D00    CALL age2_x1.0058F670

DWORD _004BCBF1 = 0x04BCBF1;
void __declspec(naked)  SetHootKeyList004BCBECTC()
{
	__asm {
		CALL _0058F670
		//town center
		PUSH 4A89h
		PUSH 2h
		PUSH 04h// 0Fh
		MOV ECX, ESI
		CALL _0058F670
		PUSH 4A8Ah
		PUSH 3h
		PUSH 04h//0Fh
		MOV ECX, ESI
		CALL _0058F670
		PUSH 4A8Bh
		PUSH 4h
		PUSH 04h//0Fh
		MOV ECX, ESI
		CALL _0058F670
		JMP _004BCBF1
	}
}
//004BCD2C
DWORD _004BCD31 = 0x04BCD31;
void __declspec(naked)  SetHootKeyList004BCD2C()
{
	__asm {
		CALL _0058F670
		//stable step lancer
		PUSH 16A8h
		PUSH 3h
		PUSH 08h
		MOV ECX, ESI
		CALL _0058F670
		JMP _004BCD31
	}
}
//004BCE7C
DWORD _004BCE81 = 0x04BCE81;
void __declspec(naked)  SetHootKeyList004BCE7C()
{
	__asm {
		CALL _0058F670
		//Flaming Camel
		PUSH 14FFh
		PUSH 3h
		PUSH 0Dh
		MOV ECX, ESI
		CALL _0058F670
		JMP _004BCE81
	}
}
//004BC90C  |. E8 5F2D0D00    CALL age2_x1.0058F670
//game commande go to krepost
DWORD _004BC911 = 0x04BC911;
void __declspec(naked)  SetHootKeyListGoToKrepost004BC90C()
{
	__asm {
		CALL _0058F670
		//Go To Krepost
		PUSH 4B51h
		PUSH 42h
		PUSH 1h
		MOV ECX, ESI
		CALL _0058F670
		//Go To Donjon
		PUSH 4B81h
		PUSH 43h
		PUSH 1h
		MOV ECX, ESI
		CALL _0058F670
		JMP _004BC911
	}
}
//007E4CE2   BB 004E7E00      MOV EBX,age2_x1.007E4E00                 ; ASCII ":?"
DWORD _007E4CE7 = 0x07E4CE7;
void __declspec(naked)  SetHootKeyList007E4CE2()
{
	__asm {
		MOV EBX, offset arrayUnitkey
		JMP _007E4CE7
	}
}

//004BBF33     90              NOP
//004BBFDA  |. E8 C1370D00     CALL age2_x1.0058F7A0                                ; \age2_x1.0058F7A0
DWORD _004BBFDF = 0x04BBFDF;
DWORD _0058F7A0 = 0x058F7A0;
void __declspec(naked)  SetHootKeyList004BBFDA()
{
	__asm {

		CALL _0058F7A0; \age2_x1.0058F7A0
		/*//Town center
		PUSH 4h
		PUSH 0Fh
		MOV ECX, ESI
		CALL _0058F7A0*/
		//Blacksmith
		//PUSH 5h
		PUSH 5h
		PUSH 0Fh
		MOV ECX, ESI
		CALL _0058F7A0
		//University
		PUSH 11h
		PUSH 10h
		MOV ECX, ESI
		CALL _0058F7A0
		//Select ALL
		PUSH 0Fh//15 itmes
		PUSH 11h
		MOV ECX, ESI
		CALL _0058F7A0
		/*//Monastery
		PUSH 0Ch
		PUSH 0Ah//12h
		MOV ECX, ESI
		CALL _0058F7A0*/

		JMP _004BBFDF
	}
}
//key 
//004BC657   . E8 041E0000    CALL age2_x1.004BE460
DWORD _004BE460 = 0x04BE460;
DWORD _004BC65C = 0x04BC65C;
DWORD LTowncenter = 0x2;
DWORD LBlacksmith = 0x0;
DWORD LUniversity = 0x0;
DWORD LSelectAll = 0x0;
DWORD LMonastery = 0x2;// 0x3;
void __declspec(naked)  SetHootKeyListhotkey004BC657()
{
	__asm {
		CALL _004BE460
		//Town center
		Towncenter :
		PUSH LTowncenter//0h
			PUSH 04h//0Fh
			MOV ECX, ESI
			CALL _004BE460
			inc LTowncenter
			CMP LTowncenter, 6h
			JNZ Towncenter
			MOV LTowncenter, 0h

			//Blacksmith
			Blacksmith :
		PUSH LBlacksmith//0h
			PUSH 0Fh
			MOV ECX, ESI
			CALL _004BE460
			inc LBlacksmith
			CMP LBlacksmith, 5h
			JNZ Blacksmith
			MOV LBlacksmith, 0h


			//University
		University:
		PUSH LUniversity//0h
			PUSH 10h
			MOV ECX, ESI
			CALL _004BE460
			inc LUniversity
			CMP LUniversity, 11h
			JNZ University
			MOV LUniversity, 0h

			//Select All
			SelectALL :
		PUSH LSelectAll//0h
			PUSH 11h//id
			MOV ECX, ESI
			CALL _004BE460
			inc LSelectAll
			CMP LSelectAll, 0Fh//nb item
			JNZ SelectALL
			MOV LSelectAll, 0h

			//Monastery
			Monastery :
		PUSH LMonastery//0h
			PUSH 0Ah//12h
			MOV ECX, ESI
			CALL _004BE460
			inc LMonastery
			CMP LMonastery, 0Ch
			JNZ Monastery
			MOV LMonastery, 2h
			//stable
			//stepLancer :
			PUSH 3h
			PUSH 08h
			MOV ECX, ESI
			CALL _004BE460
			//castel
			//FlamingCamel:
			PUSH 3h
			PUSH 0Dh
			MOV ECX, ESI
			CALL _004BE460
			//Game commandes
			//GoToKrepost
			PUSH 42h
			PUSH 01h
			MOV ECX, ESI
			CALL _004BE460
			//GoToDonjon
			PUSH 43h
			PUSH 01h
			MOV ECX, ESI
			CALL _004BE460
			JMP _004BC65C
	}

}
//004BC28F.E8 CC210000    CALL age2_x1.004BE460



//0058F4E7 | . 8D4424 0C      LEA EAX, DWORD PTR SS : [ESP + C]

//04BF1E3
//conncet list box item to hotkey 
//DWORD _0058F490 = 0x058F490;
DWORD _rank = 0x60;
DWORD _lang = 0x0;
DWORD _EBX;
void __declspec(naked)  SetHootKeyListhotkey0x04BF1E3()
{
	__asm {




		//Monastery:
		cmp EAX, 0Ah
		jnz tc//Towncenter
		MOV _rank, 52h//54h//
		MOV _EBX, EBX
		MOV  _lang, 416Dh//416Fh -2h  because it start at 2
		MOV EBX, DWORD PTR DS : [ESP + 8h]
		ADD _lang, EBX
		MOV EBX, _EBX
		PUSH _lang//415Eh; / Arg7 = 00001266
		PUSH 0h
		PUSH 0h
		PUSH 0h
		ADD _rank, EBX// 1h
		//PUSH 60h
		PUSH _rank
		//PUSH 0h
		PUSH  DWORD PTR DS : [ESP + 1Ch]
		//PUSH 0Fh
		PUSH EAX
		CALL _0058F490; \age2_x1.0058F490

		tc:
		cmp EAX, 04h//0Fh
			jnz Blacksmith
			MOV _rank, 59h
			MOV _EBX, EBX
			MOV  _lang, 4178h //417Ah -2
			MOV EBX, DWORD PTR DS : [ESP + 8h]
			ADD _lang, EBX
			MOV EBX, _EBX
			PUSH _lang//415Eh; / Arg7 = 00001266
			PUSH 0h
			PUSH 0h
			PUSH 0h
			ADD _rank, EBX//1h
			//PUSH 60h
			PUSH _rank
			//PUSH 0h
			PUSH  DWORD PTR DS : [ESP + 1Ch]
			//PUSH 0Fh
			PUSH EAX
			CALL _0058F490; \age2_x1.0058F490

			Blacksmith:
		cmp EAX, 0Fh //10h
			jnz University//Towncenter
			MOV _rank, 63h
			MOV _EBX, EBX
			MOV  _lang, 415Eh
			MOV EBX, DWORD PTR DS : [ESP + 8h]
			ADD _lang, EBX
			MOV EBX, _EBX
			PUSH _lang//415Eh; / Arg7 = 00001266
			PUSH 0h
			PUSH 0h
			PUSH 0h
			ADD _rank, EBX// 1h
			//PUSH 60h
			PUSH _rank
			//PUSH 0h
			PUSH  DWORD PTR DS : [ESP + 1Ch]
			//PUSH 0Fh
			PUSH EAX
			CALL _0058F490; \age2_x1.0058F490

			University:
		cmp EAX, 10h//11h
			jnz  selectALL //steplancer//Towncenter
			MOV _rank, 69h
			MOV _EBX, EBX
			MOV  _lang, 4164h
			MOV EBX, DWORD PTR DS : [ESP + 8h]
			ADD _lang, EBX
			MOV EBX, _EBX
			PUSH _lang//415Eh; / Arg7 = 00001266
			PUSH 0h
			PUSH 0h
			PUSH 0h
			ADD _rank, EBX// 1h
			//PUSH 60h
			PUSH _rank
			//PUSH 0h
			PUSH  DWORD PTR DS : [ESP + 1Ch]
			//PUSH 0Fh
			PUSH EAX
			CALL _0058F490; \age2_x1.0058F490

			selectALL:
		cmp EAX, 11h
			jnz steplancer
			MOV _rank, 7Bh
			MOV _EBX, EBX
			MOV  _lang, 4182h// 16784  // 4164h
			MOV EBX, DWORD PTR DS : [ESP + 8h]
			ADD _lang, EBX
			MOV EBX, _EBX
			PUSH _lang//415Eh; / Arg7 = 00001266
			PUSH 0h
			PUSH 0h
			PUSH 0h
			ADD _rank, EBX// 1h
			//PUSH 60h
			PUSH _rank
			//PUSH 0h
			PUSH  DWORD PTR DS : [ESP + 1Ch]
			//PUSH 0Fh
			PUSH EAX
			CALL _0058F490; \age2_x1.0058F490


			steplancer:
		cmp EAX, 08h
			jnz FlamingCamel
			PUSH 417Dh
			PUSH 0h
			PUSH 0h
			PUSH 0h
			PUSH 81h
			PUSH  DWORD PTR DS : [ESP + 1Ch]
			PUSH EAX
			CALL _0058F490; \age2_x1.0058F490

			FlamingCamel:
		cmp EAX, 0Dh
			jnz GoToKrepost
			PUSH 417Eh
			PUSH 0h
			PUSH 0h
			PUSH 0h
			PUSH 82h
			PUSH  DWORD PTR DS : [ESP + 1Ch]
			PUSH EAX
			CALL _0058F490; \age2_x1.0058F490

			GoToKrepost:
		cmp EAX, 1h
			jnz defaultSwitchCase
			CMP  DWORD PTR DS : [ESP + 1Ch] , 42h
			JNZ GoToDonjon
			PUSH 417Fh
			PUSH 0h
			PUSH 0h
			PUSH 0h
			PUSH 83h
			PUSH  DWORD PTR DS : [ESP + 1Ch]
			PUSH EAX
			CALL _0058F490; \age2_x1.0058F490

			GoToDonjon:
		cmp EAX, 1h
			jnz defaultSwitchCase
			CMP  DWORD PTR DS : [ESP + 1Ch] , 43h
			JNZ defaultSwitchCase
			PUSH 4180h
			PUSH 0h
			PUSH 0h
			PUSH 0h
			PUSH 84h
			PUSH  DWORD PTR DS : [ESP + 1Ch]
			PUSH EAX
			CALL _0058F490; \age2_x1.0058F490




		defaultSwitchCase:
		RETN 8;  Default case of switch 004BF16F

	}
}
//add hot key event  
//0051DB74.EB 66          JMP SHORT age2_x1.0051DBDC
//0051DB76 > 8B0D A0127900  MOV ECX, DWORD PTR DS : [7912A0]
//0051DB7C > 8B8424 6801000 > MOV EAX, DWORD PTR SS : [ESP + 168]
//0051DB83   . 85C0           TEST EAX, EAX
//0051DB85   . 8B8424 5C01000 > MOV EAX, DWORD PTR SS : [ESP + 15C]
//0051DB8C   . 74 16          JE SHORT age2_x1.0051DBA4
//0051DB8E   . 83F8 7B        CMP EAX, 7B
//0051DB91   . 75 16          JNZ SHORT age2_x1.0051DBA9
//0051DB93   . 8B11           MOV EDX, DWORD PTR DS : [ECX]
//0051DB95.FF52 30        CALL DWORD PTR DS : [EDX + 30]
//0051DB98   . 8B10           MOV EDX, DWORD PTR DS : [EAX]
//0051DB9A   . 8BC8           MOV ECX, EAX
//0051DB9C.FF92 EC000000  CALL DWORD PTR DS : [EDX + EC]
//0051DBA2.EB 36          JMP SHORT age2_x1.0051DBDA
//0051DBA4 > 83F8 1B        CMP EAX, 1B
//0051DBA7   . 74 23          JE SHORT age2_x1.0051DBCC
//0051DBA9 > -E9 92642A00    JMP age2_x1.007C4040


//// Enable keyboard overrides
//Injection(0x2b
//Injection(0x5e78bf, "E95CC71D00"),
//Injection(0x51dba9, "E992642A00"),
//Injection(0x51d074, "E9F76F2A00"),
//Injection(0x51d006, "E945752A00"),
//Injection(0x524450, "E92B012A00"),
//Injection(0x4f765c, "E9AFCF2C00"),
//Injection(0x54e960, "E92B5D2700"),
//Injection(0x5e8839, "0F84C1B71D00C74634010000000F1F440000"),
//Injection(0x51d8c8, "0F85926C2A00"),
//Injection(0x51d7f2, "E9CA00000066666690"),
//Injection(0x51db91, "7516"),
//Injection(0x4f7b70, "EB656690"),
//Injection(0x4f7897, "EB656690"),
//Injection(0x4f7271, "EB656690"),
//Injection(0x431cbb, "8B4C241025FF000000803C08010F97C059C20C00"),
//Injection(0x4313ef, "EB626690"),
//Injection(0x4313d5, "7D"),
//Injection(0x4313e9, "69"),

//0051D78E   > 8B85 30120000  MOV EAX,DWORD PTR SS:[EBP+1230]                        ;  Default case of switch 0051D1F0

//007E4D80
//004BD930   $ 51             PUSH ECX

//004BDDE3 > 33C0           XOR EAX, EAX;  Default case of switch 004BD93A
//004BDDE5   . 59             POP ECX
//004BDDE6.C2 0400        RETN 4
//0051DBA9 - E9 92642A00    JMP age2_x1.007C4040

//04BD935
DWORD _004BD93F = 0x04BD93F;
DWORD _0058F3F0 = 0x058F3F0;
void __declspec(naked)  SetHootKeyEvent004BD935()
{
	__asm {
		MOV BYTE PTR SS : [ESP + 3h] , 0h
		//tc
		CMP EAX, 417Ah
		JE TCLoom
		CMP EAX, 417Bh
		JE  TownWatch
		CMP  EAX, 417Ch
		JE Wheelbarrow
		//Blacksmith
		CMP  EAX, 415Eh
		JE Fletching
		CMP EAX, 415Fh
		JE Forging
		CMP EAX, 4160h
		JE PaddedArcherArmor
		CMP EAX, 4162h
		JE ScaleBarding
		CMP EAX, 4163h
		JE ScaleMail
		//University
		CMP  EAX, 4164h
		JE Arrowslits
		CMP  EAX, 4165h
		JE Ballistics
		CMP  EAX, 4166h
		JE BombardTower
		CMP  EAX, 4167h
		JE Chemistry
		CMP  EAX, 4168h
		JE FortifiedWall
		CMP  EAX, 4169h
		JE GuardTower
		CMP  EAX, 416Ah
		JE HeatedShot
		CMP  EAX, 416Bh
		JE Masonry
		CMP  EAX, 416Ch
		JE MurderHoles
		CMP  EAX, 416Dh
		JE SiegeEngineers
		CMP  EAX, 416Eh
		JE Treadmill
		//Monastery
		CMP EAX, 416Fh
		JE Atonement
		CMP EAX, 4170h
		JE BlockPrinting
		CMP EAX, 4171h
		JE Faith
		CMP EAX, 4172h
		JE Fervor
		CMP EAX, 4173h
		JE HerbalMedicine
		CMP EAX, 4174h
		JE Heresy
		CMP EAX, 4176h
		JE Illumination
		CMP EAX, 4177h
		JE Redemption
		CMP EAX, 4178h
		JE Sanctity
		CMP EAX, 4179h
		JE Theocracy
		//step lancer 
		CMP EAX, 417Dh
		JE steplancer
		//Flaming Camel
		CMP EAX, 417Eh
		JE FlamingCamel
		//go to krepost
		CMP EAX, 417Fh
		JE GoToKrepost
		//Go To Donjon key
		CMP EAX, 4180h
		JE GoToDonjon
		CMP EAX, 4180h
		JE GoToDonjon
		//todo
		//16770, "V"
		//16771, "D"
		//16772, "S"
		//16773, "F"
		//16774, "X"
		//16775, "C"
		//16776, "A"
		//16777, "Z"
		//16778, "R"
		//16779, "T"
		//16780, "G"
		//16781, "Y"
		//16782, "K"
		//16783, "D"
		//16783, "M"
		CMP EAX, 4182h
		JE selectIDLEVillager
		//normale
		CMP EAX, 4022h
		JMP DefaultCase

		//tc
		TCLoom :
		LEA EDX, DWORD PTR SS : [ESP + 3h]
			LEA EAX, DWORD PTR SS : [ESP + 3h]
			PUSH EDX
			LEA EDX, DWORD PTR SS : [ESP + 7h]
			PUSH EAX
			PUSH EDX
			PUSH 2h
			PUSH 04h//0fh
			CALL _0058F3F0
			POP ECX
			RETN 4h
			TownWatch :
		LEA EDX, DWORD PTR SS : [ESP + 3h]
			LEA EAX, DWORD PTR SS : [ESP + 3h]
			PUSH EDX
			LEA EDX, DWORD PTR SS : [ESP + 7h]
			PUSH EAX
			PUSH EDX
			PUSH 3h
			PUSH 04h//0Fh
			CALL _0058F3F0
			POP ECX
			RETN 4h
			Wheelbarrow :
		LEA EDX, DWORD PTR SS : [ESP + 3h]
			LEA EAX, DWORD PTR SS : [ESP + 3h]
			PUSH EDX
			LEA EDX, DWORD PTR SS : [ESP + 7h]
			PUSH EAX
			PUSH EDX
			PUSH 4h
			PUSH 04h//0Fh
			CALL _0058F3F0
			POP ECX
			RETN 4h
			//Black smith
			Fletching :
		LEA EDX, DWORD PTR SS : [ESP + 3h]
			LEA EAX, DWORD PTR SS : [ESP + 3h]
			PUSH EDX
			LEA EDX, DWORD PTR SS : [ESP + 7h]
			PUSH EAX
			PUSH EDX
			PUSH 0h
			PUSH 0Fh //10h
			CALL _0058F3F0
			POP ECX
			RETN 4h
			Forging :
		LEA EDX, DWORD PTR SS : [ESP + 3h]
			LEA EAX, DWORD PTR SS : [ESP + 3h]
			PUSH EDX
			LEA EDX, DWORD PTR SS : [ESP + 7h]
			PUSH EAX
			PUSH EDX
			PUSH 1h
			PUSH  0Fh //10h
			CALL _0058F3F0
			POP ECX
			RETN 4h
			PaddedArcherArmor :
		LEA EDX, DWORD PTR SS : [ESP + 3h]
			LEA EAX, DWORD PTR SS : [ESP + 3h]
			PUSH EDX
			LEA EDX, DWORD PTR SS : [ESP + 7h]
			PUSH EAX
			PUSH EDX
			PUSH 2h
			PUSH 0Fh //10h
			CALL _0058F3F0
			POP ECX
			RETN 4h
			ScaleBarding :
		LEA EDX, DWORD PTR SS : [ESP + 3h]
			LEA EAX, DWORD PTR SS : [ESP + 3h]
			PUSH EDX
			LEA EDX, DWORD PTR SS : [ESP + 7h]
			PUSH EAX
			PUSH EDX
			PUSH 3h
			PUSH  0Fh //10h
			CALL _0058F3F0
			POP ECX
			RETN 4h
			ScaleMail :
		LEA EDX, DWORD PTR SS : [ESP + 3h]
			LEA EAX, DWORD PTR SS : [ESP + 3h]
			PUSH EDX
			LEA EDX, DWORD PTR SS : [ESP + 7h]
			PUSH EAX
			PUSH EDX
			PUSH 4h
			PUSH  0Fh //10h
			CALL _0058F3F0
			POP ECX
			RETN 4h
			//university
			Arrowslits :
		LEA EDX, DWORD PTR SS : [ESP + 3h]
			LEA EAX, DWORD PTR SS : [ESP + 3h]
			PUSH EDX
			LEA EDX, DWORD PTR SS : [ESP + 7h]
			PUSH EAX
			PUSH EDX
			PUSH 0h
			PUSH 10h//11h
			CALL _0058F3F0
			POP ECX
			RETN 4h
			Ballistics :
		LEA EDX, DWORD PTR SS : [ESP + 3h]
			LEA EAX, DWORD PTR SS : [ESP + 3h]
			PUSH EDX
			LEA EDX, DWORD PTR SS : [ESP + 7h]
			PUSH EAX
			PUSH EDX
			PUSH 1h
			PUSH 10h//11h
			CALL _0058F3F0
			POP ECX
			RETN 4h

			BombardTower :
		LEA EDX, DWORD PTR SS : [ESP + 3h]
			LEA EAX, DWORD PTR SS : [ESP + 3h]
			PUSH EDX
			LEA EDX, DWORD PTR SS : [ESP + 7h]
			PUSH EAX
			PUSH EDX
			PUSH 2h
			PUSH 10h//11h
			CALL _0058F3F0
			POP ECX
			RETN 4h
			Chemistry :
		LEA EDX, DWORD PTR SS : [ESP + 3h]
			LEA EAX, DWORD PTR SS : [ESP + 3h]
			PUSH EDX
			LEA EDX, DWORD PTR SS : [ESP + 7h]
			PUSH EAX
			PUSH EDX
			PUSH 3h
			PUSH 10h//11h
			CALL _0058F3F0
			POP ECX
			RETN 4h
			FortifiedWall :
		LEA EDX, DWORD PTR SS : [ESP + 3h]
			LEA EAX, DWORD PTR SS : [ESP + 3h]
			PUSH EDX
			LEA EDX, DWORD PTR SS : [ESP + 7h]
			PUSH EAX
			PUSH EDX
			PUSH 4h
			PUSH 10h//11h
			CALL _0058F3F0
			POP ECX
			RETN 4h
			GuardTower :
		LEA EDX, DWORD PTR SS : [ESP + 3h]
			LEA EAX, DWORD PTR SS : [ESP + 3h]
			PUSH EDX
			LEA EDX, DWORD PTR SS : [ESP + 7h]
			PUSH EAX
			PUSH EDX
			PUSH 5h
			PUSH 10h//11h
			CALL _0058F3F0
			POP ECX
			RETN 4h
			HeatedShot :
		LEA EDX, DWORD PTR SS : [ESP + 3h]
			LEA EAX, DWORD PTR SS : [ESP + 3h]
			PUSH EDX
			LEA EDX, DWORD PTR SS : [ESP + 7h]
			PUSH EAX
			PUSH EDX
			PUSH 6h
			PUSH 10h//11h
			CALL _0058F3F0
			POP ECX
			RETN 4h
			Masonry :
		LEA EDX, DWORD PTR SS : [ESP + 3h]
			LEA EAX, DWORD PTR SS : [ESP + 3h]
			PUSH EDX
			LEA EDX, DWORD PTR SS : [ESP + 7h]
			PUSH EAX
			PUSH EDX
			PUSH 7h
			PUSH 10h//11h
			CALL _0058F3F0
			POP ECX
			RETN 4h
			MurderHoles :
		LEA EDX, DWORD PTR SS : [ESP + 3h]
			LEA EAX, DWORD PTR SS : [ESP + 3h]
			PUSH EDX
			LEA EDX, DWORD PTR SS : [ESP + 7h]
			PUSH EAX
			PUSH EDX
			PUSH 8h
			PUSH 10h//11h
			CALL _0058F3F0
			POP ECX
			RETN 4h
			SiegeEngineers :
		LEA EDX, DWORD PTR SS : [ESP + 3h]
			LEA EAX, DWORD PTR SS : [ESP + 3h]
			PUSH EDX
			LEA EDX, DWORD PTR SS : [ESP + 7h]
			PUSH EAX
			PUSH EDX
			PUSH 9h
			PUSH 10h//11h
			CALL _0058F3F0
			POP ECX
			RETN 4h
			Treadmill :
		LEA EDX, DWORD PTR SS : [ESP + 3h]
			LEA EAX, DWORD PTR SS : [ESP + 3h]
			PUSH EDX
			LEA EDX, DWORD PTR SS : [ESP + 7h]
			PUSH EAX
			PUSH EDX
			PUSH 0Ah
			PUSH 10h//11h
			CALL _0058F3F0
			POP ECX
			RETN 4h
			//Monastery
			Atonement :
		LEA EDX, DWORD PTR SS : [ESP + 3h]
			LEA EAX, DWORD PTR SS : [ESP + 3h]
			PUSH EDX
			LEA EDX, DWORD PTR SS : [ESP + 7h]
			PUSH EAX
			PUSH EDX
			PUSH 2h//0h
			PUSH 0Ah//12h
			CALL _0058F3F0
			POP ECX
			RETN 4h
			BlockPrinting :
		LEA EDX, DWORD PTR SS : [ESP + 3h]
			LEA EAX, DWORD PTR SS : [ESP + 3h]
			PUSH EDX
			LEA EDX, DWORD PTR SS : [ESP + 7h]
			PUSH EAX
			PUSH EDX
			PUSH 3h
			PUSH 0Ah//12h
			CALL _0058F3F0
			POP ECX
			RETN 4h
			Faith :
		LEA EDX, DWORD PTR SS : [ESP + 3h]
			LEA EAX, DWORD PTR SS : [ESP + 3h]
			PUSH EDX
			LEA EDX, DWORD PTR SS : [ESP + 7h]
			PUSH EAX
			PUSH EDX
			PUSH 4h
			PUSH 0Ah//12h
			CALL _0058F3F0
			POP ECX
			RETN 4h
			Fervor :
		LEA EDX, DWORD PTR SS : [ESP + 3h]
			LEA EAX, DWORD PTR SS : [ESP + 3h]
			PUSH EDX
			LEA EDX, DWORD PTR SS : [ESP + 7h]
			PUSH EAX
			PUSH EDX
			PUSH 5h
			PUSH 0Ah//12h
			CALL _0058F3F0
			POP ECX
			RETN 4h
			HerbalMedicine :
		LEA EDX, DWORD PTR SS : [ESP + 3h]
			LEA EAX, DWORD PTR SS : [ESP + 3h]
			PUSH EDX
			LEA EDX, DWORD PTR SS : [ESP + 7h]
			PUSH EAX
			PUSH EDX
			PUSH 6h//4h
			PUSH 0Ah//12h
			CALL _0058F3F0
			POP ECX
			RETN 4h
			Heresy :
		LEA EDX, DWORD PTR SS : [ESP + 3h]
			LEA EAX, DWORD PTR SS : [ESP + 3h]
			PUSH EDX
			LEA EDX, DWORD PTR SS : [ESP + 7h]
			PUSH EAX
			PUSH EDX
			PUSH 7h//5h
			PUSH 0Ah//12h
			CALL _0058F3F0
			POP ECX
			RETN 4h
			Illumination :
		LEA EDX, DWORD PTR SS : [ESP + 3h]
			LEA EAX, DWORD PTR SS : [ESP + 3h]
			PUSH EDX
			LEA EDX, DWORD PTR SS : [ESP + 7h]
			PUSH EAX
			PUSH EDX
			PUSH 8h//6h
			PUSH 0Ah//12h
			CALL _0058F3F0
			POP ECX
			RETN 4h
			Redemption :
		LEA EDX, DWORD PTR SS : [ESP + 3h]
			LEA EAX, DWORD PTR SS : [ESP + 3h]
			PUSH EDX
			LEA EDX, DWORD PTR SS : [ESP + 7h]
			PUSH EAX
			PUSH EDX
			PUSH 9h//7h
			PUSH 0Ah//12h
			CALL _0058F3F0
			POP ECX
			RETN 4h
			Sanctity :
		LEA EDX, DWORD PTR SS : [ESP + 3h]
			LEA EAX, DWORD PTR SS : [ESP + 3h]
			PUSH EDX
			LEA EDX, DWORD PTR SS : [ESP + 7h]
			PUSH EAX
			PUSH EDX
			PUSH 0Ah//8h
			PUSH 0Ah//12h
			CALL _0058F3F0
			POP ECX
			RETN 4h
			Theocracy :
		LEA EDX, DWORD PTR SS : [ESP + 3h]
			LEA EAX, DWORD PTR SS : [ESP + 3h]
			PUSH EDX
			LEA EDX, DWORD PTR SS : [ESP + 7h]
			PUSH EAX
			PUSH EDX
			PUSH 0Bh//0Ah
			PUSH 0Ah//12h
			CALL _0058F3F0
			POP ECX
			RETN 4h
			steplancer :
		LEA EDX, DWORD PTR SS : [ESP + 3h]
			LEA EAX, DWORD PTR SS : [ESP + 3h]
			PUSH EDX
			LEA EDX, DWORD PTR SS : [ESP + 7h]
			PUSH EAX
			PUSH EDX
			PUSH 03h//steplancer
			PUSH 08h//stable
			CALL _0058F3F0
			POP ECX
			RETN 4h
			FlamingCamel :
		LEA EDX, DWORD PTR SS : [ESP + 3h]
			LEA EAX, DWORD PTR SS : [ESP + 3h]
			PUSH EDX
			LEA EDX, DWORD PTR SS : [ESP + 7h]
			PUSH EAX
			PUSH EDX
			PUSH 03h//Flaming Camel
			PUSH 0Dh//castel
			CALL _0058F3F0
			POP ECX
			RETN 4h
			GoToKrepost :
		LEA EDX, DWORD PTR SS : [ESP + 3h]
			LEA EAX, DWORD PTR SS : [ESP + 3h]
			PUSH EDX
			LEA EDX, DWORD PTR SS : [ESP + 7h]
			PUSH EAX
			PUSH EDX
			PUSH 042h//Go to krepost
			PUSH 01h//game commande
			CALL _0058F3F0
			POP ECX
			RETN 4h
			GoToDonjon :
		LEA EDX, DWORD PTR SS : [ESP + 3h]
			LEA EAX, DWORD PTR SS : [ESP + 3h]
			PUSH EDX
			LEA EDX, DWORD PTR SS : [ESP + 7h]
			PUSH EAX
			PUSH EDX
			PUSH 043h//Go to Donjon
			PUSH 01h//game commande
			CALL _0058F3F0
			POP ECX
			RETN 4h

			//select all
			selectIDLEVillager :
		LEA EDX, DWORD PTR SS : [ESP + 3h]
			LEA EAX, DWORD PTR SS : [ESP + 3h]
			PUSH EDX
			LEA EDX, DWORD PTR SS : [ESP + 7h]
			PUSH EAX
			PUSH EDX
			PUSH 0h
			PUSH 11h//11h
			CALL _0058F3F0
			POP ECX
			RETN 4h



		DefaultCase:

		JMP _004BD93F

	}
}
//1
//2

//0x04BE460
DWORD _004BE467 = 0x0004BE467;
DWORD _004BF1E3 = 0x04BF1E3;
void __declspec(naked)  SetHootKeyList004BD935()
{
	__asm {
		MOV EAX, DWORD PTR SS : [ESP + 4h]
		CMP EAX, 04h//tc
		JNZ checkmona
		CMP DWORD PTR SS : [ESP + 8h] , 0h//2h
		JE Normale
		CMP DWORD PTR SS : [ESP + 8h] , 6h//2h
		JE Normale
		CMP DWORD PTR SS : [ESP + 8h] , 7h//2h
		JE Normale
		JMP __004BF1E3

		checkmona :
		CMP EAX, 0Ah //monastar
		JNZ steplancer// Normale
		CMP DWORD PTR SS : [ESP + 8h] , 1h
		Jg __004BF1E3//if is add item then jump default switch case

		steplancer :
		CMP EAX, 08h
		JNZ FlamingCamel
		CMP[ESP + 8h], 3h
		JE __004BF1E3

		FlamingCamel :
		CMP EAX, 0Dh
		JNZ GoToKrepost//Normale
		CMP[ESP + 8h], 3h
		JE __004BF1E3


		GoToKrepost :
		cmp EAX, 1h
		JNZ Normale
		CMP DWORD PTR SS : [ESP + 8h] , 42h
		JE __004BF1E3
		CMP DWORD PTR SS : [ESP + 8h] , 43h
		JE __004BF1E3

		Normale :
		CMP EAX, 0Eh
		JMP _004BE467
		__004BF1E3 :
		JMP _004BF1E3
	};
}
//004BD388 | . 33D2           XOR EDX, EDX
//004BD38A | . 8A90 84D84B00  MOV DL, BYTE PTR DS : [EAX + 4BD884]
//004BD390 | .FF2495 E4D74B0 > JMP DWORD PTR DS : [EDX * 4 + 4BD7E4]
//004BD397 | > 8D4424 03      LEA EAX, DWORD PTR SS : [ESP + 3] ;  Case 17 of switch 004BD37A
//004BD39B | . 8D5424 03      LEA EDX, DWORD PTR SS : [ESP + 3]
//004BD39F | . 50             PUSH EAX
//004BD3A0 | . 8D4424 07      LEA EAX, DWORD PTR SS : [ESP + 7]
//004BD3A4 | . 52             PUSH EDX
//004BD3A5 | . 50             PUSH EAX
//004BD3A6 | . 6A 0E          PUSH 0E
//004BD3A8 | . 6A 00          PUSH 0

//go to key
//004BD388 | . 33D2           XOR EDX, EDX
//004BD370 / $ 51             PUSH ECX

//go to krepost
//005244E5 > 8B0D A0127900  MOV ECX, DWORD PTR DS : [7912A0]
//005244EB.E8 70300C00    CALL age2_x1.005E7560
DWORD _00524471 = 0x0524471;
DWORD _005244E5 = 0x05244E5;
void __declspec(naked)  SetHootgoToKrepost()
{
	__asm {
		MOV EAX, DWORD PTR SS : [ESP + 10h]
		CMP EAX, 0Fh;  Switch(cases 0..E)
		JE GoToKrepost
		CMP EAX, 0Eh
		JMP _00524471
		GoToKrepost :
		MOV EDI, 4DDh//krepost unit id
			JMP _005244E5

	}
}

//00524471   . 0F87 AF010000  JA age2_x1.00524626
void __declspec(naked)  SetHootgoToKrepostDonjonJA()
{
	__asm {
		CMP EAX, 0Fh
		JE GoToKrepost
		CMP EAX, 10h
		JE GoToDonjon

		CMP EAX, 0Eh;  Switch(cases 0..E)
		JA Default

		GoToKrepost :
		MOV EDI, 4DDh//krepost unit id
			JMP _005244E5
			GoToDonjon :
		MOV EDI, 5C4h//donjon unit id
			JMP _005244E5

			Default :
		POP EDI;  Default case of switch 0052446E
			POP ESI
			POP EBX
			RETN 4h


	}
}
//0051D1F0   . 83C0 EC        ADD EAX, -14;  Switch(cases 14..41)
//0051D1F3   . 83F8 2D        CMP EAX, 2D
//0051D1F6   . 0F87 92050000  JA age2_x1.0051D78E


//0051D1F0   . 83C0 EC        ADD EAX, -14;  Switch(cases 14..41)

DWORD _0051D1F6 = 0x051D1F6;
DWORD _0051DBDC = 0x051DBDC;
DWORD _00524450 = 0x0524450;
void __declspec(naked)  SetHootgoToKrepostEvent0051D1F0()
{
	__asm {
		ADD EAX, -14h;  Switch(cases 14..41)
		CMP EAX, 2Fh
		JNZ normal
		PUSH 0Fh;  Case 31 of switch 0051D1F0
		MOV ECX, EBP
		CALL _00524450
		MOV EAX, 1h
		JMP _0051DBDC

		normal :
		CMP EAX, 2Dh

			JMP _0051D1F6
	}
}
//0051D1F6   . 0F87 92050000  JA age2_x1.0051D78E
DWORD _0051D78E = 0x051D78E;
DWORD _4_005E7560 = 0x05E7560;
DWORD bulgariansCiv = 34;//Civilization::bulgarians;
void __declspec(naked)  SetHootgoToKrepostEvent0051D1F0JA()
{
	__asm {
		//to check if bulgarian or sicilian
		CMP EAX, 2Eh
		JE Check
		CMP EAX, 2Fh
		JE Check
		//CMP EAX, 2Fh
		//JE goToDonjon
		JMP normal
		Check :
		//get current player
		MOV ECX, DWORD PTR DS : [07912A0h]
		call _4_005E7560
		MOV EDX, 0h
		//MOV DX, WORD PTR SS : [EAX + 15Dh]
		MOV DL, BYTE PTR SS : [EAX + 15Dh]
		CMP  EDX, bulgariansCiv
		JE goToKrepost
		JMP goToDonjon
		goToKrepost :
		PUSH 0Fh;  Go to Krepost
		MOV ECX, EBP
		CALL _00524450
		JMP Default
		goToDonjon :
		PUSH 10h;  Go to Donjon
		MOV ECX, EBP
		CALL _00524450

		normal :
		CMP EAX, 2Dh
		JA Default

		Default :
		//0051D78E   > 8B85 30120000  MOV EAX,DWORD PTR SS:[EBP+1230]          ;  Default case of switch 0051D1F0
		JMP _0051D78E

	};
}

//004BCE81  |. 68 824A0000    PUSH 4A82   19074=Reseed Farm

//20005=Mill
//smith 20006
void hotkeyHook()
{
	//setHook((void*)0x04BC09E, SetHootKeyList);
	//setHook((void*)0x04BEEB1, SetHootKeyList004BEEB1);
	//set item number ?
	// 004BBF33     6A 11           PUSH 11
	//NumHotkeyGroups
	writeByte(0x04BBF34, 0x14);
	//extend game commande key to add go to krepost
	writeByte(0x04BBF46, 0x44);

	//set monastarysize item
	//004BBFA8 | . 6A 02          PUSH 2; / Arg2 = 00000002
	writeByte(0x04BBFA9, 0xC);
	//004BE464   . 83F8 0E        CMP EAX, 0E;  Switch(cases 0..E)
	//	004BE467   . 0F87 760D0000  JA age2_x1.004BF1E3
	//extandestable loop
	//004BBF92 | . 6A 03          PUSH 3; / Arg2 = 00000003
	writeByte(0x04BBF93, 0x4);
	//extend castle item
	//004BBFC9  |. 6A 03          PUSH 3                                   ; /Arg2 = 00000003
	writeByte(0x04BBFCA, 0x4);





	setHook((void*)0x04BE460, SetHootKeyList004BD935);


	//004BBFDA  |. E8 C1370D00     CALL age2_x1.0058F7A0                                ; \age2_x1.0058F7A0
	setHook((void*)0x04BBFDA, SetHootKeyList004BBFDA);
	//0x07E4CE2

	////004BC667   . 5E             POP ESI
	setHook((void*)0x04BC0AC, SetHootKeyList004BC0AC);
	//item when clicking
	setHook((void*)0x04BCE8C, SetHootKeyList004BCE8C);
	setHook((void*)0x04BCD8C, SetHootKeyList004BCD8CMonastary);
	setHook((void*)0x04BCBEC, SetHootKeyList004BCBECTC);
	//6739=X,  5800=Steppe Lancer Stable: 0x8,
	//004BCD2C  |. E8 3F290D00    CALL age2_x1.0058F670
	setHook((void*)0x04BCD2C, SetHootKeyList004BCD2C);
	//castel 417E->16766=V,14FF->5375 =Create Flaming Camel
	//004BCE7C  |. E8 EF270D00    CALL age2_x1.0058F670
	setHook((void*)0x04BCE7C, SetHootKeyList004BCE7C);
	setHook((void*)0x04BC90C, SetHootKeyListGoToKrepost004BC90C);

	//key 
	setHook((void*)0x04BC657, SetHootKeyListhotkey004BC657);
	setHook((void*)0x04BF1E3, SetHootKeyListhotkey0x04BF1E3);

	//key events
	setHook((void*)0x04BD935, SetHootKeyEvent004BD935);

	//00447EFF | . 68 F44C0000    PUSH 4CF4
	//go to castel
	//00524450   $ - E9 2B012A00    JMP age2_x1.007C4580
	//0052446E   . 83F8 0E        CMP EAX,0E                                        ;  Switch (cases 0..E)
	//extend switch case
	//setHook((void*)0x052446A , SetHootgoToKrepost); -> SetHootgoToKrepostDonjonJA

	//provoque event 
	////0051D1F3     83F8 42        CMP EAX,  2E   2D
	//writeByte(0x04BBF34, 0x2E);
	//setHook((void*)0x051D1F0, SetHootgoToKrepostEvent0051D1F0); ->SetHootgoToKrepostEvent0051D1F0JA

	//go to krepost and donjon
	//00524471   . 0F87 AF010000  JA age2_x1.00524626
	setHookJA((void*)0x0524471, SetHootgoToKrepostDonjonJA);
	setHookJA((void*)0x051D1F6, SetHootgoToKrepostEvent0051D1F0JA);


	////007E4CE2   BB 004E7E00      MOV EBX, age2_x1.007E4E00; ASCII ":?"
	//setHook((void*)0x07E4CE2, SetHootKeyList007E4CE2);
	////007E4D2C   83FD 05          CMP EBP,5
	//writeByte(0x07E4D2E, 0x9);

	//BYTE _7E4C0E[10] = { 0x90 ,0x90 ,0x90 ,0x90 ,0x90 ,0x90 ,0x90 ,0x90 ,0x90,0x90 };
	//writeData(0x07E4C0E, _7E4C0E,10);
	//0x04BF1E3
	////connect list box to hot key
	//setHook((void*)0x04BF1E3, SetHootKeyListhotkey004BF1E3);

	//1D
	//	00525BA2   . 6A 1D          PUSH 1D

	//	00538A0F     90             NOP
	//	00538A10   $ 56             PUSH ESI
	//	00538A11   . 6A 00          PUSH 0
	//	00538A13   . 6A 00          PUSH 0
	//	00538A15   . 6A 00          PUSH 0



}
//map generatoR????
//00534C98   . 8B0D A0127900  MOV ECX, DWORD PTR DS : [7912A0]


//0055DD20  /$ 81EC 00020000  SUB ESP,200



//hotkey interface
//004F62CF     8BCE           MOV ECX, ESI; |
//4 button
//004F6321     8B4C24 10      MOV ECX, DWORD PTR SS : [ESP + 10]
//list box
//
//007BF926   E8 B5F0D9FF      CALL age2_x1.0055E9E0
//004F64CE | .E8 0D850600    CALL age2_x1.0055E9E0; \age2_x1.0055E9E0

//fill list box
//004F658B | . 85C0           TEST EAX, EAX
//004F6647     90             NOP


//007CEA8E   52               PUSH EDX
//007CEA8F   52               PUSH EDX
//007CEA90   E8 46FAFFFF      CALL age2_x1.007CE4DB

// new players
//0050FF16   . E8 C52D0500    CALL age2_x1.00562CE0


//loop that print item
//004F7580 | . 85ED            TEST EBP, EBP

//DWORD PTR DS : [ESI + 840]
//genere tate item when click item
//004F73ED | . 0F8E 37010000   JLE age2_x1.004F752A


//0058F163   .-E9 26F92300    JMP age2_x1.007CEA8E
////check if hki file existe if not je 007CE520
//007CE507   E8 344BD7FF      CALL age2_x1.00543040
//007CE50C   83C4 04          ADD ESP, 4
//007CE50F   84C0             TEST AL, AL
//007CE511   74 0D            JE SHORT age2_x1.007CE520

//0058F168   . 52             PUSH EDX
//create hki file
//0058F169   . E8 C234FBFF    CALL age2_x1.00542630

//file file ?
//007BF0BA   8BF0             MOV ESI,EAX


//007CEA8E   52               PUSH EDX




//007E9740   8B0D A0127900    MOV ECX, DWORD PTR DS : [7912A0]
//007E9746   E8 1524C5FF      CALL age2_x1.0043BB60
//007E974B   A1 A0127900      MOV EAX, DWORD PTR DS : [7912A0]
//007E9750   8B48 20          MOV ECX, DWORD PTR DS : [EAX + 20]
//007E9753   21C9             AND ECX, ECX
//007E9755   74 05            JE SHORT age2_x1.007E975C
//007E9757   E8 E467DBFF      CALL age2_x1.0059FF40
//007E975C   C3               RETN
//


//Select All   language ini
//20020 = Select All
/*
-Select_all Idle_villagers
- Select all Idle_military
- Select all Trade_carts
- Select all Town_centers
- Select all Barracks
- Select all Archery ranges
- Select all Stables
- Select all Siege_workshops
- Select all Docks
- Select all Markets
- Select all Monasteries
- Select all Castles
- Select all Kreposts
- Select all Donjons
- Select all Military_Buildings

//16768 = V\\Go to Donjon
20020 = Select All
16770 = V//Select_all Idle_villagers
16771 = D// Select all Idle_military
16772 = S// Select all Trade_carts
16773 = F// Select all Town_centers
16774 = X// Select all Barracks
16775 = C// Select all Archery ranges
16776 = A// Select all Stables
16777 = Z// Select all Siege_workshops
16778 = R// Select all Docks
16779 = T// Select all Markets
16780 = G// Select all Monasteries
16781 = Y// Select all Castles
16782 = K// Select all Kreposts
16783 = D// Select all Donjons
16783 = M//Select all Military_Buildings

16784 =Select_all Idle_villagers
16785 =Select all Idle_military
16786 =Select all Trade_carts
16787 =Select all Town_centers
16788 =Select all Barracks
16789 =Select all Archery ranges
16790 =Select all Stables
16791 =Select all Siege_workshops
16792 =Select all Docks
16793 =Select all Markets
16794 =Select all Monasteries
16795 =Select all Castles
16796 =Select all Kreposts
16797 =Select all Donjons
16798 =Select all Military_Buildings

STRINGTABLE
LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
{
  20020, 	"Select All"


16783,"M"

16784 ,"Select_all Idle_villagers"
16785 ,"Select all Idle_military"
16786 ,"Select all Trade_carts"
16787 ,"Select all Town_centers"
16788 ,"Select all Barracks"
16789 ,"Select all Archery ranges"
16790 ,"Select all Stables"
16791 ,"Select all Siege_workshops"
16792 ,"Select all Docks"
16793 ,"Select all Markets"
16794 ,"Select all Monasteries"
16795 ,"Select all Castles"
16796 ,"Select all Kreposts"
16797 ,"Select all Donjons"
16798 ,"Select all Military_Buildings"
}
16770,"V"
16771,"D"
16772,"S"
16773,"F"
16774,"X"
16775,"C"
16776,"A"
16777,"Z"
16778,"R"
16779,"T"
16780,"G"
16781,"Y"
16782,"K"
16783,"D"

STRINGTABLE
LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
{
16770,"V"
16771,"D"
16772,"S"
16773,"F"
16774,"X"
16775,"C"
16776,"A"
16777,"Z"
16778,"R"
16779,"T"
16780,"G"
16781,"Y"
16782,"K"
16783,"D"
}
STRINGTABLE
LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
{
14176,"University"
19208,"University"
20019,"University"
20020, 	"Select All"
}
*/
//0xE
#pragma region  007B0BF0  07B2820
////////////void __declspec(naked)  f_007B2820()
////////////{
////////////	__asm {
////////////		MOV EAX, DWORD PTR DS : [681A20h]
////////////		MOV ECX, EAX
////////////		SHL ECX, 0Dh
////////////		XOR EAX, ECX
////////////		MOV ECX, EAX
////////////		SHR ECX, 11h
////////////		XOR EAX, ECX
////////////		MOV ECX, EAX
////////////		SHL ECX, 5h
////////////		XOR EAX, ECX
////////////		MOV DWORD PTR DS : [681A20h] , EAX
////////////		AND EAX, 7FFFh
////////////		RETN
////////////
////////////
////////////	};
////////////}
//////////////switch case
//////////////7B0DA0
//////////////8F 0C 7B 00 // 7B0C8F
//////////////FC 0C 7B 00 // 7B0CFC
//////////////FC 0C 7B 00 // 7B0CFC
//////////////FC 0C 7B 00 // 7B0CFC
//////////////FC 0C 7B 00 // 7B0CFC
//////////////FF 0C 7B 00 // 7B0CFF
//////////////FF 0C 7B 00 // 7B0CFF
//////////////FF 0C 7B 00 // 7B0CFF
//////////////FF 0C 7B 00 // 7B0CFF
//////////////02 0D 7B 00 // 7B0D02
//////////////02 0D 7B 00 // 7B0D02
//////////////02 0D 7B 00 // 7B0D02
//////////////02 0D 7B 00 // 7B0D02
//////////////F9 0C 7B 00 // 7B0CF9
//////////////F9 0C 7B 00 // 7B0CF9
//////////////F9 0C 7B 00 // 7B0CF9
////////////// 
//////////////switch case
//////////////7B0D80
//////////////1D 0C 7B 00 // 7B0C1D 0x0
//////////////70 0C 7B 00 // 7B0C70 0x4
//////////////70 0C 7B 00 // 7B0C70 0x8
//////////////73 0C 7B 00 // 7B0C73 0xC
//////////////73 0C 7B 00 // 7B0C73 0x10
//////////////76 0C 7B 00 // 7B0C76 0x14
//////////////76 0C 7B 00 // 7B0C76 0x18
//////////////26 0C 7B 00 // 7B0C26 0x1C
//////////////8F 0C 7B 00 // 7B0C8F 0x20
//////////////FC 0C 7B 00 // 7B0CFC 0x24
//////////////FC 0C 7B 00 // 7B0CFC 0x28
//////////////FC 0C 7B 00 // 7B0CFC 0x2C
//////////////FC 0C 7B 00 // 7B0CFC 0x30
//////////////FF 0C 7B 00 // 7B0CFF 0x34
//////////////FF 0C 7B 00 // 7B0CFF 0x38
//////////////FF 0C 7B 00 // 7B0CFF 0x3C
//////////////FF 0C 7B 00 // 7B0CFF 0x40
//////////////02 0D 7B 00 // 7B0D02 0x44
//////////////02 0D 7B 00 // 7B0D02 0x48
//////////////02 0D 7B 00 // 7B0D02 0x4C
//////////////02 0D 7B 00 // 7B0D02 0x50
//////////////F9 0C 7B 00 // 7B0CF9 0x54
//////////////F9 0C 7B 00 // 7B0CF9 0x58
//////////////F9 0C 7B 00 // 7B0CF9 0x5C
//////////// 
////////////DWORD _7B0D80[23] = {};
////////////DWORD _7B0DA0 = (DWORD)_7B0D80 + 0x20;
//////////////DWORD _7B0DA0[15] = {};//= DWORD PTR DS : [_7B0D80 + 20h]
////////////DWORD hhh;
////////////void __declspec(naked)  f_007B0BF0()
////////////{
////////////	__asm {
////////////		//initialize array switch case
////////////		MOV hhh, EAX //we save eax
////////////		MOV EAX, _007B0C1D
////////////		MOV DWORD PTR SS : [_7B0D80] , EAX
////////////		MOV EAX, _007B0C70
////////////		MOV DWORD PTR SS : [_7B0D80 + 4h] , EAX//we fill switch case array 
////////////		MOV DWORD PTR SS : [_7B0D80 + 8h] , EAX//we fill switch case array 
////////////		MOV EAX, _007B0C73
////////////		MOV DWORD PTR SS : [_7B0D80 + 0Ch] , EAX//we fill switch case array 
////////////		MOV DWORD PTR SS : [_7B0D80 + 10h] , EAX//we fill switch case array 
////////////		MOV EAX, _007B0C76
////////////		MOV DWORD PTR SS : [_7B0D80 + 14h] , EAX//we fill switch case array 
////////////		MOV DWORD PTR SS : [_7B0D80 + 18h] , EAX//we fill switch case array 
////////////		MOV EAX, _007B0C26
////////////		MOV DWORD PTR SS : [_7B0D80 + 1Ch] , EAX//we fill switch case array 
////////////		MOV EAX, _007B0C8F
////////////		MOV DWORD PTR SS : [_7B0D80 + 20h] , EAX//we fill switch case array 
////////////		MOV EAX, _007B0CFC
////////////		MOV DWORD PTR SS : [_7B0D80 + 24h] , EAX//we fill switch case array 
////////////		MOV DWORD PTR SS : [_7B0D80 + 28h] , EAX//we fill switch case array 
////////////		MOV DWORD PTR SS : [_7B0D80 + 2Ch] , EAX//we fill switch case array 
////////////		MOV DWORD PTR SS : [_7B0D80 + 30h] , EAX//we fill switch case array 
////////////		MOV EAX, _007B0CFF
////////////		MOV DWORD PTR SS : [_7B0D80 + 34h] , EAX//we fill switch case array 
////////////		MOV DWORD PTR SS : [_7B0D80 + 38h] , EAX//we fill switch case array 
////////////		MOV DWORD PTR SS : [_7B0D80 + 3Ch] , EAX//we fill switch case array 
////////////		MOV DWORD PTR SS : [_7B0D80 + 40h] , EAX//we fill switch case array 
////////////		MOV EAX, _007B0D02
////////////		MOV DWORD PTR SS : [_7B0D80 + 44h] , EAX//we fill switch case array 
////////////		MOV DWORD PTR SS : [_7B0D80 + 48h] , EAX//we fill switch case array 
////////////		MOV DWORD PTR SS : [_7B0D80 + 4Ch] , EAX//we fill switch case array 
////////////		MOV DWORD PTR SS : [_7B0D80 + 50h] , EAX//we fill switch case array 
////////////		MOV EAX, _007B0CF9
////////////		MOV DWORD PTR SS : [_7B0D80 + 54h] , EAX//we fill switch case array 
////////////		MOV DWORD PTR SS : [_7B0D80 + 58h] , EAX//we fill switch case array 
////////////		MOV DWORD PTR SS : [_7B0D80 + 5Ch] , EAX//we fill switch case array 
////////////		MOV EAX, hhh//we restore eax
////////////
////////////
////////////		MOV EAX, DWORD PTR DS : [ECX + 100h]
////////////		PUSH EBX
////////////		PUSH EBP
////////////		PUSH ESI
////////////		MOV ECX, DWORD PTR DS : [EAX + 5BE0h]
////////////		PUSH EDI
////////////		SUB ESP, 10h
////////////		XOR EDI, EDI
////////////		MOV EDX, DWORD PTR DS : [ECX + 8Ch]
////////////		MOV ESI, DWORD PTR DS : [EDX + 34h]
////////////		MOV EAX, DWORD PTR DS : [ESI + 8h]
////////////		DEC EAX
////////////		MOV DWORD PTR SS : [ESP + 8h] , EAX
////////////		JMP DWORD PTR DS : [EDI * 4 + _7B0D80]
////////////		_007B0C1D:
////////////		MOV EAX, DWORD PTR SS : [ESP + 24h]
////////////		MOV ECX, DWORD PTR SS : [ESP + 28h]
////////////		DEC EAX
////////////		_007B0C26:
////////////		DEC ECX
////////////		_007B0C27:
////////////		TEST EAX, EAX
////////////		JL short _007B0C64
////////////		TEST ECX, ECX
////////////		JL short _007B0C64
////////////		MOV EDX, DWORD PTR SS : [ESP + 8h]
////////////		CMP EAX, EDX
////////////		JG short _007B0C64
////////////		CMP ECX, EDX
////////////		JG short _007B0C64
////////////		MOV EDX, DWORD PTR DS : [ESI + 0A214h]
////////////		MOV EBX, EAX
////////////		SHL EBX, 5h
////////////		MOV EBP, DWORD PTR DS : [EDX + ECX * 4h]
////////////		MOV DL, BYTE PTR DS : [EBX + EBP + 1Fh]
////////////		CMP DL, 2h
////////////		JE short _007B0C79
////////////		CMP DL, 25h
////////////		JE short _007B0C79
////////////		INC EDI
////////////		CMP EDI, 8h
////////////		JGE short _007B0C64
////////////		JMP DWORD PTR DS : [EDI * 4h + _7B0D80]
////////////		_007B0C64:
////////////		ADD ESP, 10h
////////////		POP EDI
////////////		POP ESI
////////////		POP EBP
////////////		XOR EAX, EAX
////////////		POP EBX
////////////		RETN 8h
////////////		_007B0C70:
////////////		INC EAX
////////////		JMP short _007B0C27
////////////		_007B0C73:
////////////		INC ECX
////////////		JMP short _007B0C27
////////////		_007B0C76:
////////////		DEC EAX
////////////		JMP short _007B0C27
////////////		_007B0C79:
////////////		XOR EBX, EBX
////////////		XOR EDI, EDI
////////////		MOV DWORD PTR SS : [ESP] , -1h
////////////		MOV DWORD PTR SS : [ESP + 4h] , EDI
////////////		JMP DWORD PTR DS : [EDI * 4h + _7B0DA0]
////////////		_007B0C8F:
////////////		MOV EAX, DWORD PTR SS : [ESP + 24h]
////////////		MOV EDX, DWORD PTR SS : [ESP + 28h]
////////////		LEA EAX, DWORD PTR DS : [EAX - 2h]
////////////		LEA ECX, DWORD PTR DS : [EDX - 2h]
////////////		_007B0C9D:
////////////		TEST EAX, EAX
////////////		JL short _007B0D05
////////////		TEST ECX, ECX
////////////		JL short _007B0D05
////////////		MOV EDX, DWORD PTR SS : [ESP + 8h]
////////////		CMP EAX, EDX
////////////		JG short _007B0D05
////////////		CMP ECX, EDX
////////////		JG short _007B0D05
////////////		MOV EDX, DWORD PTR DS : [ESI + 0A214h]
////////////		MOV EBP, DWORD PTR DS : [EDX + ECX * 4h]
////////////		MOV EDX, EAX
////////////		SHL EDX, 5h
////////////		MOVZX EDX, BYTE PTR DS : [EDX + EBP + 1Fh]
////////////		MOVZX EBP, BYTE PTR DS : [EDX + 67B468h]
////////////		AND EBP, 3h
////////////		INC EBP
////////////		SHR EBP, 1h
////////////		CMP DWORD PTR SS : [ESP] , EBP
////////////		JE short _007B0CE7
////////////		MOV DWORD PTR SS : [ESP] , EBP
////////////		MOV EDX, DWORD PTR SS : [ESP + 4h]
////////////		INC EDX
////////////		CMP EDX, 4h
////////////		JGE short _007B0D05
////////////		MOV DWORD PTR SS : [ESP + 4h] , EDX
////////////		_007B0CE7:
////////////			TEST EBP, EBP
////////////		JE short _007B0CEC
////////////		INC EBX
////////////		_007B0CEC:
////////////		INC EDI
////////////		CMP EDI, 10h
////////////		JGE short _007B0D11
////////////		JMP DWORD PTR DS : [EDI * 4h + _7B0DA0]
////////////		_007B0CF9:
////////////		DEC ECX
////////////		JMP short _007B0C9D
////////////		_007B0CFC:
////////////		INC EAX
////////////		JMP short _007B0C9D
////////////		_007B0CFF:
////////////		INC ECX
////////////		JMP short _007B0C9D
////////////		_007B0D02:
////////////		DEC EAX
////////////		JMP short _007B0C9D
////////////		_007B0D05:
////////////		ADD ESP, 10h
////////////		POP EDI
////////////		POP ESI
////////////		POP EBP
////////////		XOR EAX, EAX
////////////		POP EBX
////////////		RETN 8h
////////////		_007B0D11:
////////////		XOR EAX, EAX
////////////		CMP EBX, 0Ah
////////////		SETGE AL
////////////		ADD ESP, 10h
////////////		POP EDI
////////////		POP ESI
////////////		POP EBP
////////////		POP EBX
////////////		RETN 8h
////////////
////////////	};
////////////}
//////////////DWORD bulgariansCiv = 34;//Civilization::bulgarians;
////////////DWORD _00408EE0 = 0x0408EE0;
////////////DWORD _007B2820 = (DWORD)f_007B2820;
////////////DWORD _00416B30 = 0x0416B30;
////////////DWORD _004089A0 = 0x04089A0;
////////////DWORD _00408B00 = 0x0408B00;
////////////DWORD _007B0BF0 = (DWORD)f_007B0BF0;
////////////DWORD _005FC070 = 0x05FC070;
////////////DWORD _00493B70 = 0x00493B70;
////////////DWORD _00493C90 = 0x0493C90;
////////////DWORD _006137B0 = 0x06137B0;
////////////DWORD _005FD7C0 = 0x05FD7C0;
////////////DWORD _00553EA0 = 0x0553EA0;
////////////DWORD _005FD820 = 0x05FD820;
////////////DWORD _005FD810 = 0x05FD810;
////////////DWORD _005FD800 = 0x05FD800;
////////////DWORD _005FC1B0 = 0x05FC1B0;
////////////
////////////void __declspec(naked)  FixStatisticsDisplayhook()
////////////{
////////////	__asm {
////////////		PUSH -1h
////////////		PUSH 00622DDEh                   ; Entry address
////////////		MOV EAX,DWORD PTR FS:[0]
////////////		PUSH EAX
////////////		MOV DWORD PTR FS:[0],ESP
////////////		SUB ESP,144h
////////////		MOV EDX,DWORD PTR DS:[ECX+100h]
////////////		PUSH EBX
////////////		PUSH EBP
////////////		PUSH ESI
////////////		MOV EAX,DWORD PTR DS:[EDX+5BE0h]
////////////		MOV EDX,DWORD PTR DS:[EDX+0F0h]
////////////		PUSH EDI
////////////		MOV DWORD PTR SS:[ESP+1Ch],ECX
////////////		MOV EBX,DWORD PTR DS:[EAX+88h]
////////////		MOV EAX,DWORD PTR DS:[EAX+8Ch]
////////////		MOV ECX,40h
////////////		LEA EDI,DWORD PTR SS:[ESP+54h]
////////////		MOV ESI,DWORD PTR DS:[EAX+34h]
////////////		OR EAX,0FFFFFFFFh
////////////		REP STOS DWORD PTR ES:[EDI]
////////////		MOV ECX,DWORD PTR DS:[EDX+74h]
////////////		MOV EDX,DWORD PTR DS:[EDX+8Ch]
////////////		MOV DWORD PTR SS:[ESP+18h],EAX
////////////		MOV DWORD PTR SS:[ESP+24h],EAX
////////////		MOV DWORD PTR SS:[ESP+20h],EAX
////////////		MOV DWORD PTR SS:[ESP+34h],EAX
////////////		MOV DWORD PTR SS:[ESP+3Ch],EAX
////////////		MOV EAX,DWORD PTR DS:[ECX+44h]
////////////		MOV ECX,DWORD PTR DS:[EDX+60h]
////////////		MOV DWORD PTR SS:[ESP+2Ch],EBX
////////////		MOVSX EAX,WORD PTR DS:[EAX+6Eh]
////////////		MOV DWORD PTR SS:[ESP+48h],ESI
////////////		MOV DWORD PTR SS:[ESP+44h],0BF800000h
////////////		MOV EAX,DWORD PTR DS:[ECX+EAX*4h]
////////////		MOV DWORD PTR SS:[ESP+30h],7F7FFFFFh
////////////		MOVSX ECX,WORD PTR DS:[EDX+5Eh]
////////////		LEA EDX,DWORD PTR SS:[ESP+50h]
////////////		PUSH EDX
////////////		PUSH ECX
////////////		MOV ECX,DWORD PTR DS:[ESI+0A274h]
////////////		PUSH EAX
////////////		CALL _00408EE0
////////////		MOV EBP,EAX
////////////		MOV ECX,DWORD PTR SS:[ESP+1Ch]
////////////		MOV EDX,DWORD PTR DS:[ECX+13A0h]
////////////		MOV EAX,DWORD PTR DS:[EDX+140h]
////////////		MOV ECX,DWORD PTR DS:[EDX+148h]
////////////		MOV DWORD PTR SS:[ESP+170h],EAX
////////////		MOV EAX,DWORD PTR DS:[EDX+144h]
////////////		MOV DWORD PTR SS:[ESP+50h],ECX
////////////		ADD EAX,EAX
////////////		LEA EAX,DWORD PTR DS:[EAX+EAX*4h]
////////////		MOV DWORD PTR SS:[ESP+174h],EAX
////////////		MOV DWORD PTR SS:[ESP+28h],EBP
////////////		CALL _007B2820
////////////		CDQ
////////////		MOV ECX,32h
////////////		XOR EDI,EDI
////////////		INC EDI
////////////		IDIV ECX
////////////		MOV EAX,DWORD PTR DS:[EBX+14h]
////////////		MOV DWORD PTR SS:[ESP+40h],EDI
////////////		ADD EAX,-2h
////////////		CMP EAX,EDI
////////////		MOV DWORD PTR SS:[ESP+38h],EDX
////////////		JLE _007B0BCC
////////////		_007B0909:
////////////		MOV EAX,DWORD PTR DS:[EBX+18h]
////////////		MOV ESI,1h
////////////		ADD EAX,-2h
////////////		MOV DWORD PTR SS:[ESP+10h],ESI
////////////		CMP EAX,ESI
////////////		JLE _007B0B18
////////////		_007B0920:
////////////		PUSH ESI
////////////		PUSH EDI
////////////		MOV ECX,EBX
////////////		CALL _00416B30
////////////		TEST AL,AL
////////////		JE _007B0B01
////////////		MOV EAX,DWORD PTR SS:[ESP+48h]
////////////		MOV EDX,EDI
////////////		SHL EDX,5h
////////////		MOV ECX,DWORD PTR DS:[EAX+0A214h]
////////////		MOV EAX,DWORD PTR DS:[ECX+ESI*4h]
////////////		MOVZX EAX,BYTE PTR DS:[EAX+EDX+1Fh]
////////////		MOV DL,BYTE PTR DS:[EAX+7A57A0h]
////////////		CMP EAX,1h
////////////		JE short _007B095B
////////////		TEST DL,DL
////////////		JE _007B0B01
////////////		_007B095B:
////////////		PUSH ESI
////////////		PUSH EDI
////////////		MOV ECX,EBP
////////////		CALL _004089A0
////////////		MOV BYTE PTR SS:[ESP+4Ch],AL
////////////		MOV ECX,EBP
////////////		MOV EBX,DWORD PTR SS:[ESP+4Ch]
////////////		PUSH EBX
////////////		CALL _00408B00
////////////		MOV EBP,EAX
////////////		MOV ECX,DWORD PTR SS:[ESP+1Ch]
////////////		MOV EDX,DWORD PTR DS:[ECX+3298h]
////////////		CMP EAX,EDX
////////////		JL _007B0AFD
////////////		PUSH ESI
////////////		PUSH EDI
////////////		CALL _007B0BF0
////////////		TEST EAX,EAX
////////////		JE _007B0AFD
////////////		FILD DWORD PTR SS:[ESP+10h]
////////////		MOV EDX,DWORD PTR SS:[ESP+1Ch]
////////////		PUSH ECX
////////////		FSTP DWORD PTR SS:[ESP+14h]
////////////		FILD DWORD PTR SS:[ESP+44h]
////////////		FSTP DWORD PTR SS:[ESP+18h]
////////////		FLD DWORD PTR SS:[ESP+14h]
////////////		FADD DWORD PTR DS:[635978h]
////////////		FSTP DWORD PTR SS:[ESP]
////////////		FLD DWORD PTR SS:[ESP+18h]
////////////		FADD DWORD PTR DS:[635978h]
////////////		PUSH ECX
////////////		LEA ECX,DWORD PTR DS:[EDX-62Ch]
////////////		FSTP DWORD PTR SS:[ESP]
////////////		CALL _005FC070
////////////		TEST EAX,EAX
////////////		JNZ _007B0AFD
////////////		FLD DWORD PTR SS:[ESP+14h]
////////////		FSUB DWORD PTR SS:[ESP+168h]
////////////		FLD DWORD PTR SS:[ESP+10h]
////////////		FSUB DWORD PTR SS:[ESP+16Ch]
////////////		MOV EAX,EBX
////////////		FLD ST
////////////		FMUL ST,ST(1)
////////////		FLD ST(2)
////////////		FMUL ST,ST(3)
////////////		AND EAX,0FFh
////////////		MOV CL,BYTE PTR SS:[ESP+EAX+54h]
////////////		LEA EBX,DWORD PTR SS:[ESP+EAX+54h]
////////////		FADDP ST(1),ST
////////////		CMP CL,0FFh
////////////		FSTP DWORD PTR SS:[ESP+14h]
////////////		FSTP ST
////////////		FSTP ST
////////////		JNZ short _007B0A27
////////////		MOV ECX,DWORD PTR SS:[ESP+28h]
////////////		PUSH ECX
////////////		MOV ECX,DWORD PTR SS:[ESP+20h]
////////////		PUSH EAX
////////////		CALL _00493B70
////////////		MOV BYTE PTR DS:[EBX],AL
////////////		_007B0A27:
////////////		MOV EDX,DWORD PTR SS:[ESP+2Ch]
////////////		MOV EAX,DWORD PTR DS:[EDX+14h]
////////////		SHR EAX,1h
////////////		MOV ECX,EAX
////////////		SUB EAX,EDI
////////////		SUB ECX,ESI
////////////		IMUL EAX,EAX
////////////		IMUL ECX,ECX
////////////		ADD EAX,ECX
////////////		IMUL EAX,DWORD PTR SS:[ESP+170h]
////////////		MOV DWORD PTR SS:[ESP+10h],EAX
////////////		MOV BL,BYTE PTR DS:[EBX]
////////////		TEST BL,BL
////////////		JBE short _007B0A62
////////////		MOV EAX,EBX
////////////		AND EAX,0FFh
////////////		MOV EDX,DWORD PTR SS:[ESP+50h]
////////////		IMUL EAX,EDX
////////////		ADD DWORD PTR SS:[ESP+10h],EAX
////////////		_007B0A62:
////////////		FILD DWORD PTR SS:[ESP+10h]
////////////		FADD DWORD PTR SS:[ESP+14h]
////////////		FSTP DWORD PTR SS:[ESP+14h]
////////////		CMP EBP,DWORD PTR SS:[ESP+20h]
////////////		JLE short _007B0A7C
////////////		TEST BL,BL
////////////		JNZ short _007B0A7C
////////////		MOV DWORD PTR SS:[ESP+20h],EBP
////////////		_007B0A7C:
////////////		MOV ECX,DWORD PTR SS:[ESP+1Ch]
////////////		PUSH ESI
////////////		PUSH EDI
////////////		CALL _00493C90
////////////		MOV ECX,EAX
////////////		CMP ECX,-1h
////////////		JE short _007B0AAB
////////////		CMP ECX,6h
////////////		JL short _007B0AFD
////////////		MOV EAX,DWORD PTR SS:[ESP+174h]
////////////		CDQ
////////////		IDIV ECX
////////////		MOV DWORD PTR SS:[ESP+10h],EAX
////////////		FILD DWORD PTR SS:[ESP+10h]
////////////		FADD DWORD PTR SS:[ESP+14h]
////////////		JMP short _007B0AAF
////////////		_007B0AAB:
////////////		FLD DWORD PTR SS:[ESP+14h]
////////////		_007B0AAF:
////////////		CMP DWORD PTR SS:[ESP+50h],0h
////////////		JL short _007B0AD3
////////////		CMP EBP,DWORD PTR SS:[ESP+20h]
////////////		JNZ short _007B0AD3
////////////		FCOM DWORD PTR SS:[ESP+30h]
////////////		FSTSW AX
////////////		TEST AH,1h
////////////		JE short _007B0AD3
////////////		FST DWORD PTR SS:[ESP+30h]
////////////		MOV DWORD PTR SS:[ESP+34h],EDI
////////////		MOV DWORD PTR SS:[ESP+3Ch],ESI
////////////		_007B0AD3:
////////////		CMP DWORD PTR SS:[ESP+18h],-1h
////////////		JE short _007B0AED
////////////		FILD DWORD PTR SS:[ESP+38h]
////////////		FADD DWORD PTR SS:[ESP+44h]
////////////		FLD ST(1)
////////////		FCOMPP
////////////		FSTSW AX
////////////		TEST AH,1h
////////////		JE short _007B0AFB
////////////		_007B0AED:
////////////		FSTP DWORD PTR SS:[ESP+44h]
////////////		MOV DWORD PTR SS:[ESP+18h],EDI
////////////		MOV DWORD PTR SS:[ESP+24h],ESI
////////////		JMP short _007B0AFD
////////////		_007B0AFB:
////////////		FSTP ST
////////////		_007B0AFD:
////////////		MOV EBX,DWORD PTR SS:[ESP+2Ch]
////////////		_007B0B01:
////////////		MOV EAX,DWORD PTR DS:[EBX+18h]
////////////		MOV EBP,DWORD PTR SS:[ESP+28h]
////////////		INC ESI
////////////		ADD EAX,-2h
////////////		CMP ESI,EAX
////////////		MOV DWORD PTR SS:[ESP+10h],ESI
////////////		JL _007B0920
////////////		_007B0B18:
////////////		MOV EAX,DWORD PTR DS:[EBX+14h]
////////////		INC EDI
////////////		ADD EAX,-2h
////////////		MOV DWORD PTR SS:[ESP+40h],EDI
////////////		CMP EDI,EAX
////////////		JL _007B0909
////////////		MOV EAX,DWORD PTR SS:[ESP+34h]
////////////		CMP EAX,-1h
////////////		JE short _007B0B40
////////////		MOV DWORD PTR SS:[ESP+18h],EAX
////////////		MOV EAX,DWORD PTR SS:[ESP+3Ch]
////////////		MOV DWORD PTR SS:[ESP+24h],EAX
////////////		_007B0B40:
////////////		CMP DWORD PTR SS:[ESP+18h],-1h
////////////		JE _007B0BCC
////////////		PUSH 80h
////////////		CALL _006137B0
////////////		MOV EDI,EAX
////////////		ADD ESP,4h
////////////		MOV DWORD PTR SS:[ESP+38h],EDI
////////////		TEST EDI,EDI
////////////		MOV DWORD PTR SS:[ESP+15Ch],0h
////////////		JE short _007B0BCC
////////////		MOV ESI,DWORD PTR SS:[ESP+164h]
////////////		MOV ECX,ESI
////////////		CALL _005FD7C0
////////////		PUSH EAX
////////////		MOV ECX,ESI
////////////		CALL _00553EA0
////////////		PUSH EAX
////////////		MOV ECX,ESI
////////////		CALL _005FD820
////////////		PUSH ECX
////////////		MOV ECX,ESI
////////////		FSTP DWORD PTR SS:[ESP]
////////////		CALL _005FD810
////////////		PUSH ECX
////////////		MOV ECX,ESI
////////////		FSTP DWORD PTR SS:[ESP]
////////////		CALL _005FD800
////////////		PUSH ECX
////////////		FSTP DWORD PTR SS:[ESP]
////////////		FILD DWORD PTR SS:[ESP+38h]
////////////		PUSH 0h
////////////		PUSH ECX
////////////		FADD DWORD PTR DS:[635978h]
////////////		FSTP DWORD PTR SS:[ESP]
////////////		FILD DWORD PTR SS:[ESP+34h]
////////////		PUSH ECX
////////////		MOV ECX,EDI
////////////		FADD DWORD PTR DS:[635978h]
////////////		FSTP DWORD PTR SS:[ESP]
////////////		CALL _005FC1B0
////////////		JMP short _007B0BCE
////////////		_007B0BCC:
////////////		XOR EAX,EAX
////////////		_007B0BCE:
////////////		MOV ECX,DWORD PTR SS:[ESP+154h]
////////////		POP EDI
////////////		POP ESI
////////////		POP EBP
////////////		POP EBX
////////////		MOV DWORD PTR FS:[0h],ECX
////////////		ADD ESP,150h
////////////		RETN 14h
////////////
////////////
////////////
////////////	};
////////////}

#pragma endregion


//display villager resssources add stone miner like up 1.5 
//00521110   $ 81EC 44020000  SUB ESP,244
 // Fix statistics display bugs
////Injection(0x2a
////Injection(0x52124e, "E9AD7D2900"),
////Injection(0x5214da, "E93A7B2900"),
////Injection(0x52145f, "E9047C2900"),
////Injection(0x42fc70, "E9BB943800"),
////Injection(0x42fca8, "E9B3943800"),
////Injection(0x521785, "0FBF81D0110000E9240100009090"),
////Injection(0x521928, "0FBF81C41100000FBF911C12000001D0E9820000009090"),
////Injection(0x521a36, "0FBF81DE1100000FBF913212000001D00FBF910A12000001D00FBF91301200000FBF892A120000EB6A9090"),
////Injection(0x521b44, "0FBF81F01100000FBF91EC11000001D0EB6A9090909090"),
//
//
//
//0052124E   .-E9 AD7D2900    JMP age2_x1_.007B9000
//void __declspec(naked)  FixStatisticsDisplayhook0052124E()
//{
//	__asm {
//	};
//}
DWORD _0052125C = 0x052125C;
void __declspec(naked)  FixStatisticsDisplayhook007B905E()
{
	__asm {
		INC WORD PTR SS : [ESP + 2Eh]
		JMP _0052125C
	};
}
////DWORD _0052125C = 0x052125C;
void __declspec(naked)  FixStatisticsDisplayhook007B9000()
{
	__asm {
		INC DWORD PTR SS : [ESP + 48h]
		TEST AL, AL
		JE __0052125C
		INC DWORD PTR SS : [ESP + 4Ch]
		DEC DWORD PTR SS : [ESP + 48h]
		JMP _0052125C

		__0052125C:
		JMP _0052125C
	};
}
char _007B91B0[25] = { "%s: %d" };
DWORD _00521536 = 0x0521536;
DWORD _0061442B = 0x061442B;
void __declspec(naked)  FixStatisticsDisplayhook007B9019()
{
	__asm {
		MOV ECX, DWORD PTR DS : [7912A0h]
		PUSH 13E2h
		MOV EAX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EAX + 24h]
		MOV DWORD PTR SS : [ESP + 10h] , EAX
		MOV EAX, DWORD PTR SS : [ESP + 14h]
		MOV ECX, DWORD PTR SS : [ESP + 10h]
		LEA EDX, DWORD PTR SS : [ESP + 54h]
		MOV EAX, DWORD PTR SS : [ESP + EAX * 4h + 20h]
		PUSH EAX
		PUSH ECX
		PUSH offset _007B91B0; ASCII "%s: %d"//age2_x1_.007B91B0
		PUSH EDX
		CALL _0061442B
		MOV EAX, DWORD PTR DS : [ESI + 8h]
		MOV ECX, DWORD PTR DS : [ESI + 4h]
		MOV EDX, DWORD PTR DS : [ESI]
		ADD ESP, 10h
		SUB EDI, 4h
		INC EBX
		JMP _00521536
	};
}
DWORD _0054A510 = 0x054A510;
DWORD _0052155F = 0x052155F;
void __declspec(naked)  FixStatisticsDisplayhook007B9068()
{
	__asm {
		MOV ECX, DWORD PTR DS : [7912A0h]
		PUSH 1406h
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 24h]
		MOV DWORD PTR SS : [ESP + 10h] , EAX
		MOV EAX, DWORD PTR SS : [ESP + 14h]
		MOV ECX, DWORD PTR SS : [ESP + 10h]
		LEA EDX, DWORD PTR SS : [ESP + 54h]
		MOVSX EAX, WORD PTR SS : [ESP + EAX * 4h + 22h]
		TEST EAX, EAX
		JLE short _007B90D6
		PUSH EAX
		PUSH ECX
		PUSH offset _007B91B0; ASCII "%s: %d"// age2_x1_.007B91B0
		PUSH EDX
		CALL _0061442B
		MOV EAX, DWORD PTR DS : [ESI + 8h]
		MOV ECX, DWORD PTR DS : [ESI + 4h]
		MOV EDX, DWORD PTR DS : [ESI]
		ADD ESP, 10h
		SUB EDI, 4h
		INC EBX
		PUSH 0h
		PUSH 0h
		PUSH 0h
		PUSH 0h
		PUSH EAX
		PUSH ECX
		MOV ECX, DWORD PTR DS : [EDI]
		PUSH EDX
		PUSH 0h
		LEA EAX, DWORD PTR SS : [ESP + 74h]
		PUSH 0DFDFDFh
		PUSH EAX
		PUSH 5h
		CALL _0054A510
		MOV ECX, DWORD PTR DS : [EDI]
		PUSH 1h
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 14h]
		_007B90D6:
		MOV ECX, DWORD PTR DS : [7912A0h]
		PUSH 156Ah
		MOV EDX, DWORD PTR DS : [ECX]
		CALL DWORD PTR DS : [EDX + 24h]
		MOV DWORD PTR SS : [ESP + 10h] , EAX
		MOV EAX, DWORD PTR SS : [ESP + 14h]
		MOV ECX, DWORD PTR SS : [ESP + 10h]
		LEA EDX, DWORD PTR SS : [ESP + 54h]
		MOVSX EAX, WORD PTR SS : [ESP + EAX * 4h + 20h]
		TEST EAX, EAX
		JLE __0052155F
		PUSH EAX
		PUSH ECX
		PUSH offset _007B91B0; ASCII "%s: %d"//age2_x1_.007B91B0
		PUSH EDX
		CALL _0061442B
		MOV EAX, DWORD PTR DS : [ESI + 8h]
		MOV ECX, DWORD PTR DS : [ESI + 4h]
		MOV EDX, DWORD PTR DS : [ESI]
		ADD ESP, 10h
		SUB EDI, 4h
		INC EBX
		JMP _00521536

		__0052155F:
		JMP _0052155F
	};
}
DWORD _0042FC78 = 0x042FC78;
void __declspec(naked)  FixStatisticsDisplayhook007B9130()
{
	__asm {
			MOV WORD PTR SS:[ESP+24h],DX
			AND EBX,0FFh
			CMP BYTE PTR DS:[EAX+4],46h
			MOV BH,BYTE PTR DS:[EAX+16h]
			JB short _007B9150
			MOVZX EDX,BYTE PTR DS:[EAX+1B5h]
			SHL EDX,10h
			OR EBX,EDX
			_007B9150:
			MOV EDX,DWORD PTR DS:[EAX+50h]
			CMP BL,3h
			MOV WORD PTR SS:[ESP+26h],DX
			JMP _0042FC78
	};
}
DWORD _0042FCCF = 0x042FCCF;
DWORD _0042FCB0 = 0x042FCB0;
void __declspec(naked)  FixStatisticsDisplayhook007B9160()
{
	__asm {
			CMP BL,BYTE PTR DS:[EAX+97h]
			JE __0042FCB0
			CMP BH,BYTE PTR DS:[EAX+16h]
			JNZ short _007B91A0
			TEST EBX,0FFFF0000h
			MOV CL,BYTE PTR DS:[EAX+4h]
			JNZ short _007B91A0
			CMP CL,46h
			MOV CX,WORD PTR SS:[ESP+2Ah]
			JNZ short _007B91A0
			CMP CX,WORD PTR DS:[EAX+50h]
			JNZ short _007B91A0
			CMP CX,0FFFFh
			MOV CL,BYTE PTR DS:[EAX+1B5h]
			JE short _007B91A0
			AND CL,CL
			JE __0042FCB0
			_007B91A0:
			JMP _0042FCCF
			__0042FCB0:
			JMP _0042FCB0
	};
}
//007B905E
DWORD _007B905E = (DWORD)FixStatisticsDisplayhook007B905E;

void  FixStatisticsDisplay()
{
	////////Injection(0x521c37, "0FBF810C1200000FBF91F211000001D0EB3D9090909090"),
	//////BYTE _Arr_0x521c37[] = { 0x0 };
	//////writeData(0x521cfd, _Arr_0x521c37, );
	////////Injection(0x521cfd, "0FBF81221200000FBF91DC11000001D0E9EE0000009090"),
	//////BYTE _Arr_0x521cfd[23] = {0x0F,0xBF,0x81,0x22,0x12,0x00,0x00,0x0F,0xBF,0x91,0xDC,0x11,0x00,0x00,0x01,0xD0,0xE9,0xEE,0x00,0x00,0x00,0x90,0x90};
	//////writeData(0x521cfd, _Arr_0x521cfd, 23 );
	////////Injection(0x521e77, "0FBF81E81100000FBF891A120000660F1F840000000000"),
	//////BYTE _Arr_0521e77[23] = {0x0F,0xBF,0x81,0xE8,0x11,0x00,0x00,0x0F,0xBF,0x89,0x1A,0x12,0x00,0x00,0x66,0x0F,0x1F,0x84,0x00,0x00,0x00,0x00,0x00};
	//////writeData(0x521e77, _Arr_0521e77,23);
	/**/
	////Injection(0x52124e, "E9AD7D2900");//JMP 007B9000
	InjectHook(0x52124e, FixStatisticsDisplayhook007B9000, PATCH_JUMP);
	////Injection(0x5214da, "E93A7B2900");//JMP 007B9019
	InjectHook(0x5214da, FixStatisticsDisplayhook007B9019, PATCH_JUMP);
	////Injection(0x52145f, "E9047C2900");//JMP 007B9068
	InjectHook(0x52145f, FixStatisticsDisplayhook007B9068, PATCH_JUMP);
	////Injection(0x42fc70, "E9BB943800");//JMP 007B9130
	InjectHook(0x42fc70, FixStatisticsDisplayhook007B9130, PATCH_JUMP);
	////Injection(0x42fca8, "E9B3943800");//JMP 007B9160
	InjectHook(0x42fca8, FixStatisticsDisplayhook007B9160, PATCH_JUMP);

	////Injection(0x5215d8	, "5E907B00"),//007B905E
	////Injection(0x52168c, "5E907B00"),//007B905E
	//over write switch case
	writeDword(0x5215d8, _007B905E);
	writeDword(0x52168c, _007B905E);
	writeByte(0x51b121,0x10);
	writeByte(0x51b136,0x10);
	writeByte(0x51b14a,0x10);
	writeByte(0x516c7d,0x11);
	writeByte(0x518a60,0x11);//update score
	writeByte(0x519b61,0x11);
	writeByte(0x51a398,0x11);//0x51a398
	writeByte(0x51b215,0x11);//0x51b215
	writeByte(0x520d8d,0x11);//0x520d8d
	writeByte(0x5210d4,0x11);//0x5210d4
	writeByte(0x5210dc,0x11);//0x5210dc
	writeByte(0x521756,0x11);//0x521756
	writeByte(0x521ef0,0x11);//0x521ef0
	writeByte(0x523f0b,0x11);//0x523f0b
	writeByte(0x521572,0x11);//0x521572/ici
	writeByte(0x5213fb,0x83);
	writeByte(0x5219ea,0x83);
	writeByte(0x521af8,0x83);
	writeByte(0x521beb,0x83);
	writeByte(0x521cb1,0x83);
	writeByte(0x521e2b,0x83);
	writeByte(0x521ebb,0x83);
	writeByte(0x51a2d6,0x54);
	writeByte(0x51a2f6,0x54);
	writeByte(0x51b2c9,0x54);
	writeByte(0x51a2dd,0x5C);
	writeByte(0x5212f4, 0x08);
	writeByte(0x5212f4+1, 0x12);
	writeByte(0x521301, 0x08);
	writeByte(0x521301+1, 0x12);
	writeByte(0x521359, 0x04);
	writeByte(0x521359+1, 0x12);
	writeByte(0x521372, 0x04);
	writeByte(0x521372+1, 0x12);
	writeByte(0x5213de, 0x00);
	writeByte(0x5213de+1, 0x12);
	writeByte(0x5213eb, 0x00);
	writeByte(0x5213eb+1, 0x12);
	writeByte(0x5218fe, 0x08);
	writeByte(0x5218fe+1, 0x12);
	writeByte(0x52190b, 0x08);
	writeByte(0x52190b+1, 0x12);
	writeByte(0x51bf36, 0x08);
	writeByte(0x51bf36+1, 0x12);
	writeByte(0x51b121, 0x10);
	writeByte(0x51b136, 0x10);
	writeByte(0x51b14a, 0x10);
	writeByte(0x516c7d, 0x11);
	writeByte(0x518a60, 0x11);
	writeByte(0x519b61, 0x11);
	writeByte(0x51a398, 0x11);
	writeByte(0x51b215, 0x11);
	writeByte(0x520d8d, 0x11);
	writeByte(0x5210d4, 0x11);
	writeByte(0x5210dc, 0x11);
	writeByte(0x521756, 0x11);
	writeByte(0x521ef0, 0x11);
	writeByte(0x523f0b, 0x11);
	writeByte(0x521572, 0x11);
	writeByte(0x5213fb, 0x83);
	writeByte(0x5219ea, 0x83);
	writeByte(0x521af8, 0x83);
	writeByte(0x521beb, 0x83);
	writeByte(0x521cb1, 0x83);
	writeByte(0x521e2b, 0x83);
	writeByte(0x521ebb, 0x83);
	writeByte(0x51a2d6, 0x54);
	writeByte(0x51a2f6, 0x54);
	writeByte(0x51b2c9, 0x54);
	writeByte(0x51a2dd, 0x5C);
	writeByte(0x52119d, 0x50);
	writeByte(0x521502, 0x20);
	writeByte(0x5214f0, 0x17);
	writeByte(0x521210, 0x44);
	writeByte(0x5214cf, 0x1D);
	writeByte(0x52121c, 0x40);
	writeByte(0x5214c0, 0x1C);
	writeByte(0x5211dc, 0x3C);
	writeByte(0x5214ae, 0x21);
	writeByte(0x5211e2, 0x38);
	writeByte(0x52149f, 0x1B);
	writeByte(0x521241, 0x34);
	writeByte(0x52148d, 0x22);
	writeByte(0x521216, 0x30);
	writeByte(0x52147b, 0x1A);
	writeByte(0x52123b, 0x2C);
	writeByte(0x5211d3, 0x28);
	writeByte(0x521454, 0x1F);
	writeByte(0x52120a, 0x24);
	writeByte(0x52143f, 0x1E);
	writeByte(0x52125b, 0x20);
	writeByte(0x52142d, 0x2B);
}

//load language dll
//0043AFF0   >-E9 BD613E7B     JMP scout.7B8211B2
char aocc10c_lang[100] = { "language_default.dll" };
//0043AFD4 > 68 FCF56600    PUSH age2_x1.0066F5FC;  ASCII "language_x1_p1.dll"
//0043AFD9.FFD6           CALL ESI
DWORD _0043BB45 = 0x043BB45;
DWORD _0043AFF5 = 0x043AFF5;
 
DWORD Aoc10C_695388 ;
void __declspec(naked)  Aoc10C_language_dllhook()
{
	__asm {
		//MOV DWORD PTR SS:[EBP+64],1
		//JMP age2_x1_.0043BB43
		//JNZ  __005C69F7
		//MOV DWORD PTR SS : [EBP + 64h] , 1h
		//JMP _005C7545
		PUSH offset aocc10c_lang;  ASCII "language_x1_p1.dll"//age2_x1_.0066F5FC                         
		//773711B2   68 84303777      PUSH scout.77373084; ASCII "C:\Users\m\Desktop\Age of Empires II\Age2_x1\language_default.dll"
		CALL ESI
		CMP EAX, EBX
		MOV Aoc10C_695388, EAX
		/*JNZ short _773711D1
		MOV DWORD PTR SS : [EBP + 64h] , 1
		XOR EAX, EAX
		JMP _0043BB45; age2_x1_.0043BB45*/
		_773711D1:
		LEA ECX, DWORD PTR SS : [ESP + 24h]
		PUSH ECX
		JMP _0043AFF5; age2_x1_.0043AFF5



	};
}
//0043CF10.A1 88536900    MOV EAX, DWORD PTR DS : [695388]//celui là


//005C69D9   . 8D95 A0160000  LEA EDX, DWORD PTR SS : [EBP + 16A0]
//005C69DF   . 52             PUSH EDX; / FileName
//005C69E0.FF15 E0416300  CALL DWORD PTR DS : [<&KERNEL32.LoadLibraryA>] ; \LoadLibraryA

//005C892B   . E8 1019EBFF    CALL age2_x1.0047A240

DWORD _0043CF51 = 0x043CF51;
DWORD _005E4750 = 0x05E4750;
DWORD _0058E820 = 0x058E820;
 
void __declspec(naked)  Aoc10C_language_dllhook2()
{
	__asm {
		CALL _005E4750; age2_x1_.005E4750
		CMP BYTE PTR DS : [EAX] , 0
		JNZ short _773711F6
		PUSH EDI
		PUSH ESI
		PUSH EBX
		PUSH Aoc10C_695388//DWORD PTR DS : [77373080]
		CALL _0058E820; age2_x1_.0058E820
		_773711F6:
		JMP _0043CF51; age2_x1_.0043CF51


	};
}
void Aoc10C_language_dll()
{
	InjectHook(0x043AFF0, Aoc10C_language_dllhook, PATCH_JUMP);//0043AFF0   >-E9 BD61F376    JMP scout.773711B2
	InjectHook(0x043CF4C, Aoc10C_language_dllhook2, PATCH_JUMP);//0043CF4C   .-E9 8B42F376    JMP scout.773711DC
}
void selectAllHotkey(HMODULE hModule)
{
	autoFarmAnFishTrapReseed();
	FixStatisticsDisplay();
	Aoc10C_language_dll();
	hotkeyHook();
	//LoadLibraryA("scout.dll");
	selectAllProc(hModule);
}

//MQ SQ 
//007D9000   F605 41527A00 01 TEST BYTE PTR DS : [7A5241] , 1
//007D9007   74 0A            JE SHORT age2_x1_.007D9013
//             Injection(0x504084, "E977A72A00");
//Injection(0x4fccb3, "E9481C2B00");
//Injection(0x505f54, "E9E7892A00");
//Injection(0x506052, "E909892A00");
//Injection(0x506068, "E913892A00");
//Injection(0x50607d, "E91E892A00");
//Injection(0x50636a, "E951862A00");
//Injection(0x5070dd, "E9FE782A00");
//Injection(0x4fdbbc, "E9BF0E2B00");
//DWORD _006137C9 = 0x06137C9;
//DWORD _006137C9 = 0x06137C9;
void __declspec(naked)  f_007D93002()
{
	__asm {
			PUSH ESI
			PUSH EDI
			PUSH EBX
			PUSH EBP
			MOV EDX,DWORD PTR SS:[ESP+18h]
			LEA EBP,DWORD PTR DS:[EDX*4h+8h]
			MOV EBX,ECX
			PUSH EBP
			PUSH 1h
			CALL Aoc10C_006137C9//age2_x1_.006137C9
			ADD ESP,8h
			TEST EAX,EAX
			JE short _007D9359
			MOV BYTE PTR DS:[EAX],70h
			MOV EDX,DWORD PTR SS:[ESP+14h]
			MOV ECX,DWORD PTR SS:[ESP+18h]
			MOV WORD PTR DS:[EAX+4h],DX
			MOV EDX,DWORD PTR SS:[ESP+20h]
			MOV BYTE PTR DS:[EAX+6h],CL
			MOV BYTE PTR DS:[EAX+7h],DL
			LEA EDI,DWORD PTR DS:[EAX+8h]
			MOV ESI,DWORD PTR SS:[ESP+1Ch]
			REP MOVS DWORD PTR ES : [EDI] , DWORD PTR DS : [ESI]
			MOV EDX,DWORD PTR SS:[ESP+24h]
			MOV ECX,DWORD PTR DS:[EDX+0Ch]
			MOV EDX,DWORD PTR DS:[ECX+9Ch]
			MOV ECX,EBX
			PUSH EDX
			PUSH EBP
			PUSH EAX
			CALL _005C8F70//age2_x1_.005C8F70
			_007D9359:
			POP EBP
			POP EBX
			POP EDI
			POP ESI
			RETN 14h


	};
}
DWORD _7A5241;
DWORD _7A50D4;
DWORD Aoc10c_005E7380 = 0x05E7380;
DWORD Aoc10c_0044D9C0 = 0x044D9C0;
DWORD Aoc10c_0044D9A0 = 0x044D9A0;
DWORD Aoc10c_005E7560 = 0x05E7560;
DWORD Aoc10c_0052470 = 0x052470;
DWORD AOC_0052470A = 0x052470A;
DWORD aoc10c_007D9300 = (DWORD)f_007D93002;
void __declspec(naked)  Aoc10C_MQ_Hook()
{
	__asm {
			TEST BYTE PTR DS:[_7A5241],1
			JE short _007D9013
			CMP WORD PTR DS:[ECX+1234h],1h
			JG short _mq
			_007D9013:
			SUB ESP, 208h
			PUSH EBP
			PUSH ESI
			PUSH EDI
			MOV EDI, ECX
			MOV ECX, DWORD PTR DS : [7912A0h]
			PUSH 0h
			CALL Aoc10c_005E7380//age2_x1_.005E7380
			TEST EAX, EAX
			JNZ short _007D906B
			MOV ECX, DWORD PTR DS : [EDI + 107Ch]
			CALL Aoc10c_0044D9C0//age2_x1_.0044D9C0
			CMP AL, 3h
			JNZ short _007D904B
			MOV ECX, DWORD PTR DS : [EDI + 107Ch]
			PUSH 1h
			CALL Aoc10c_0044D9A0//age2_x1_.0044D9A0
			_007D904B:
			MOV ECX, DWORD PTR DS : [7912A0h]
			CALL Aoc10c_005E7560//age2_x1_.005E7560
			MOV EDX, EAX
			MOV EAX, DWORD PTR DS : [EDI + 1230h]
			TEST EAX, EAX
			JE short _007D906B
			CMP EDX, DWORD PTR DS : [EAX + 0Ch]
			JE __0052470A
			_007D906B:
			POP EDI
			POP ESI
			POP EBP
			ADD ESP, 208h
			RETN 8h



			_mq:
			SUB ESP,408h
			PUSH EBP
			PUSH EBX
			PUSH ESI
			PUSH EDI
			MOV EDI,ECX
			MOV ECX,DWORD PTR DS:[7912A0h]
			PUSH 0h
			CALL Aoc10c_005E7380//age2_x1_.005E7380
			TEST EAX,EAX
			JNZ _007D92E7
			MOV ECX,DWORD PTR DS:[EDI+107Ch]
			CALL Aoc10c_0044D9C0//age2_x1_.0044D9C0
			CMP AL,3h
			JNZ short _007D90B4
			MOV ECX,DWORD PTR DS:[EDI+107Ch]
			PUSH 1
			CALL Aoc10c_0044D9A0// age2_x1_.0044D9A0
			_007D90B4:
			MOV EBP,DWORD PTR DS:[EDI+1230h]
			AND EBP,EBP
			JE _007D92E7
			MOV ECX,DWORD PTR DS:[7912A0h]
			CALL Aoc10c_005E7560//age2_x1_.005E7560
			CMP EAX,DWORD PTR SS:[EBP+0Ch]
			JNZ _007D92E7
			MOV ECX,DWORD PTR SS:[EBP+8h]
			CMP BYTE PTR DS:[ECX+4h],50h
			JNZ _007D92E7
			MOVSX EBP,WORD PTR DS:[ECX+10h]
			LEA ECX,DWORD PTR DS:[EAX+1C4h]
			MOV EAX,DWORD PTR DS:[EAX+268h]
			XOR EDX,EDX
			DEC EAX
			JL _007D92E7
			XOR EBX,EBX
			MOV DWORD PTR SS:[ESP+10h],EDX
			_007D9102:
			MOV ESI,DWORD PTR DS:[ECX+EAX*4h]
			AND ESI,ESI
			JE short _007D9133
			CMP BYTE PTR DS:[ESI+48h],2h
			JNZ short _007D9133
			MOV EDX,DWORD PTR DS:[ESI+8h]
			CMP WORD PTR DS:[EDX+10h],BP
			JNZ short _007D9133
			MOVSX EDX,WORD PTR DS:[ESI+1C8h]
			CMP EDX,0Fh
			JGE short _007D9133
			MOV ESI,DWORD PTR DS:[ESI+4h]
			ADD DWORD PTR SS:[ESP+10h],EDX
			MOV DWORD PTR SS:[ESP+EBX*4h+220h],ESI
			INC EBX
			_007D9133:
			DEC EAX
			JGE short _007D9102
			MOV EAX,EBX
			LEA EAX,DWORD PTR DS:[EAX+EAX*2h]
			LEA EAX,DWORD PTR DS:[EAX+EAX*4h]
			SUB EAX,DWORD PTR SS:[ESP+10h]
			MOV DWORD PTR SS:[ESP+218h],EBX
			MOV DWORD PTR SS:[ESP+21Ch],EAX
			JG short _007D919C
			MOV ECX,DWORD PTR DS:[7912A0h]
			PUSH 0h
			PUSH 0h
			PUSH 3h
			CALL _005EB990//age2_x1_.005EB990
			MOV ECX,DWORD PTR DS:[7912A0h]
			LEA EAX,DWORD PTR SS:[ESP+18h]
			PUSH 200h
			PUSH EAX
			MOV EDX,DWORD PTR DS:[ECX]
			PUSH 0C10h
			CALL DWORD PTR DS:[EDX+28h]
			PUSH 0h
			LEA ECX,DWORD PTR SS:[ESP+1Ch]
			PUSH 24h
			PUSH ECX
			PUSH 1h
			MOV ECX,EDI
			CALL _00520030//age2_x1_.00520030
			POP EDI
			POP ESI
			POP EBX
			POP EBP
			ADD ESP,408h
			RETN 8h
			_007D919C:
			MOV ESI,DWORD PTR SS:[ESP+420h]
			CMP EAX,ESI
			JGE short _007D91A9
			MOV ESI,EAX
			_007D91A9:
			MOV EBP,DWORD PTR SS:[ESP+41Ch]
			AND SI,SI
			JLE _007D92A4
			MOVSX EDX,SI
			PUSH 0h
			PUSH 0h
			MOV DWORD PTR SS:[ESP+18h],EDX
			PUSH 1h
			FILD DWORD PTR SS:[ESP+1Ch]
			PUSH ECX
			MOV ECX,DWORD PTR DS:[7912A0h]
			LEA EAX,DWORD PTR SS:[ESP+20h]
			FSTP DWORD PTR SS:[ESP]
			PUSH EAX
			PUSH EBP
			CALL Aoc10c_005E7560//age2_x1_.005E7560
			MOV ECX,EAX
			CALL _00457CB0//age2_x1_.00457CB0
			TEST AL,AL
			JNZ _007D92A4
			XOR EBX,EBX
			CMP SI,1h
			JLE short _007D9235
			_007D91F6:
			DEC ESI
			PUSH 0h
			MOVSX ECX,SI
			MOV DWORD PTR SS:[ESP+18h],ECX
			PUSH 0h
			FILD DWORD PTR SS:[ESP+1Ch]
			PUSH 1h
			PUSH ECX
			MOV ECX,DWORD PTR DS:[7912A0h]
			LEA EDX,DWORD PTR SS:[ESP+20h]
			FSTP DWORD PTR SS:[ESP]
			PUSH EDX
			PUSH EBP
			CALL Aoc10c_005E7560//age2_x1_.005E7560
			MOV ECX,EAX
			CALL _00457CB0//age2_x1_.00457CB0
			CMP AL,1h
			JE short _007D9230
			CMP SI,1h
			JG short _007D91F6
			JMP short _007D9235
			_007D9230:
				MOV EBX,1h
			_007D9235:
			MOV AX,WORD PTR SS:[ESP+10h]
			CMP AX,0BBDh
			JE short _007D924E
			CMP AX,0BE6h
			JE short _007D924E
			PUSH 0h
			PUSH 0h
			PUSH 3h
			JMP short _007D9254
			_007D924E:
			PUSH 0h
			PUSH 0h
			PUSH 24h
			_007D9254:
			MOV ECX,DWORD PTR DS:[7912A0h]
			CALL _005EB990//age2_x1_.005EB990
			MOV ECX,DWORD PTR DS:[7912A0h]
			LEA EDX,DWORD PTR SS:[ESP+18h]
			PUSH 200h
			PUSH EDX
			MOVSX EDX,WORD PTR SS:[ESP+18h]
			MOV EAX,DWORD PTR DS:[ECX]
			PUSH EDX
			PUSH 1h
			PUSH 67h
			CALL DWORD PTR DS:[EAX+2Ch]
			PUSH -1h
			PUSH 0h
			MOV ECX,DWORD PTR DS:[EDI+1178h]
			PUSH -1h
			PUSH 0h
			PUSH 0h
			PUSH 0h
			PUSH 0h
			LEA EAX,DWORD PTR SS:[ESP+34h]
			PUSH 24h
			PUSH EAX
			PUSH 1
			CALL _0054A1F0//age2_x1_.0054A1F0
			AND EBX,EBX
			JE short _007D92E7
			_007D92A4:
			MOV EAX,DWORD PTR DS:[7912A0h]
			MOV EDX,DWORD PTR DS:[EDI+121Ch]
			MOV WORD PTR DS:[EAX+42Ch],BP
			MOV BYTE PTR DS:[EAX+430h],0h
			MOV ECX,DWORD PTR DS:[EDX+68h]
			MOV WORD PTR DS:[EAX+42Eh],0h
			MOV EDX,DWORD PTR DS:[EDI+1230h]//selection? 
			MOV EBX,DWORD PTR SS:[ESP+218h]
			LEA EAX,DWORD PTR SS:[ESP+220h]
			PUSH EDX
			PUSH ESI
			PUSH EAX
			PUSH EBX
			PUSH EBP
			CALL aoc10c_007D9300// age2_x1_.007D9300//this is the sync function it think
			_007D92E7:
			POP EDI
			POP ESI
			POP EBX
			POP EBP
			ADD ESP,408h
			RETN 8h


			__0052470A:
			JMP AOC_0052470A

	};
}

char arr_SQ[10] = {"SQ"};
char arr_MQ[10] = {"MQ"};
DWORD _00551390 = 0x0551390;
DWORD _7A50D8;
DWORD _7A50DC;
DWORD _7AF150;

 
void __declspec(naked)  Aoc10C_MQ_HookButton007AEB20()
{
	__asm {
		MOV AL, BYTE PTR DS : [_7A5241]
		MOV ECX, DWORD PTR DS : [_7A50D4]
		MOV EDX, offset arr_SQ; ASCII "SQ"
		AND AL, 1h
		JE short _007AEB3A
		MOV EDX, offset arr_MQ; ASCII "MQ"
		_007AEB3A:
		PUSH EDX
		PUSH 0h
		CALL _00551390
		RETN
	}
}
 

DWORD _00504D10 = 0x0504D10;
DWORD _0050408A = 0x050408A;
DWORD _0055FCE0 = 0x055FCE0;
//DWORD _0055D4F0 = 0x055D4F0;
DWORD _007AEB20 = (DWORD)Aoc10C_MQ_HookButton007AEB20;
void __declspec(naked)  Aoc10C_MQ_HookButton()
{
	__asm {
		PUSH 0h
		MOV EDX, DWORD PTR DS : [ESI]
		PUSH 0h
		PUSH 0Bh
		PUSH 25h
		PUSH 25h
/*		PUSH 1F8h
		PUSH 157h*/	
		PUSH 1EAh
		PUSH 100h
		LEA EDI, DWORD PTR DS : [_7A50D4]
		PUSH 0h
		PUSH 3EAh
		PUSH EDI
		PUSH ESI
		MOV ECX, ESI
		CALL DWORD PTR DS : [EDX + 108h]
		TEST EAX, EAX
		JE __00504D10
		CALL _007AEB20
		MOV EAX, DWORD PTR DS : [EDI]
		PUSH -1h
		PUSH 7601h
		PUSH EAX
		MOV ECX, ESI
		CALL _0055FCE0
		PUSH 1h
		MOV EDX, DWORD PTR DS : [ESI]
		PUSH 0h
		JMP _0050408A


		__00504D10:
		JMP _00504D10
	}
}	
 
DWORD _00543A40 = 0x0543A40;
//DWORD _00551390 = 0x0551390;
char multiplequeue[25] = { "Multiple Queue" };
void __declspec(naked)  Aoc10C_MQ_HookButton007AEB50()
{
	__asm {
		MOV EDX, DWORD PTR DS : [7912A0h]
		MOV AL, BYTE PTR DS : [_7A5241]
		MOV ECX, DWORD PTR DS : [EDX + 1DCh]
		AND AL, 1h
		JNZ short _007AEB79
		MOV EAX, 1h
		PUSH offset arr_MQ; ASCII "MQ"
		OR BYTE PTR DS : [_7A5241] , 1h
		JMP short _007AEB87
		_007AEB79:
		XOR EAX, EAX
		PUSH offset arr_SQ; ASCII "SQ"
		AND BYTE PTR DS : [_7A5241] , 0FEh
		_007AEB87:
		CMP BYTE PTR DS : [EDX + 9B2h] , 0h
		JNZ short _007AEB9D
		PUSH EAX
		PUSH offset multiplequeue; ASCII "Multiple Queue"
		PUSH 1h
		CALL _00543A40
		_007AEB9D:
		MOV ECX, DWORD PTR DS : [_7A50D4]
		PUSH 0h
		CALL _00551390
		RETN
	}
}
 
//DWORD _007AEAE0 = (DWORD)Aoc10C_MQ_HookButton007AEAE0;
DWORD _007AEB50 = (DWORD)Aoc10C_MQ_HookButton007AEB50;
//DWORD _007AEBB0 = (DWORD)Aoc10C_MQ_HookButton007AEBB0;
DWORD _004FDBC2 = 0x04FDBC2;
void __declspec(naked)  Aoc10C_MQ_HookButton007AEA80()
{
	__asm {
		CMP EBP, EDI
		JNZ short _007AEAB1
		//007AEA84   3B1D D8507A00    CMP EBX, DWORD PTR DS : [7A50D8]
		//007AEA8A   75 07            JNZ SHORT age2_x1_.007AEA93
		//007AEA8C   8BCE             MOV ECX, ESI
		//007AEA8E   E8 4D000000      CALL age2_x1_.007AEAE0
		CMP EBX, DWORD PTR DS : [_7A50D4]
		JNZ short _007AEAB1// _007AEAA2
		MOV ECX, ESI
		CALL _007AEB50
		//007AEAA2   3B1D D0507A00    CMP EBX, DWORD PTR DS : [7A50D0]
		//007AEAA8   75 07            JNZ SHORT age2_x1_.007AEAB1
		//007AEAAA   8BCE             MOV ECX, ESI
		//007AEAAC   E8 FF000000      CALL age2_x1_.007AEBB0
		_007AEAB1:
		CMP EBX, DWORD PTR DS : [ESI + 0D40h]
		JMP _004FDBC2
		//007AEABC   0000             ADD BYTE PTR DS : [EAX] , AL
		//007AEABE   0000             ADD BYTE PTR DS : [EAX] , AL
		//007AEAC0   8B0D D8507A00    MOV ECX, DWORD PTR DS : [7A50D8]
		//007AEAC6   A1 DC507A00      MOV EAX, DWORD PTR DS : [7A50DC]
		//007AEACB   21C9             AND ECX, ECX
		//007AEACD   74 0F            JE SHORT age2_x1_.007AEADE
		//007AEACF   8D1485 50F17A00  LEA EDX, DWORD PTR DS : [EAX * 4 + 7AF150]
		//007AEAD6   52               PUSH EDX
		//007AEAD7   6A 00            PUSH 0
		//007AEAD9   E8 B228DAFF      CALL age2_x1_.00551390
		//007AEADE   C3               RETN


	}
}
//// Enable random game setup button
//Injection(0x29c
////MQ
//Injection(0x504084, "E977A72A00");
//Injection(0x4fdbbc, "E9BF0E2B00");
//Injection(0x2c
//Injection(0x5246c0, "E93B492B00");
////Injection(0x556b65, "E956292800");
//Injection(0x660a9, "50");
//Injection(0x6624c, "60937D00001C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C0102030405060708090A0B0C1D1C0D0E0F101112131415161718191A1B");



//Injection(0x5246c0, "E93B492B00");
////Injection(0x556b65, "E956292800");
//Injection(0x660a9, "50");
DWORD _00411460 = 0x0411460;
DWORD _00468630 = 0x0468630;
DWORD _00615AA9 = 0x0615AA9;
void __declspec(naked)  Aoc10C_MQ_HookButton007D9360()
{
	__asm
	{
		PUSH EDI
		PUSH EBX
		PUSH EBP
		SUB ESP, 200h
		MOV ESI, EAX
		MOV DWORD PTR SS : [ESP + 10h] , ECX
		XOR EBX, EBX
		TEST BYTE PTR DS : [_7A5241] , 1h
		JNZ short _007D938D
		MOV EDX, DWORD PTR DS : [791200h]
		MOV ECX, DWORD PTR DS : [EDX + 1614h]
		MOV EDX, DWORD PTR DS : [ECX + 4h]
		AND EDX, EDX
		JLE short _007D940A
		_007D938D:
		MOV EDX, DWORD PTR DS : [7912A0h]
		MOVSX EDI, BYTE PTR DS : [EAX + 6h]
		MOV ECX, DWORD PTR DS : [EDX + 424h]
		MOV DWORD PTR SS : [ESP + 14h] , ECX
		MOV DWORD PTR SS : [ESP + 18h] , EBX
		DEC EDI
		JL short _007D940A
		_007D93A8:
		MOV EAX, DWORD PTR DS : [ESI + EDI * 4h + 8h]
		MOV ECX, DWORD PTR SS : [ESP + 14h]
		PUSH EAX
		CALL _00411460
		TEST EAX, EAX
		JE short _007D93E5
		CMP BYTE PTR DS : [EAX + 48h] , 2h
		MOV EDX, DWORD PTR DS : [EAX + 8h]
		JNZ short _007D93E5
		CMP BYTE PTR DS : [EDX + 4h] , 50h//building
		JNZ short _007D93E5
		MOVSX EDX, WORD PTR DS : [EAX + 1C8h]
		CMP EDX, 0Fh
		JGE short _007D93E5
		MOV ECX, DWORD PTR DS : [EAX + 4h]
		ADD DWORD PTR SS : [ESP + 18h] , EDX
		MOV DWORD PTR SS : [ESP + EBX * 8h + 30h] , ECX
		MOV DWORD PTR SS : [ESP + EBX * 8h + 34h] , EDX
		INC EBX
		_007D93E5:
		DEC EDI
		JGE short _007D93A8
		MOV EAX, EBX
		MOV EDX, DWORD PTR SS : [ESP + 18h]
		LEA EAX, DWORD PTR DS : [EAX + EAX * 2h]
		MOVSX EDI, BYTE PTR DS : [ESI + 7h]
		LEA EAX, DWORD PTR DS : [EAX + EAX * 4h]
		SUB EAX, EDX
		MOV DWORD PTR SS : [ESP + 1Ch] , EAX
		JLE short _007D940A
		CMP EAX, EDI
		JGE short _007D9406
		MOV EDI, EAX
		_007D9406:
		AND EDI, EDI
		JG short _007D9417
		_007D940A:
		ADD ESP, 200h
		POP EBP
		POP EBX
		POP EDI
		POP ESI
		RETN 4
		_007D9417:
		MOV DWORD PTR SS:[ESP+20h],EBX
		MOVSX EBP,WORD PTR DS:[ESI+4h]
		MOV WORD PTR SS:[ESP+8h],BP
		LEA EAX,DWORD PTR SS:[ESP+30h]
		PUSH _007D94A0//age2_x1.007D94A0
		PUSH 8h
		PUSH EBX
		PUSH EAX
		CALL _00615AA9
		ADD ESP,10h
		_007D9439:
		MOV EBX,DWORD PTR SS:[ESP+20h]
		DEC EBX
		JNZ short _007D9447
		MOV WORD PTR SS:[ESP+EBX*8h+36h],DI
		JMP short _007D9468
		_007D9447:
		LEA ECX,DWORD PTR SS:[ESP+EBX*8h+34h]
		ADD DWORD PTR DS:[ECX],10001h
		DEC EDI
		JE short _007D9468
		AND EBX,EBX
		JE short _007D9464
		MOV AX,WORD PTR DS:[ECX]
		CMP AX,WORD PTR DS:[ECX-8h]
		JL short _007D9439
		DEC EBX
		JGE short _007D9447
		_007D9464:
		AND EDI,EDI
		JNZ short _007D9439
		_007D9468:
		MOV EBX,DWORD PTR SS:[ESP+20h]
		_007D946C:
		DEC EBX
		MOV AX,WORD PTR SS:[ESP+EBX*8h+36h]
		TEST AX,AX
		JE short _007D9492
		MOV EDX,DWORD PTR SS:[ESP+EBX*8h+30h]
		MOV ECX,DWORD PTR SS:[ESP+10h]
		MOV WORD PTR SS:[ESP+0Ah],AX
		MOV DWORD PTR SS:[ESP+4h],EDX
		PUSH ESP
		CALL _00468630
		AND EBX,EBX
		JNZ short _007D946C
		_007D9492:
		ADD ESP,200h
		POP EBP
		POP EBX
		POP EDI
		POP ESI
		RETN 4h

		_007D94A0:
		MOV EAX, DWORD PTR SS : [ESP + 4h]
		MOV EDX, DWORD PTR SS : [ESP + 8h]
		MOV ECX, DWORD PTR DS : [EAX + 4h]
		MOV EAX, DWORD PTR DS : [EDX + 4h]
		SUB EAX, ECX
		JG short _007D94B9
		JL short _007D94B5
		RETN
		_007D94B5:
		OR EAX, 0FFFFFFFFh//-1
		RETN
		_007D94B9:
		MOV EAX, 1h
		RETN



	};
}
DWORD _007D9360 = (DWORD)Aoc10C_MQ_HookButton007D9360;
void aoc10c_MQ()
{
	InjectHook(0x0504084, Aoc10C_MQ_HookButton, PATCH_JUMP);//00504084   .-E9 77A72A00    JMP age2_x1.007AE800
	InjectHook(0x4fdbbc, Aoc10C_MQ_HookButton007AEA80, PATCH_JUMP);//00504084   .-E9 77A72A00    JMP age2_x1.007AE800


	//0051E7F0   . E8 CB5E0000    CALL age2_x1_.005246C0
	//005246C0   $-E9 3B492B00    JMP age2_x1_.007D9000
	InjectHook(0x05246C0, Aoc10C_MQ_Hook, PATCH_JUMP);
	writeByte(0x4660a9,0x50 );//	Injection(0x660a9, "50");
	//Injection(0x6624c, "60937D00001C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C0102030405060708090A0B0C1D1C0D0E0F101112131415161718191A1B");
	//InjectHook(0x46624c, Aoc10C_MQ_Hook, PATCH_JUMP);
	//over write switch case
	writeDword(0x046624C, _007D9360);
	BYTE switcMQ[125] =
	{
0x00,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C
,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C
,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C
,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x1D,0x1C,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B
	};
		//00466250   . 00             DB 00                                    ;  Index table to switch 004661D8
		writeData(0x0466250,switcMQ,125);
}

 
DWORD ArrayBuildingSelected[40] = {};
void cleanqueueeee()
{
	for (int i = 0; i < 40; i++)
	{
		ArrayBuildingSelected[i] = 0;
	}
}
DWORD nbselectionnn;
void makequeue()
{
	if (!IsBadReadPtr((void*)(void**)(*(size_t*)0x7912A0), sizeof(UINT_PTR))
		&& !IsBadReadPtr((void*)*(void**)(*(size_t*)0x7912A0 + 0x424), sizeof(UINT_PTR))
		//&& !IsBadReadPtr(*(void**)(*(size_t*)0x7912A0 + 0x1C0), sizeof(UINT_PTR))
		//&& !IsBadReadPtr(*(void**)(*(size_t*)0x7912A0 + 0x268), sizeof(UINT_PTR))
		&& *(void**)(*(size_t*)0x7912A0 + 0x424) != NULL)
	{
		void* pplayer = (void*)sub_5E7560((int)*(void**)0x7912A0);
		if (pplayer != NULL)
		{
			DWORD* lstSelect = (DWORD*)((DWORD)pplayer + 0x1C0);//get the good beging selection addrese
			BYTE* NBSelect = (BYTE*)(void**)((size_t)pplayer + 0x268);//set select range
			//nbselectionnn = *NBSelect;
			void** sel_list = (void**)(lstSelect);
			int cptbuilding = 0;
			for (int i = 0; i < *NBSelect; i++)
			{
				void* master_obj = (void*)*(DWORD*)(lstSelect+i);
				void* obj = (void*)*(DWORD*)((size_t)master_obj + 0x8);
				int object_class = (int)*(BYTE*)((size_t)obj + 0x4);
				if (object_class == 80)
				{
					 *(ArrayBuildingSelected+ cptbuilding ) = (DWORD)master_obj;
					cptbuilding++;
					nbselectionnn++;
				}
				*sel_list++;
			}
		}
	}
}
DWORD f_makequeue = (DWORD)makequeue;
DWORD f_cleanqueueeee = (DWORD)cleanqueueeee;
DWORD _0052488A = 0x052488A;
DWORD _0046A200 = 0x046A200;
DWORD _0051E7AF = 0x051E7AF;
DWORD _005248B8 = 0x05248B8;
//DWORD _0052488A = 0x052488A;
DWORD compterr=0x0;
//0x0524885
void __declspec(naked)  Aoc10C_MQ_Hook_Button007D9360()
{
	__asm
	{
		TEST BYTE PTR DS : [_7A5241] , 1h
		je sq
		call f_makequeue
		//MOV ECX,DWORD PTR DS:[7912A0h]
		//CALL Aoc10c_005E7560       ; age2_x1.005E7560
		//mov ECX,DWORD PTR DS:[EAX+1C4h]//eax = player
		//mov nbselectionnn, ECX
		mov compterr,0h


		loop1:
		MOV EAX,DWORD PTR DS:[7912A0h]
		PUSH ESI
		PUSH EBP
		MOV WORD PTR DS:[EAX+42Ch],BP
		MOV BYTE PTR DS:[EAX+430h],0h
		MOV WORD PTR DS:[EAX+42Eh],0h
		MOV ECX, compterr
		mov ECX, ArrayBuildingSelected[TYPE ArrayBuildingSelected * ECX]

		//MOV ECX,DWORD PTR DS:[EDI+1230h]
		MOV EDX,DWORD PTR DS:[EDI+121Ch]

		PUSH ECX

		MOV ECX,DWORD PTR DS:[EDX+68h]
		

		CALL _0046A200
		
		INC compterr
		mov eax, compterr
		CMP eax, nbselectionnn
		jl loop1
		call f_cleanqueueeee
		mov nbselectionnn, 0h


		JMP _005248B8  
		sq:
		MOV EAX, DWORD PTR DS : [7912A0h]
		JMP _0052488A  


		//loopbutton:	
		//POP EDI
		//POP ESI
		//POP EBP
		//ADD ESP, 208h
		//JMP _0051E7AF  ;  Case 11 of switch 0051E60C


		//MOV ECX,DWORD PTR DS:[7912A0h]
		//CALL Aoc10c_005E7560       ; age2_x1.005E7560
		//LEA ECX,DWORD PTR DS:[EAX+1C4h]//eax = player
		//MOV EAX,DWORD PTR DS:[EAX+268h]
//
//0052488C  |. 66:89A8 2C0400>MOV WORD PTR DS:[EAX+42C],BP
//00524893  |. C680 30040000 >MOV BYTE PTR DS:[EAX+430],0
//0052489A  |. 66:C780 2E0400>MOV WORD PTR DS:[EAX+42E],0
//005248A3  |. 8B8F 30120000  MOV ECX,DWORD PTR DS:[EDI+1230]
//005248A9  |. 8B97 1C120000  MOV EDX,DWORD PTR DS:[EDI+121C]//bacrack address from selection
//005248AF  |. 51             PUSH ECX
//005248B0  |. 8B4A 68        MOV ECX,DWORD PTR DS:[EDX+68]
//005248B3  |. E8 4859F4FF    CALL age2_x1.0046A200


	};
}
//0051E7AF  |> 8B5424 1C      MOV EDX,DWORD PTR SS:[ESP+1C]            ;  Case 12 of switch 0051E609
void MQSQ()
{
	InjectHook(0x0504084, Aoc10C_MQ_HookButton, PATCH_JUMP);//00504084   .-E9 77A72A00    JMP age2_x1.007AE800
	InjectHook(0x4fdbbc, Aoc10C_MQ_HookButton007AEA80, PATCH_JUMP);//00504084   .-E9 77A72A00    JMP age2_x1.007AE800

	InjectHook(0x0524885  , Aoc10C_MQ_Hook_Button007D9360, PATCH_JUMP);
}

void Aoc10CPatchHook(bool wideScreenCentred,bool windowed, HMODULE hModule)
{

	//LoadLibraryA("languageini.dll");
	//slplogo();
	//check if is not 1.0e
	//MOV CL, BYTE PTR DS : [680A18]
	int AoC10e = (*(int*)0x0680A18 == 0x7);
	//no work because dsound is loaded before age.dll :(
	if (!AoC10e)
	{
		nocd();
		noStartup();//no video 
		Aoc10CWidescreen(wideScreenCentred);
		windowedMod(windowed);//todo set  the interface 1280,10244,800 % resolution
		miniMapColor();

		Aoc10c_250pop();
		Aoc10c_FixRecordingExploreStateBug();
		selectAllHotkey(hModule);
		MQSQ();
		//aoc10c_MQ();
	}

}
//CTRL + F11
//005521F3     90             NOP

//00551FD8 | .FF2485 1022550 > JMP DWORD PTR DS : [EAX * 4 + 552210]
//
//005521F8 | > 8B06           MOV EAX, DWORD PTR DS : [ESI]
//005521FA | . 8BCE           MOV ECX, ESI
//005521FC | .FF50 2C        CALL DWORD PTR DS : [EAX + 2C]
//
//	